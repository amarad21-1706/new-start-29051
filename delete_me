

psql -d silver_base -f /Users/aradulescu/PycharmProjects/ILM501/flaskProject/database/database_dump_240520_OK.sql



INSERT INTO users VALUES(4,'astrid','password1','pbkdf2:sha256:260000$Kf5HpJElp6BnKdOs$7358ed6dc67a961bcc6f9a9c7de35baa39e7475d13e4ba666da2146f479b0b31','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'Admin',NULL,'None456',NULL,NULL,NULL,'Adress One','city',NULL,NULL,'123',NULL,'332211','None123',NULL,NULL,'2024-03-03',NULL);
INSERT INTO users VALUES(19,'Giuseppe','gvegas@gmail.com',X'243262243132246e72777072647a634f622f57695876626433774a676565356336514153354f305474736b4b712f684b334a65436469577453737465','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'Giuseppe','','Vegas','Autorità',NULL,'','','city','','','','','','','','2024-01-04 13:12:27.434005',NULL,NULL);
INSERT INTO users VALUES(20,'Antonio','antonio@gmail.com',X'24326224313224386b5179566c726f38657a396b522e5772433169344f666b56747a662f7157536f4a4850626c7a4830494b354b365657466534444f','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'Antonio','','Molteni',NULL,NULL,'','','','','','','','','','','2024-01-20 17:37:33.149114',NULL,NULL);
INSERT INTO users VALUES(21,'Admin','admin@gmail.com',X'24326224313224314b57574156354e366a6963636d4f79706741384e2e374d7257376d3731666b68706642514a37707857394d65484c734339396547','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'Admin','','Admin',NULL,NULL,'','','','','','','','','','','2024-01-20 19:45:45.922254',NULL,NULL);
INSERT INTO users VALUES(22,'Auditor','audit@gmail.com',X'24326224313224377354376e6b5169785176336a42676b64396743544f493353516b6a393345316c4673562e724a795256654d34387378393639624b','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'ernst','and','young',NULL,NULL,'addd','aud add','audacity','pro','aut reg','20149','It','tax and',2,6,'2024-01-20 21:10:54.096691','2024-01-26',NULL);
INSERT INTO users VALUES(23,'employee001','emp001@gmail.com',X'2432622431322457447966364243466f313069362f553455384158797543494d6d74712e304542777a4a6f2e2f7a7861437276306441736233727136','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'emp001','','',NULL,NULL,'','','','','','','','','','','2024-01-20 21:11:36.120164',NULL,NULL);
INSERT INTO users VALUES(24,'guest1','guest@gmail.com',X'2432622431322449652e2e346756504b4653624e59695a46715a494c756654474a727a504e70646c747a64323248595a535065354a6e774543673165','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'guest','','name',NULL,NULL,'','','','','','','','','','','2024-01-20 21:18:22.260419',NULL,NULL);
INSERT INTO users VALUES(25,'user001','user001@gmail.com',X'24326224313224566978453855383371554f4933785a47305a37654e2e643045414f50674458375179576666466d4a414e6f38616b68317141476432','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'user','','lastname001',NULL,NULL,'','','','','','','','','','','2023-12-24 00:00:00.000000',NULL,'2024-01-21 11:54:34.916895');
INSERT INTO users VALUES(26,'emp002','emp002@gmail.com',X'243262243132246e59774b3845304141414f48465a7072627439486565514456316465735057305274346e4b6a63454636425a65784d306f69323869','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'','','',NULL,NULL,'','','','','','','','','','','2024-01-21','2024-01-21',NULL);
INSERT INTO users VALUES(27,'emp003','emp003@gmail.com',X'243262243132244e355668646b67494c4c77734955366d41667938744f72626e314e7469385542346a5a755a6566546868535845573434556a4c6e4b','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'emp003n','','emp003c',NULL,NULL,'','','','','','','','003',31,32,'2024-01-25','2024-01-25',NULL);
INSERT INTO users VALUES(28,'emp004','emp004@gmail.com',X'243262243132246a3364744359464b31454c565a5864717139394c41656952682f46304d56363261494476757253694e445868794c425967472e7979','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'emp004n','','emp004c',NULL,NULL,'','','','','','','','','','','2024-01-25','2024-01-25',NULL);
INSERT INTO users VALUES(30,'emp006','emp006@gmail.com',X'243262243132244c4f4c733579564d36697758417a3064664b67617565454b334d2f44564c624437765978774e42747566517531414b543779486369','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'emp006n','','emp006c',NULL,NULL,'','','','','','','','','','','2024-01-25','2024-01-25',NULL);
INSERT INTO users VALUES(31,'manager001','mngr1@gmail.com',X'243262243132246b354a4450414a79453079364653415a74476f586c4f714d454851696335576b62535262494473732e477a6c627356782e4343414b','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'mngr1','','cmngr1',NULL,NULL,'','','','','','','','','','','2024-01-28','2024-01-28',NULL);
INSERT INTO users VALUES(32,'Antonio002','antonio002@gmail.com',X'2432622431322446445835316b46304f51784b7a684d4643523446542e517075526433746c6c376a697665755a4770683941554c48654935755a494b','INCORRZI46GF4TFSAJN354XXX4VVINCOM',NULL,'Antonio','','',NULL,NULL,'','','','','','','','','','','2024-02-04','2024-02-04',NULL);
INSERT INTO users VALUES(33,'emp007','emp007@gmail.com',X'243262243132244556353365374530424756504b30784d4365667a444f6b372e763748564964524c5158786e5452386a35323478334b6b7834714e32','NWPEWZI46GF4TFSAJN354XXX4VVJH2LJ',NULL,'employee','','number007',NULL,NULL,'','','','','','','','','','','2024-03-01','2024-03-01',NULL);

INSERT INTO base_data VALUES(169,20,0,1,1,1,'control_area',NULL,NULL,'area contendibilità',2,2,NULL,'2024-02-13 22:53:16.210432','2024-02-13 23:09:20.711818','2024-02-13 21:53:16',NULL,NULL,NULL,NULL,NULL,'32',NULL,NULL,NULL,NULL,NULL,2024,2,22,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(170,20,0,1,1,1,'control_area',NULL,NULL,'area contendibilità',2,2,NULL,'2024-02-13 22:53:45.741881','2024-02-13 22:53:45.744724','2024-02-13 21:53:45',NULL,NULL,NULL,NULL,NULL,'7',NULL,NULL,NULL,NULL,NULL,2023,3,5,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(174,20,0,3,1,1,'control_area',10,NULL,'flussi',1,1,3,'2024-02-13 23:41:35.307665','2024-03-18 21:49:40.915013','2024-02-13 22:41:35',NULL,NULL,NULL,NULL,NULL,'444',NULL,NULL,NULL,NULL,NULL,2024,22,12,10,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(175,20,0,3,1,1,'control_area',2,NULL,'flussi',1,1,3,'2024-02-13 23:42:28.778258','2024-02-17 14:20:07.470952','2024-02-13 22:42:28',NULL,NULL,NULL,NULL,NULL,'5',NULL,NULL,NULL,NULL,NULL,2024,NULL,NULL,2,3,4,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(183,20,0,3,1,1,'control_area',11,NULL,'atti',1,2,NULL,'2024-02-14 00:00:19.209372','2024-02-22 19:14:08.863113','2024-02-13 23:00:19',NULL,'123','2024-02-06 16:36:00.000000',NULL,NULL,NULL,'1',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ARERA_1.pdf','No');
INSERT INTO base_data VALUES(184,20,0,3,1,1,'control_area',15,NULL,'atti',1,2,NULL,'2024-02-14 00:00:30.180233','2024-02-17 15:24:58.684639','2024-02-13 23:00:30',NULL,'123','2024-02-06 16:36:00.000000',NULL,NULL,NULL,'2',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ARERA_1.pdf','Yes');
INSERT INTO base_data VALUES(185,20,0,3,1,1,'control_area',12,NULL,'atti',1,2,NULL,'2024-02-14 00:00:47.523861','2024-02-17 15:27:02.747445','2024-02-13 23:00:47',NULL,'123','2024-02-06 16:36:00.000000',NULL,NULL,NULL,'3',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ARERA_1.pdf','Yes');
INSERT INTO base_data VALUES(186,20,0,3,1,1,'control_area',14,NULL,'atti',1,2,NULL,'2024-02-14 00:01:19.242283','2024-02-17 15:27:14.313281','2024-02-13 23:01:19',NULL,'123','2024-02-06 16:36:00.000000',NULL,NULL,NULL,'',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ARERA_1.pdf','No');
INSERT INTO base_data VALUES(187,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-02-14 00:01:33.423490','2024-03-28 09:51:23.446838','2024-02-13 23:01:33',NULL,'12321','2024-02-06 16:36:00.000000',NULL,NULL,NULL,'4',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(191,20,0,3,1,1,'control_area',NULL,5,'iniziative_dso_dso',1,8,NULL,'2024-02-14 00:02:37.424775','2024-02-14 00:03:48.954545','2024-02-13 23:02:37',NULL,NULL,NULL,NULL,NULL,NULL,'234',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg','No');
INSERT INTO base_data VALUES(197,20,0,1,1,1,'control_area',NULL,NULL,'gestione switching',2,6,NULL,'2024-02-14 11:25:33.965088','2024-02-14 11:25:33.965096','2024-02-14 10:25:33',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg',0);
INSERT INTO base_data VALUES(198,20,0,1,1,1,'control_area',NULL,NULL,'livello contendibilità',2,7,NULL,'2024-02-14 11:32:18.673617','2024-02-14 11:32:18.675762','2024-02-14 10:32:18',NULL,NULL,NULL,NULL,NULL,'n900',NULL,NULL,NULL,NULL,NULL,2024,NULL,NULL,1,2,4,6,8,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,30,5,7,90,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg',0);
INSERT INTO base_data VALUES(199,26,8,1,1,1,'control_area',NULL,NULL,'livello contendibilità',2,15,NULL,'2024-02-14 12:13:15.384181','2024-02-17 23:46:26.723901','2024-02-14 11:13:15',NULL,NULL,NULL,NULL,NULL,'note GEI 123',NULL,NULL,NULL,NULL,NULL,2024,112,12,24,12,6,7,6,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,50,4.5,6.25,7,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg',0);
INSERT INTO base_data VALUES(205,20,0,3,1,1,'control_area',12,NULL,'iniziative_dso_as',1,6,NULL,'2024-02-15 16:49:23.246295','2024-02-17 15:40:26.564636','2024-02-15 15:49:23',NULL,NULL,NULL,NULL,NULL,NULL,'note 123',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg','Yes');
INSERT INTO base_data VALUES(210,20,0,3,1,1,'control_area',11,NULL,'contingencies',1,4,NULL,'2024-02-15 16:59:42.768917','2024-02-18 00:43:28.222626','2024-02-15 15:59:42',NULL,'we','2024-02-05 00:42:00.000000',NULL,NULL,NULL,'n81',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg','No');
INSERT INTO base_data VALUES(211,20,0,3,1,1,'control_area',14,NULL,'contenziosi',1,3,NULL,'2024-02-15 16:59:56.440330','2024-03-23 22:27:59.127469','2024-02-15 15:59:56',NULL,'443322','2024-03-04 22:27:00.000000',NULL,NULL,NULL,'n824',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(213,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-02-15 17:03:47.642021','2024-03-25 17:23:25.512070','2024-02-15 16:03:47',NULL,'246','2024-03-24 17:08:00.000000',NULL,NULL,NULL,'n510',NULL,NULL,NULL,NULL,2023,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg','No');
INSERT INTO base_data VALUES(222,20,0,3,1,1,'control_area',8,NULL,'flussi',1,1,1,'2024-02-16 00:22:31.548122','2024-02-16 00:22:31.550452','2024-02-15 23:22:31',NULL,NULL,NULL,NULL,NULL,'1',NULL,NULL,NULL,NULL,NULL,2024,NULL,NULL,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'background_image2.jpg',0);
INSERT INTO base_data VALUES(225,20,0,3,1,1,'control_area',1,NULL,'flussi',1,1,2,'2024-02-16 12:03:36.836712','2024-02-17 14:19:25.372789','2024-02-16 11:03:36',NULL,NULL,NULL,NULL,NULL,'enel',NULL,NULL,NULL,NULL,NULL,2024,25,20,5,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(226,20,0,3,1,1,'control_area',2,NULL,'flussi',1,1,1,'2024-02-16 12:04:02.574403','2024-02-17 14:19:33.379517','2024-02-16 11:04:02',NULL,NULL,NULL,NULL,NULL,'enel',NULL,NULL,NULL,NULL,NULL,2024,25,21,5,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(235,20,0,3,1,1,'control_area',11,NULL,'contingencies',1,4,NULL,'2024-02-16 17:26:46.600896','2024-02-16 17:26:46.602361','2024-02-16 16:26:46',NULL,NULL,NULL,NULL,NULL,NULL,'Inserire nota di commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(250,20,0,3,1,1,'control_area',4,NULL,'flussi',1,1,4,'2024-02-17 14:05:25.748022','2024-02-17 14:19:48.495385','2024-02-17 13:05:25',NULL,NULL,NULL,NULL,NULL,'mr',NULL,NULL,NULL,NULL,NULL,2024,177,67,21,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(251,20,0,3,1,1,'control_area',6,NULL,'flussi',1,1,2,'2024-02-17 14:14:53.553043','2024-02-17 14:19:57.744797','2024-02-17 13:14:53',NULL,NULL,NULL,NULL,NULL,'v18',NULL,NULL,NULL,NULL,NULL,2024,18,18,18,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md',0);
INSERT INTO base_data VALUES(252,20,0,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-17 14:27:27.861147','2024-02-17 14:27:27.869277','2024-02-17 13:27:27',NULL,NULL,NULL,NULL,NULL,'1',NULL,NULL,NULL,NULL,NULL,2024,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md',0);
INSERT INTO base_data VALUES(253,20,0,3,3,1,'control_area',8,NULL,'flussi',1,1,3,'2024-02-17 14:30:33.799360','2024-02-17 14:30:59.294461','2024-02-17 13:30:33',NULL,NULL,NULL,NULL,NULL,'eni 3',NULL,NULL,NULL,NULL,NULL,2023,1,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md',0);
INSERT INTO base_data VALUES(254,20,0,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-17 14:35:20.169462','2024-02-17 14:35:20.173954','2024-02-17 13:35:20',NULL,NULL,NULL,NULL,NULL,'eni 2',NULL,NULL,NULL,NULL,NULL,2024,1,0,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md',0);
INSERT INTO base_data VALUES(263,20,0,3,1,1,'control_area',12,NULL,'contingencies',1,5,NULL,'2024-02-17 15:40:04.534867','2024-02-17 15:40:04.536784','2024-02-17 14:40:04',NULL,NULL,NULL,NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','Yes');
INSERT INTO base_data VALUES(264,20,0,3,1,1,'control_area',14,NULL,'iniziative_dso_as',1,5,NULL,'2024-02-17 15:40:11.347993','2024-02-17 15:40:11.349786','2024-02-17 14:40:11',NULL,NULL,NULL,NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','Yes');
INSERT INTO base_data VALUES(265,20,0,3,1,1,'control_area',11,NULL,'inziative_as_dso',1,6,NULL,'2024-02-17 15:40:36.285354','2024-02-17 15:40:36.287189','2024-02-17 14:40:36',NULL,NULL,NULL,NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','Yes');
INSERT INTO base_data VALUES(268,20,0,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-17 20:18:02.209041','2024-02-17 20:18:02.214600','2024-02-17 19:18:02',NULL,NULL,NULL,NULL,NULL,'eni3',NULL,NULL,NULL,NULL,NULL,2024,7,5,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(274,26,8,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-17 21:22:37.557954','2024-02-17 21:25:12.011719','2024-02-17 20:22:37',NULL,NULL,NULL,NULL,NULL,'òòsd',NULL,NULL,NULL,NULL,NULL,2024,8,6,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(275,26,8,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-02-17 21:23:10.872643','2024-02-17 21:23:10.874377','2024-02-17 20:23:10',NULL,'44','2024-02-05 21:23:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(276,26,8,3,1,1,'control_area',11,NULL,'contingencies',1,4,NULL,'2024-02-17 21:23:22.962767','2024-02-17 21:23:30.422619','2024-02-17 20:23:22',NULL,'555','2024-02-12 21:23:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(277,26,8,3,1,1,'control_area',11,NULL,'iniziative_dso_as',1,6,NULL,'2024-02-17 21:24:17.409650','2024-02-17 21:24:17.411277','2024-02-17 20:24:17',NULL,'66','2024-02-14 21:24:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(279,26,8,3,1,1,'control_area',11,NULL,'iniziative_dso_dso',1,8,NULL,'2024-02-17 21:24:42.775638','2024-02-17 21:24:42.777290','2024-02-17 20:24:42',NULL,'5566','2024-02-27 21:24:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(286,26,8,1,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-17 22:04:08.047569','2024-02-17 22:04:08.049569','2024-02-17 21:04:08',NULL,NULL,NULL,NULL,NULL,'n2233',NULL,NULL,NULL,NULL,NULL,2022,22,33,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(287,26,8,1,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-17 22:04:53.091769','2024-02-17 22:04:53.094127','2024-02-17 21:04:53',NULL,NULL,NULL,NULL,NULL,'n22',NULL,NULL,NULL,NULL,NULL,2024,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(288,26,8,1,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-17 22:05:08.209101','2024-02-17 22:05:08.211086','2024-02-17 21:05:08',NULL,NULL,NULL,NULL,NULL,'n34',NULL,NULL,NULL,NULL,NULL,2023,3,4,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(289,26,8,1,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-17 22:19:27.576241','2024-02-17 22:20:01.440139','2024-02-17 21:19:27',NULL,NULL,NULL,NULL,NULL,'n123',NULL,NULL,NULL,NULL,NULL,2024,24,12,12,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(290,26,8,1,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-17 22:29:33.085891','2024-02-17 22:29:33.087807','2024-02-17 21:29:33',NULL,NULL,NULL,NULL,NULL,'n33444',NULL,NULL,NULL,NULL,NULL,2023,223,123,100,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(291,26,8,1,1,1,'control_area',NULL,NULL,'accesso venditori',2,12,NULL,'2024-02-17 22:30:26.911152','2024-02-17 22:30:26.912721','2024-02-17 21:30:26',NULL,NULL,NULL,NULL,NULL,'n3344',NULL,NULL,NULL,NULL,NULL,2024,354,123,231,22,33,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(292,26,8,1,1,1,'control_area',NULL,NULL,'accesso venditori',2,12,NULL,'2024-02-17 22:50:55.949149','2024-02-17 22:50:55.951085','2024-02-17 21:50:55',NULL,NULL,NULL,NULL,NULL,'n123',NULL,NULL,NULL,NULL,NULL,2021,223,123,100,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(293,26,8,1,1,1,'control_area',7,NULL,'quote mercato ivi',2,13,NULL,'2024-02-17 22:54:11.848196','2024-02-17 22:55:22.943135','2024-02-17 21:54:11',NULL,NULL,NULL,NULL,NULL,'n122',NULL,NULL,NULL,NULL,NULL,2024,111,11,122,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,23.19999999999999929,22.30000000000000071,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(294,26,8,1,1,1,'control_area',NULL,NULL,'livello contendibilità',2,15,NULL,'2024-02-17 23:34:49.797869','2024-02-17 23:47:22.344992','2024-02-17 22:34:49',NULL,NULL,NULL,NULL,NULL,'note 19881 wljsdfsd qsòdkf qsdkfsòl qsdòlkf qòslk qlòskdqòlsklklòk fqw. wefkld pos qopdfpoqsp  wklqdlk òwlkfòlwà òlwkewoperwei pi òqlkò q. --',NULL,NULL,NULL,NULL,NULL,2024,1,2,4,6,8,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,3,5,7,8,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(295,20,0,3,1,1,'control_area',11,NULL,'contingencies',1,4,NULL,'2024-02-18 00:42:35.867970','2024-02-18 00:42:35.872210','2024-02-17 23:42:35',NULL,'3344','2024-02-05 00:42:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(297,30,9,1,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-22 00:13:08.973969','2024-02-22 00:13:20.711854','2024-02-21 23:13:08',NULL,NULL,NULL,NULL,NULL,'note 12.1',NULL,NULL,NULL,NULL,NULL,2024,12,6,6,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,3,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(298,20,0,3,1,1,'control_area',9,NULL,'flussi',1,1,3,'2024-02-22 19:12:18.810345','2024-02-22 19:12:45.206388','2024-02-22 18:12:18',NULL,NULL,NULL,NULL,NULL,'Eni 123',NULL,NULL,NULL,NULL,NULL,2024,12,4,8,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(300,30,9,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-22 19:23:43.966350','2024-02-22 19:23:43.969394','2024-02-22 18:23:43',NULL,NULL,NULL,NULL,NULL,'sdlijdifo',NULL,NULL,NULL,NULL,NULL,2024,1,1,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(301,30,9,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-22 19:24:07.796054','2024-02-22 19:24:07.799350','2024-02-22 18:24:07',NULL,NULL,NULL,NULL,NULL,'sdicjasjdio',NULL,NULL,NULL,NULL,NULL,2024,2,0,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(305,20,0,1,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-23 15:07:32.638961','2024-02-23 15:07:32.649211','2024-02-23 14:07:32',NULL,NULL,NULL,NULL,NULL,'eee',NULL,NULL,NULL,NULL,NULL,2024,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(307,20,0,1,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-23 15:13:34.855895','2024-02-23 15:13:34.862036','2024-02-23 14:13:34',NULL,NULL,NULL,NULL,NULL,'3',NULL,NULL,NULL,NULL,NULL,2023,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(308,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-23 15:52:25.646116','2024-03-21 22:54:07.010059','2024-02-23 14:52:25',NULL,NULL,NULL,NULL,NULL,'erer',NULL,NULL,NULL,NULL,NULL,2022,2,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(309,20,0,1,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-23 15:57:01.803089','2024-02-23 15:57:01.810214','2024-02-23 14:57:01',NULL,NULL,NULL,NULL,NULL,'n3',NULL,NULL,NULL,NULL,NULL,2021,3,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(310,20,0,1,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-23 15:58:44.129393','2024-02-23 15:58:44.137204','2024-02-23 14:58:44',NULL,NULL,NULL,NULL,NULL,'n4',NULL,NULL,NULL,NULL,NULL,2020,4,4,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(311,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-23 15:59:51.862645','2024-03-30 17:01:53.266870','2024-02-23 14:59:51',NULL,NULL,NULL,NULL,NULL,'n5',NULL,NULL,NULL,NULL,NULL,2024,5,5,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(312,20,0,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-23 16:57:37.541659','2024-02-23 16:57:37.550931','2024-02-23 15:57:37',NULL,NULL,NULL,NULL,NULL,'miss',NULL,NULL,NULL,NULL,NULL,2024,4,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(313,20,0,1,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-23 17:01:26.506343','2024-02-23 17:01:26.515573','2024-02-23 16:01:26',NULL,NULL,NULL,NULL,NULL,'3note',NULL,NULL,NULL,NULL,NULL,2024,1,1,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,3,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(316,26,8,2,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-25 18:57:26.056357','2024-02-25 18:57:26.059355','2024-02-25 17:57:26',NULL,NULL,NULL,NULL,NULL,'2',NULL,NULL,NULL,NULL,NULL,2024,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(317,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-25 19:11:43.884202','2024-03-21 22:53:25.328607','2024-02-25 18:11:43',NULL,NULL,NULL,NULL,NULL,'1234',NULL,NULL,NULL,NULL,NULL,2024,1,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(318,26,8,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-25 21:53:28.303422','2024-02-27 21:37:35.737780','2024-02-25 20:53:28',NULL,NULL,NULL,NULL,NULL,'sdfasd',NULL,NULL,NULL,NULL,NULL,2024,5,4,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(319,26,8,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-25 22:02:55.481923','2024-02-25 22:02:55.496007','2024-02-25 21:02:55',NULL,NULL,NULL,NULL,NULL,'fqdf',NULL,NULL,NULL,NULL,NULL,2024,4,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(320,26,8,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-25 22:03:33.564980','2024-02-25 22:03:33.567946','2024-02-25 21:03:33',NULL,NULL,NULL,NULL,NULL,'11',NULL,NULL,NULL,NULL,NULL,2023,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(321,26,8,2,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-25 22:07:02.553091','2024-02-25 22:07:02.556087','2024-02-25 21:07:02',NULL,NULL,NULL,NULL,NULL,'ewdf',NULL,NULL,NULL,NULL,NULL,2023,3,4,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(322,26,8,2,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-25 22:07:32.203943','2024-02-25 22:07:32.207573','2024-02-25 21:07:32',NULL,NULL,NULL,NULL,NULL,'df',NULL,NULL,NULL,NULL,NULL,2024,3,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(323,26,8,2,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-25 22:07:50.185930','2024-02-25 22:07:50.189318','2024-02-25 21:07:50',NULL,NULL,NULL,NULL,NULL,'n2',NULL,NULL,NULL,NULL,NULL,2023,3,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(325,26,8,3,1,1,'control_area',8,NULL,'flussi',1,1,2,'2024-02-25 22:48:52.238116','2024-02-25 22:48:52.249925','2024-02-25 21:48:52',NULL,NULL,NULL,NULL,NULL,'sc',NULL,NULL,NULL,NULL,NULL,2024,2,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(328,26,8,3,1,1,'control_area',11,NULL,'iniziative_dso_dso',1,8,NULL,'2024-02-25 22:50:25.674943','2024-02-25 22:50:25.677569','2024-02-25 21:50:25',NULL,'432','2024-02-07 22:50:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2023,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(329,26,8,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-25 23:28:37.966825','2024-02-25 23:28:37.978031','2024-02-25 22:28:37',NULL,NULL,NULL,NULL,NULL,'wd',NULL,NULL,NULL,NULL,NULL,2024,2,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(331,26,8,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-25 23:29:11.363505','2024-02-25 23:29:11.369615','2024-02-25 22:29:11',NULL,NULL,NULL,NULL,NULL,'n11',NULL,NULL,NULL,NULL,NULL,2022,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(332,26,8,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-25 23:29:25.780997','2024-02-25 23:29:25.784066','2024-02-25 22:29:25',NULL,NULL,NULL,NULL,NULL,'n22',NULL,NULL,NULL,NULL,NULL,2021,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(333,26,8,2,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-02-25 23:29:43.560606','2024-02-25 23:29:43.563688','2024-02-25 22:29:43',NULL,NULL,NULL,NULL,NULL,'2',NULL,NULL,NULL,NULL,NULL,2022,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(334,26,8,2,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-02-25 23:30:14.497751','2024-02-25 23:30:14.500866','2024-02-25 22:30:14',NULL,NULL,NULL,NULL,NULL,'2',NULL,NULL,NULL,NULL,NULL,2022,4,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(335,26,8,2,1,1,'control_area',NULL,NULL,'accesso venditori',2,12,NULL,'2024-02-25 23:30:30.555127','2024-02-25 23:30:30.558991','2024-02-25 22:30:30',NULL,NULL,NULL,NULL,NULL,'3',NULL,NULL,NULL,NULL,NULL,2024,6,3,3,3,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(336,26,8,2,1,1,'control_area',NULL,NULL,'accesso venditori',2,12,NULL,'2024-02-25 23:30:51.133851','2024-02-25 23:30:51.137036','2024-02-25 22:30:51',NULL,NULL,NULL,NULL,NULL,'sdDDF DLKaskKL',NULL,NULL,NULL,NULL,NULL,2023,5,2,3,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(337,26,8,2,1,1,'control_area',7,NULL,'quote mercato ivi',2,13,NULL,'2024-02-25 23:31:10.748937','2024-02-25 23:31:10.752082','2024-02-25 22:31:10',NULL,NULL,NULL,NULL,NULL,'n Idaho oiuad',NULL,NULL,NULL,NULL,NULL,2024,1,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(338,26,8,2,1,1,'control_area',10,NULL,'quote mercato ivi',2,13,NULL,'2024-02-25 23:31:35.981545','2024-02-25 23:31:35.984594','2024-02-25 22:31:35',NULL,NULL,NULL,NULL,NULL,'d',NULL,NULL,NULL,NULL,NULL,2023,3,1,4,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(340,26,8,2,1,1,'control_area',NULL,NULL,'livello contendibilità',2,15,NULL,'2024-02-25 23:32:59.278280','2024-02-25 23:32:59.282569','2024-02-25 22:32:59',NULL,NULL,NULL,NULL,NULL,'dsdcqs',NULL,NULL,NULL,NULL,NULL,2024,1,1,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(341,26,8,2,1,1,'control_area',NULL,NULL,'livello contendibilità',2,15,NULL,'2024-02-25 23:33:24.024976','2024-02-25 23:33:24.028145','2024-02-25 22:33:24',NULL,NULL,NULL,NULL,NULL,'1',NULL,NULL,NULL,NULL,NULL,2023,1,1,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(342,26,8,2,1,1,'control_area',NULL,NULL,'livello contendibilità',2,15,NULL,'2024-02-25 23:39:35.343656','2024-02-25 23:39:35.347857','2024-02-25 22:39:35',NULL,NULL,NULL,NULL,NULL,'sdaS',NULL,NULL,NULL,NULL,NULL,2022,3,1,1,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,0,2.25,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(343,26,8,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-02-25 23:46:41.705024','2024-02-25 23:46:41.708251','2024-02-25 22:46:41',NULL,NULL,NULL,NULL,NULL,'1',NULL,NULL,NULL,NULL,NULL,2020,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(350,20,0,2,1,1,'control_area',NULL,NULL,'trattamento switching',2,14,NULL,'2024-02-26 00:13:12.300974','2024-03-30 17:03:56.214347','2024-02-25 23:13:12',NULL,NULL,NULL,NULL,NULL,'NOTA 213 321',NULL,NULL,NULL,NULL,NULL,2024,9,4,1,3,5,4,1,1,1,1,1,NULL,NULL,NULL,NULL,NULL,NULL,44.43999999999999773,25,75,55.56000000000000227,80,20,NULL,12,NULL,NULL,0);
INSERT INTO base_data VALUES(351,26,8,2,1,1,'control_area',NULL,NULL,'trattamento switching',2,14,NULL,'2024-02-26 00:22:20.705820','2024-02-26 00:22:20.715064','2024-02-25 23:22:20',NULL,NULL,NULL,NULL,NULL,'note 345',NULL,NULL,NULL,NULL,NULL,2023,13,6,5,1,7,5,2,1,1,1,0,NULL,NULL,NULL,NULL,NULL,NULL,46.14999999999999858,83.3299999999999983,16.67000000000000171,53.85000000000000142,71.43000000000000683,NULL,0,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(352,26,8,2,1,1,'control_area',NULL,NULL,'trattamento switching',2,14,NULL,'2024-02-26 00:24:32.855794','2024-02-26 00:24:32.864934','2024-02-25 23:24:32',NULL,NULL,NULL,NULL,NULL,'jioeqijoewf',NULL,NULL,NULL,NULL,NULL,2022,27,12,7,5,15,7,8,1,1,2,2,NULL,NULL,NULL,NULL,NULL,NULL,44.43999999999999773,58.3299999999999983,41.6700000000000017,55.56000000000000227,46.6700000000000017,53.3299999999999983,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(353,26,8,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-27 21:37:01.372454','2024-02-27 21:37:01.382881','2024-02-27 20:37:01',NULL,NULL,NULL,NULL,NULL,'dad',NULL,NULL,NULL,NULL,NULL,2024,NULL,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(354,26,8,3,1,1,'control_area',7,NULL,'flussi',1,1,1,'2024-02-27 21:42:44.872969','2024-02-27 21:42:44.878831','2024-02-27 20:42:44',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2024,1,1,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(367,28,8,3,1,1,'control_area',16,NULL,'atti',1,2,NULL,'2024-02-29 13:55:53.436777','2024-02-29 13:55:53.447425','2024-02-29 12:55:53',NULL,'54321','2024-02-05 13:55:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'//Users/aradulescu/PycharmProjects/ILMFlask101/flaskProject/static/docs/company_files/company_id_8/2024/Formular_cerere_inregistrare_locatiune.pdf','No');
INSERT INTO base_data VALUES(368,28,8,3,1,1,'control_area',15,NULL,'atti',1,2,NULL,'2024-02-29 15:57:59.588466','2024-02-29 15:57:59.596879','2024-02-29 14:57:59',NULL,'445566','2024-02-04 15:57:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'//Users/aradulescu/PycharmProjects/ILMFlask101/flaskProject/static/docs/company_files/company_id_8/2024/Formular_cerere_inregistrare_locatiune_1.pdf','No');
INSERT INTO base_data VALUES(370,20,0,2,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-03-15 18:52:36.900905','2024-03-15 18:52:36.911986','2024-03-15 17:52:36',NULL,NULL,NULL,NULL,NULL,'asjfisjs c èic',NULL,NULL,NULL,NULL,NULL,2024,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(375,20,0,3,1,1,'control_area',16,NULL,'contenziosi',1,3,NULL,'2024-03-16 23:41:58.119530','2024-03-16 23:41:58.128382','2024-03-16 22:41:58',NULL,'446688','2024-03-04 23:41:00.000000',NULL,NULL,NULL,'Inserire commento 446688',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Pasaport_Radulescu.pdf','No');
INSERT INTO base_data VALUES(376,20,0,3,1,1,'control_area',11,NULL,'atti',1,2,NULL,'2024-03-16 23:44:49.998630','2024-03-16 23:44:50.014662','2024-03-31 00:00:00.000000',NULL,'123','2024-03-03 23:44:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'//Users/aradulescu/PycharmProjects/ILMFlask101/flaskProject/static/docs/company_files/company_id_0/2024/Pasaport_Radulescu.pdf','No');
INSERT INTO base_data VALUES(377,20,0,3,1,1,'control_area',11,NULL,'atti',1,2,NULL,'2024-03-16 23:37:15','2024-03-17 00:37:15.930212','2024-03-16 23:37:15',NULL,'114477','2024-03-05 00:36:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'//Users/aradulescu/PycharmProjects/ILMFlask101/flaskProject/static/docs/company_files/company_id_0/2024/Pasaport_Radulescu_1.pdf','No');
INSERT INTO base_data VALUES(379,20,0,3,1,1,'control_area',11,NULL,'atti',1,2,NULL,'2024-03-17 00:25:08','2024-03-17 01:25:08.172426','2024-03-17 00:25:08',NULL,'234876','2024-03-05 01:24:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'//Users/aradulescu/PycharmProjects/ILMFlask101/flaskProject/static/docs/company_files/company_id_0/2024/Pasaport_Radulescu_2.pdf','No');
INSERT INTO base_data VALUES(381,20,0,3,1,1,'control_area',16,NULL,'contenziosi',1,3,NULL,'2024-03-17 20:41:35.395208','2024-03-17 20:41:35.398295','2024-03-17 19:41:35',NULL,'334455','2024-03-07 20:41:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(382,20,0,3,1,1,'control_area',15,NULL,'contenziosi',1,3,NULL,'2024-03-17 20:45:26.658154','2024-03-17 20:45:26.665411','2024-03-17 19:45:26',NULL,'1234','2024-03-12 20:45:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(383,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-17 20:48:50.332119','2024-03-17 20:48:50.340871','2024-03-17 19:48:50',NULL,'4321','2024-03-04 20:48:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(384,20,0,3,1,1,'control_area',13,NULL,'contenziosi',1,3,NULL,'2024-03-17 20:55:26.701634','2024-03-17 20:55:26.708806','2024-03-17 19:55:26',NULL,'332211','2024-03-06 20:55:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(385,20,0,3,1,1,'control_area',14,NULL,'contenziosi',1,3,NULL,'2024-03-17 21:25:05.708438','2024-03-17 21:25:05.715803','2024-03-17 20:25:05',NULL,'333','2024-03-03 21:24:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(386,20,0,3,1,1,'control_area',12,NULL,'contenziosi',1,3,NULL,'2024-03-17 22:26:00.787526','2024-03-17 22:26:00.796486','2024-03-17 21:26:00',NULL,'232','2024-03-03 22:25:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(387,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-17 22:49:46.585520','2024-03-17 22:49:46.594343','2024-03-17 21:49:46',NULL,'113355','2024-03-04 22:49:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(388,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-17 22:53:38.451748','2024-03-17 22:53:38.460109','2024-03-17 21:53:38',NULL,'223344','2024-03-10 22:53:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(410,20,0,3,1,NULL,NULL,11,NULL,NULL,1,NULL,NULL,'2024-03-19 12:25:51.896461','2024-03-19 11:25:51','2024-03-19 11:25:51',NULL,'9','2024-03-09 12:25:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(411,20,0,3,1,NULL,NULL,11,NULL,NULL,NULL,NULL,NULL,'2024-03-19 11:33:08','2024-03-19 11:33:08','2024-03-19 11:33:08',NULL,'10','2024-03-10 12:33:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(412,20,0,2,2,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-03-21 22:53:48.731545','2024-03-22 00:19:22.824565','2024-03-21 21:53:48','Antonio',NULL,NULL,NULL,NULL,'note 34 45',NULL,NULL,NULL,NULL,NULL,2023,34,45,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(413,20,0,3,1,1,'control_area',12,NULL,'contenziosi',1,3,NULL,'2024-03-23 20:13:56.089509','2024-03-23 20:13:56.098642','2024-03-23 19:13:56',NULL,'1','2024-03-05 20:13:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(414,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 20:31:59.530447','2024-03-23 20:31:59.539422','2024-03-23 19:31:59',NULL,'7','2024-03-07 20:31:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(415,20,0,3,1,1,'control_area',13,NULL,'contenziosi',1,3,NULL,'2024-03-23 20:36:24.192820','2024-03-23 20:36:24.201546','2024-03-23 19:36:24',NULL,'3','2024-03-03 20:36:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(416,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 21:47:19.389738','2024-03-23 21:47:19.401132','2024-03-23 20:47:19',NULL,'9','2024-03-09 21:47:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(417,20,0,3,1,1,'control_area',12,NULL,'contenziosi',1,3,NULL,'2024-03-23 21:47:54.624497','2024-03-23 21:47:54.631236','2024-03-23 20:47:54',NULL,'10','2024-03-10 21:47:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(418,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 22:08:31.873315','2024-03-23 22:08:31.883378','2024-03-23 21:08:31',NULL,'112233','2024-03-11 22:07:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(419,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 22:20:05.443086','2024-03-23 22:20:05.455378','2024-03-23 21:20:05',NULL,'1213','2024-03-12 22:19:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(420,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 22:22:56.387750','2024-03-23 22:22:56.399434','2024-03-23 21:22:56',NULL,'775533','2024-03-07 22:22:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(421,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 22:40:11.325018','2024-03-23 22:40:11.338422','2024-03-23 21:40:11',NULL,'12','2024-03-12 22:39:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(422,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 23:26:15.804453','2024-03-23 23:26:15.815302','2024-03-23 22:26:15',NULL,'44','2024-03-04 23:25:00.000000',NULL,NULL,NULL,'Inserire commento123',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(423,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-23 23:57:12.496455','2024-03-23 23:57:12.508002','2024-03-23 22:57:12',NULL,'8','2024-03-08 23:56:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(424,20,0,3,1,1,'control_area',16,NULL,'contenziosi',1,3,NULL,'2024-03-24 00:51:22.269205','2024-03-24 00:51:22.279536','2024-03-23 23:51:22',NULL,'112233','2024-03-11 00:50:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(425,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-24 01:01:33.109916','2024-03-24 01:01:33.119655','2024-03-24 00:01:33',NULL,'2233','2024-03-22 01:01:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(427,20,0,3,1,1,'control_area',14,NULL,'contenziosi',1,3,NULL,'2024-03-26 11:41:12.234397','2024-03-26 11:41:12.258348','2024-03-26 10:41:12',NULL,'1234556778890','2024-03-01 11:40:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(428,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 11:52:17.807233','2024-03-26 11:52:17.820605','2024-03-26 10:52:17',NULL,'999','2024-03-09 11:51:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(429,20,0,3,1,1,'control_area',16,NULL,'contenziosi',1,3,NULL,'2024-03-26 12:42:02.107129','2024-03-26 12:42:02.111691','2024-03-26 11:42:02',NULL,'223311','2024-03-11 12:41:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(431,20,0,3,1,1,'control_area',15,NULL,'contenziosi',1,3,NULL,'2024-03-26 13:14:05.080752','2024-03-26 13:14:05.090951','2024-03-26 12:14:05',NULL,'7777','2024-03-07 13:13:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Work_Python_Repository_18Mar2024.docx','No');
INSERT INTO base_data VALUES(432,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 14:12:50.700395','2024-03-26 14:12:50.713156','2024-03-26 13:12:50',NULL,'1122332211','2024-03-01 14:12:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(433,20,0,3,1,1,'control_area',15,NULL,'contenziosi',1,3,NULL,'2024-03-26 14:16:22.339213','2024-03-26 14:16:22.350061','2024-03-26 13:16:22',NULL,'888777','2024-03-08 14:15:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(435,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 14:55:13.013007','2024-03-26 14:55:13.028172','2024-03-26 13:55:13',NULL,'1','2024-03-01 14:54:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(436,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 15:15:05.705084','2024-03-26 15:15:05.717223','2024-03-26 14:15:05',NULL,'10','2024-03-10 15:14:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(437,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 18:03:13.854314','2024-03-26 18:03:13.862605','2024-03-26 17:03:13',NULL,NULL,NULL,NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(440,20,0,3,1,1,'control_area',16,NULL,'contenziosi',1,3,NULL,'2024-03-26 21:00:41.966970','2024-03-26 21:00:41.976069','2024-03-26 20:00:41',NULL,'11221','2024-03-11 21:00:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(441,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 21:41:24.405946','2024-03-26 21:41:24.416291','2024-03-26 20:41:24',NULL,'112233','2024-03-25 21:40:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(442,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-26 23:45:13.291807','2024-03-26 23:45:13.301677','2024-03-26 22:45:13',NULL,'3','2024-03-03 23:44:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(443,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 00:07:39.563199','2024-03-27 00:07:39.573780','2024-03-26 23:07:39',NULL,'4','2024-03-04 00:07:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(444,20,0,3,1,1,'control_area',17,NULL,'contenziosi',1,3,NULL,'2024-03-27 09:43:21.236515','2024-03-27 09:43:21.253624','2024-03-27 08:43:21',NULL,'1234567890','2024-03-01 09:42:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(445,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 12:10:30.186428','2024-03-27 12:10:30.197718','2024-03-27 11:10:30',NULL,'2','2024-03-02 12:10:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(446,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 12:12:14.158259','2024-03-27 12:12:14.168074','2024-03-27 11:12:14',NULL,'3','2024-03-03 12:11:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(447,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 12:13:41.206691','2024-03-27 12:13:41.216609','2024-03-27 11:13:41',NULL,'4','2024-03-04 12:13:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(448,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 12:17:51.635322','2024-03-27 12:17:51.646324','2024-03-27 11:17:51',NULL,'5','2024-03-05 12:17:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(449,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 12:19:48.118452','2024-03-27 12:19:48.129957','2024-03-27 11:19:48',NULL,'6','2024-03-06 12:19:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(450,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 14:35:18.485995','2024-03-27 14:35:18.497431','2024-03-27 13:35:18',NULL,'1','2024-03-01 14:34:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'README.md','No');
INSERT INTO base_data VALUES(451,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 14:43:50.249920','2024-03-27 14:43:50.281722','2024-03-27 13:43:50',NULL,'7','2024-03-07 14:43:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Recalculare_chirie_nov_2023.pdf','No');
INSERT INTO base_data VALUES(452,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 14:47:20.081622','2024-03-27 14:47:20.091507','2024-03-27 13:47:20',NULL,'8','2024-03-08 14:46:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(453,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 14:49:48.876884','2024-03-27 14:49:48.886832','2024-03-27 13:49:48',NULL,'9','2024-03-09 14:49:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Recalculare_chirie_nov_2023.pdf','No');
INSERT INTO base_data VALUES(454,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 14:57:01.293253','2024-03-27 14:57:01.303865','2024-03-27 13:57:01',NULL,'1','2024-03-01 14:56:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'PASTA_e_CECI_CREMOSA_e_saporita_ricetta_primo_piatto_veloce.pdf','No');
INSERT INTO base_data VALUES(455,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 15:00:35.038174','2024-03-27 15:00:35.052229','2024-03-27 14:00:35',NULL,'4','2024-03-04 15:00:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'RDLSRD61P24Z129S.xml','No');
INSERT INTO base_data VALUES(456,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 15:44:43.961473','2024-03-27 15:44:43.973077','2024-03-27 14:44:43',NULL,'10','2024-03-10 15:43:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ARERA_1.pdf','No');
INSERT INTO base_data VALUES(457,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 16:05:49.955274','2024-03-27 16:05:49.966868','2024-03-27 15:05:49',NULL,'11','2024-03-11 16:05:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(458,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 16:42:13.524445','2024-03-27 16:42:13.535700','2024-03-27 15:42:13',NULL,'11','2024-03-11 16:41:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(459,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 16:45:12.072032','2024-03-27 16:45:12.081626','2024-03-27 15:45:12',NULL,'21','2024-03-21 16:44:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(460,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 16:51:29.378791','2024-03-27 16:51:29.391031','2024-03-27 15:51:29',NULL,'1','2024-03-01 16:51:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(461,20,0,3,1,1,'control_area',11,NULL,'contenziosi',1,3,NULL,'2024-03-27 16:57:46.781961','2024-03-27 16:57:46.792765','2024-03-27 15:57:46',NULL,'33','2024-03-03 16:54:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(462,20,0,3,1,1,'control_area',14,NULL,'contingencies',1,4,NULL,'2024-03-28 23:25:34.673539','2024-03-28 23:25:34.686550','2024-03-28 22:25:34',NULL,'786','2024-03-07 23:25:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(463,20,0,3,1,1,'control_area',14,NULL,'iniziative_dso_dso',1,8,NULL,'2024-03-28 23:35:10.203442','2024-03-28 23:35:10.213254','2024-03-28 22:35:10',NULL,'8881','2024-03-08 23:34:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(464,20,0,3,1,1,'control_area',13,NULL,'inziative_as_dso',1,7,NULL,'2024-03-28 23:36:11.780945','2024-03-28 23:36:11.785165','2024-03-28 22:36:11',NULL,'7771','2024-03-07 23:35:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(465,20,0,3,1,1,'control_area',15,NULL,'iniziative_dso_as',1,6,NULL,'2024-03-28 23:37:37.652750','2024-03-28 23:37:37.657116','2024-03-28 22:37:37',NULL,'6661','2024-03-06 23:37:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-03-25_21-26-45.csv','No');
INSERT INTO base_data VALUES(466,20,0,3,1,1,'control_area',11,NULL,'contingencies',1,4,NULL,'2024-03-28 23:38:03.925349','2024-03-28 23:38:22.284292','2024-03-28 22:38:03',NULL,'4441','2024-03-04 23:37:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(467,20,0,3,1,1,'control_area',12,NULL,'atti',1,2,NULL,'2024-03-28 23:47:49.311215','2024-03-28 23:48:09.496030','2024-03-28 22:47:49',NULL,'2221','2024-03-02 23:46:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(468,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-03-30 17:02:13.996691','2024-04-26 14:16:52.186735','2024-03-30 16:02:13','Antonio',NULL,NULL,NULL,NULL,'note 111 222 333',NULL,NULL,NULL,NULL,NULL,2024,1111,222,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(469,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-03-30 17:06:29.142242','2024-03-30 17:06:29.135789','2024-03-30 16:06:29','Antonio',NULL,NULL,NULL,NULL,'211q',NULL,NULL,NULL,NULL,NULL,2024,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(470,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-04-26 14:18:00.897117','2024-04-26 14:18:00.890951','2024-04-26 12:18:00','Antonio',NULL,NULL,NULL,NULL,'asdfasdf',NULL,NULL,NULL,NULL,NULL,2023,34,3434,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(474,20,0,3,2,1,'control_area',14,NULL,'contenziosi',1,3,NULL,'2024-05-13 12:37:50','2024-05-13 14:37:50.981825','2024-05-13 12:37:50',NULL,'777','2024-05-07 14:37:00.000000',NULL,NULL,NULL,'Inserire commento',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Yes');
INSERT INTO base_data VALUES(475,20,0,3,2,1,'control_area',16,NULL,'contenziosi',1,3,NULL,'2024-05-13 12:39:40','2024-05-13 14:39:40.822090','2024-05-13 12:39:40',NULL,'788','2024-05-08 14:39:00.000000',NULL,NULL,NULL,'Inserire commento 788',NULL,NULL,NULL,NULL,2024,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'Contingencies_2024-05-13_14-22-37.csv','No');
INSERT INTO base_data VALUES(482,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-05-14 15:52:52.449690','2024-05-14 15:52:52.441329','2024-05-14 13:52:52','Antonio',NULL,NULL,NULL,NULL,'n112233',NULL,NULL,NULL,NULL,NULL,2024,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(483,20,0,2,2,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-05-14 16:16:24.800723','2024-05-15 00:14:02.199737','2024-05-14 14:16:24','Antonio',NULL,NULL,NULL,NULL,'33note22',NULL,NULL,NULL,NULL,NULL,2025,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(484,20,0,2,2,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-05-14 16:21:56.350201','2024-05-14 16:21:56.344883','2024-05-14 14:21:56','Antonio',NULL,NULL,NULL,NULL,'n3322n',NULL,NULL,NULL,NULL,NULL,2024,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(485,20,0,2,2,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-05-14 16:22:29.328054','2024-05-14 16:22:29.321154','2024-05-14 14:22:29','Antonio',NULL,NULL,NULL,NULL,'nite123322',NULL,NULL,NULL,NULL,NULL,2024,123,322,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(486,20,0,2,2,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-05-14 17:46:32.513967','2024-05-16 13:49:53.324902','2024-05-14 15:46:32','Antonio',NULL,NULL,NULL,NULL,'2345',NULL,NULL,NULL,NULL,NULL,2025,10,-1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(487,20,0,2,1,1,'control_area',NULL,NULL,'struttura offerta',2,9,NULL,'2024-05-14 22:02:47.530683','2024-05-14 22:02:47.524251','2024-05-14 20:02:47','Antonio',NULL,NULL,NULL,NULL,'1n10',NULL,NULL,NULL,NULL,NULL,2025,1,10,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(488,20,0,2,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-05-16 09:20:14.242206','2024-05-16 09:20:14.245978','2024-05-16 07:20:14',NULL,NULL,NULL,NULL,NULL,'1',NULL,NULL,NULL,NULL,NULL,2023,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(489,20,0,2,1,1,'control_area',NULL,NULL,'area contendibilità',2,10,NULL,'2024-05-16 13:06:12.865585','2024-05-16 13:06:12.869050','2024-05-16 11:06:12',NULL,NULL,NULL,NULL,NULL,'n12n',NULL,NULL,NULL,NULL,NULL,2022,1,2,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO base_data VALUES(490,20,0,2,1,1,'control_area',NULL,NULL,'grado contendibilità',2,11,NULL,'2024-05-16 13:06:55.635905','2024-05-16 13:06:55.639364','2024-05-16 11:06:55',NULL,NULL,NULL,NULL,NULL,'n33',NULL,NULL,NULL,NULL,NULL,2024,6,3,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,3,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);
INSERT INTO workflow_base_data VALUES(2,3,NULL,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(5,3,186,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(6,3,NULL,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(8,3,NULL,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(12,1,210,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(14,3,183,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(18,3,210,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(19,3,368,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(20,3,367,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(21,1,368,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(22,1,367,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(23,1,NULL,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(24,1,NULL,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(25,1,NULL,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(26,1,186,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(27,1,183,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(28,3,368,'2024-03-17 00:37:15.905587','2024-03-17 00:37:15.905592',NULL);
INSERT INTO workflow_base_data VALUES(29,13,170,'2024-03-17 01:24:56.370037','2024-03-17 01:24:56.370040',NULL);
INSERT INTO workflow_base_data VALUES(30,13,175,'2024-03-17 01:25:08.163263','2024-03-17 01:25:08.163268',NULL);
INSERT INTO workflow_base_data VALUES(31,1,183,'2024-03-18 09:55:45.066004','2024-03-18 09:55:45.066008',NULL);
INSERT INTO workflow_base_data VALUES(32,1,186,'2024-03-18 09:55:51.573356','2024-03-18 09:55:51.573360',NULL);
INSERT INTO workflow_base_data VALUES(33,1,187,'2024-03-18 10:17:04.532629','2024-03-18 10:17:04.532635',NULL);
INSERT INTO workflow_base_data VALUES(34,1,NULL,'2024-03-18 10:17:18.436464','2024-03-18 10:17:18.436468',NULL);
INSERT INTO workflow_base_data VALUES(35,1,184,'2024-03-18 10:17:24.161442','2024-03-18 10:17:24.161445',NULL);
INSERT INTO step_base_data VALUES(3,210,1,2,2,'2024-03-14 16:13:26','2024-05-31 00:00:00.000000',NULL,NULL,'default_value',0,1,0,'day',1);
INSERT INTO step_base_data VALUES(4,NULL,1,2,2,'2024-03-14 16:13:26','2024-03-27 00:00:00.000000',1,NULL,'default_value',0,1,0,'day',1);
INSERT INTO step_base_data VALUES(5,NULL,1,3,2,'2024-03-14 16:15:12','2024-06-15 00:00:00.000000',1,NULL,'default_value',0,2,0,'day',1);
INSERT INTO step_base_data VALUES(8,183,1,3,2,'2024-03-14 16:36:03',NULL,0,NULL,'default_value',0,0,0,'day',1);
INSERT INTO step_base_data VALUES(9,186,1,3,2,'2024-03-14 16:36:03','2024-04-30 00:00:00.000000',0,NULL,'default_value',0,1,0,'hour',1);
INSERT INTO step_base_data VALUES(23,210,3,1,2,'2024-03-14 17:13:20','2024-06-15 00:00:00.000000',1,NULL,'default_value',0,2,0,'day',1);
INSERT INTO step_base_data VALUES(24,NULL,3,1,2,'2024-03-14 17:13:20','2024-06-17 00:00:00.000000',1,NULL,'default_value',0,1,0,'week',1);
INSERT INTO step_base_data VALUES(25,368,1,5,2,'2024-03-15 15:41:42',NULL,0,NULL,'default_value',0,0,0,'...',1);
INSERT INTO step_base_data VALUES(26,175,1,5,2,'2024-03-15 15:41:42',NULL,0,NULL,'default_value',0,0,0,'...',1);
INSERT INTO step_base_data VALUES(27,NULL,1,1,2,'2024-03-15 15:46:46','2024-03-21 00:00:00.000000',1,NULL,'default_value',0,1,0,'day',1);
INSERT INTO step_base_data VALUES(28,187,1,1,2,'2024-03-15 15:46:46','2024-04-05 00:00:00.000000',1,NULL,'default_value',0,1,0,'day',1);
INSERT INTO step_base_data VALUES(45,410,1,2,2,'2024-03-22 10:26:35',NULL,0,NULL,'default_value',0,0,0,'...',1);
INSERT INTO step_base_data VALUES(46,417,1,1,2,'2024-03-23 20:47:54','2024-03-11 21:47:00.000000',1,NULL,NULL,NULL,NULL,NULL,NULL,1);
INSERT INTO step_base_data VALUES(48,418,3,8,2,'2024-03-23 21:08:31','2024-03-25 22:07:00.000000',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(50,419,'N/A',2,2,'2024-03-23 21:20:05','2024-04-02 22:19:00.000000',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(52,420,3,3,2,'2024-03-23 21:22:56','2024-04-03 22:22:00.000000',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(54,211,4,4,2,'2024-03-23 21:27:59','2024-04-04 22:27:00.000000',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(56,421,5,5,2,'2024-03-23 21:40:11','2024-04-05 22:40:00.000000',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(58,422,4,4,2,'2024-03-23 22:26:15','2024-03-28 23:26:00.000000',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(60,423,'N/A',1,2,'2024-03-23 22:57:12','2024-05-08 23:56:00.000000',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(64,424,'N/A',1,3,'2024-03-23 23:51:22','2024-05-11 00:51:00.000000',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
INSERT INTO step_base_data VALUES(66,425,'N/A',1,3,'2024-03-24 00:01:33','2024-04-22 01:01:00.000000',1,NULL,NULL,0,0,0,NULL,1);
INSERT INTO step_base_data VALUES(68,NULL,8,1,2,'2024-03-25 22:43:17','2024-03-12 23:42:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(69,427,1,1,1,'2024-03-26 10:41:12','2024-03-31 11:40:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(71,428,1,1,1,'2024-03-26 10:52:17','2024-03-29 11:52:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(73,429,3,2,2,'2024-03-26 11:42:02','2024-04-03 12:41:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(75,NULL,4,1,1,'2024-03-26 12:10:45','2024-03-30 13:10:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(77,431,4,3,3,'2024-03-26 12:14:05','2024-03-07 13:13:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(79,432,5,5,4,'2024-03-26 13:12:50','2024-03-05 14:12:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(81,433,1,1,3,'2024-03-26 13:16:22','2024-03-27 14:16:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(83,NULL,7,7,2,'2024-03-26 13:19:40','2024-03-27 14:19:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(84,435,1,1,1,'2024-03-26 13:55:13','2024-04-01 14:55:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(86,436,1,1,1,'2024-03-26 14:15:05','2024-03-27 15:14:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(87,440,7,1,1,'2024-03-26 20:00:41','2024-03-27 21:00:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(89,441,1,2,4,'2024-03-26 20:41:24','2024-03-27 21:41:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(90,442,3,3,3,'2024-03-26 22:45:13','2024-04-03 23:45:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(92,443,4,4,4,'2024-03-26 23:07:39','2024-04-04 00:07:00.000000',0,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(94,444,1,2,3,'2024-03-27 08:43:21','2024-04-04 09:43:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(95,445,4,3,2,'2024-03-27 11:10:30','2024-04-03 12:10:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(96,446,3,3,3,'2024-03-27 11:12:14','2024-04-04 12:12:00.000000',0,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(97,447,4,4,4,'2024-03-27 11:13:41','2024-04-04 12:13:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(98,448,5,5,5,'2024-03-27 11:17:51','2024-03-05 12:17:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(99,449,4,3,6,'2024-03-27 11:19:48','2024-04-06 12:19:00.000000',0,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(100,450,6,6,6,'2024-03-27 13:35:18','2024-04-06 14:35:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(101,451,7,7,7,'2024-03-27 13:43:50','2024-04-06 14:43:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(102,452,8,8,8,'2024-03-27 13:47:20','2024-04-06 14:47:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(103,453,9,9,9,'2024-03-27 13:49:48','2024-04-06 14:49:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(104,454,1,2,3,'2024-03-27 13:57:01','2024-04-04 14:56:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(105,455,4,4,4,'2024-03-27 14:00:35','2024-04-04 15:00:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(106,456,10,10,10,'2024-03-27 14:44:43','2024-04-03 15:44:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(107,457,11,1,1,'2024-03-27 15:05:49','2024-04-01 16:05:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(108,458,11,1,1,'2024-03-27 15:42:13','2024-04-03 16:41:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(109,459,1,2,3,'2024-03-27 15:45:12','2024-04-03 16:45:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(110,460,1,1,1,'2024-03-27 15:51:29','2024-04-01 16:51:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(111,461,3,1,3,'2024-03-27 15:57:46','2024-04-03 16:57:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(112,462,7,5,6,'2024-03-28 22:25:34','2024-04-06 23:25:00.000000',0,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(113,463,8,1,1,'2024-03-28 22:35:10','2024-04-06 23:35:00.000000',0,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(114,464,7,1,1,'2024-03-28 22:36:11','2024-03-07 23:36:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(115,465,6,1,2,'2024-03-28 22:37:37','2024-04-06 23:37:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(116,466,4,1,3,'2024-03-28 22:38:22','2024-04-04 23:38:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(117,467,3,2,2,'2024-03-28 22:48:09','2024-04-02 23:48:00.000000',1,NULL,NULL,0,0,0,'day',1);
INSERT INTO step_base_data VALUES(118,475,1,1,2,'2024-05-13 12:39:40','2024-05-31 14:39:00.000000',1,NULL,NULL,0,0,0,'day',1);

INSERT INTO question VALUES(29,'S11-A41',replace('Piani di sviluppo dell’infrastrutture di rete\n','\n',char(10)),'TLT,  NI(0-10),  FILE,  TLT','1200, 100, 700, 1150','"[{\"type\": \"TLT\", \"value\": \"\", \"width\": 1200}, {\"type\": \"NI(0-10)\", \"value\": \"\", \"width\": 100}, {\"type\": \"FILE\", \"value\": \"\", \"width\": 700}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 1150}]"');

INSERT INTO question VALUES(37,'S11-A413',replace('Struttura – coerenza finalistica del piano\n','\n',char(10)),'TLT,  NI(0-10),  FILE,  TLT','1200, 100, 700, 1150','"[{\"type\": \"TLT\", \"value\": \"\", \"width\": 1200}, {\"type\": \"NI(0-10)\", \"value\": \"\", \"width\": 100}, {\"type\": \"FILE\", \"value\": \"\", \"width\": 700}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 1150}]"');

INSERT INTO question VALUES(41,'S11-A42',replace('Gestione dei contratti di approvvigionamento di beni e servizi\n','\n',char(10)),'TLT,  NI(0-10),  FILE,  TLT','1200, 100, 700, 1150','"[{\"type\": \"TLT\", \"value\": \"\", \"width\": 1200}, {\"type\": \"NI(0-10)\", \"value\": \"\", \"width\": 100}, {\"type\": \"FILE\", \"value\": \"\", \"width\": 700}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 1150}]"');
INSERT INTO question VALUES(42,'S11-A421',replace('Il Gestore indipendente:\na) negozia effettivamente (in modo documentabile) e preventivamente servizi e condizioni con le controparti di gruppo;\nb) utilizza tool di benchmarking idonei a certificare la coerenza tra condizioni negoziate e parametri economici posti dall’articolo 14, comma 1.4 del TIUF (contratti attivi e passivi);\nc) integra i tool sub b) con strumenti additivi attraverso i quali escludere l’esistenza di forme di sussidiazione a carico della tariffa regolata;\nd) non usa per il pricing dei contratti i parametri posti dal TIUC per la valorizzazione delle partite nell’ambito della contabilità regolatoria;\ne) non inserisce nei contratti previsioni di outosourcing di gruppo che possono comportare violazione del principio dell’autonomia organizzativa del DSO\n','\n',char(10)),'TLT,  NI(0-10),  FILE,  TLT','1200, 100, 700, 1150','"[{\"type\": \"TLT\", \"value\": \"\", \"width\": 1200}, {\"type\": \"NI(0-10)\", \"value\": \"\", \"width\": 100}, {\"type\": \"FILE\", \"value\": \"\", \"width\": 700}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 1150}]"');
INSERT INTO question VALUES(43,'S11-A422',replace('Solo punti a) e b)\n','\n',char(10)),'TLT,  NI(0-10),  FILE,  TLT','1200, 100, 700, 1150','"[{\"type\": \"TLT\", \"value\": \"\", \"width\": 1200}, {\"type\": \"NI(0-10)\", \"value\": \"\", \"width\": 100}, {\"type\": \"FILE\", \"value\": \"\", \"width\": 700}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 1150}]"');
INSERT INTO question VALUES(44,'S11-A423',replace('Nessuno dei punti\n','\n',char(10)),'TLT,  NI(0-10),  FILE,  TLT','1200, 100, 700, 1150','"[{\"type\": \"TLT\", \"value\": \"\", \"width\": 1200}, {\"type\": \"NI(0-10)\", \"value\": \"\", \"width\": 100}, {\"type\": \"FILE\", \"value\": \"\", \"width\": 700}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 1150}]"');

INSERT INTO question VALUES(55,'Q2CCLR-A4.2','La compliance formale non ha alcun impatto automatico sulla esclusione del rischio. Unica modalità possibile è un protocollo di verifica in continuo della coerenza delle transazioni con i parametri economici >>> solo un protocollo asseverato da ARERA che dia esiti di coerenza può escludere il rischio','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(56,'Q2CCLR-B1','Impatto non valutabile senza controllo sulla gestione del servizio – bassa compliance accresce i livelli di rischio potenziale','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(57,'Q2CCLR-B2','Impatto non valutabile senza controllo sulla gestione del servizio – bassa compliance accresce i livelli di rischio potenziale.','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(58,'Q2CCLR-B3','Impatto non valutabile senza controllo sulla gestione del servizio – la mancata attuazione incrementa significativamente i livelli di rischio potenziale','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(59,'Q2CCLR-C','L’attuazione del vincolo con stretto riferimento al controllo sulla applicazione delle disposizioni in materia di separazione funzionale non produce un impatto mitigativo del rischio; per un risultato oggettivo è necessaria l’attivazione di un protocollo operativo che garantisca i necessari livelli di verifica in continuo sugli output, sulla gestione operativa','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(60,'Q2CCLR-D1','Impatto non valutabile senza controllo sulla gestione del servizio – la mancata attuazione incrementa significativamente i livelli di rischio potenziale','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(61,'Q2CCLR-D2','Impatto non valutabile senza controllo sulla gestione del servizio – la mancata attuazione incrementa significativamente i livelli di rischio potenziale','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(62,'Q2CCLR-D3','Impatto non valutabile senza controllo sulla gestione del servizio','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(63,'Q2CCLR-D4','Impatto non valutabile senza controllo sulla gestione del servizio – la mancata attuazione incrementa significativamente i livelli di rischio potenziale','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(64,'Q2CCLR-E','Impatto non valutabile senza controllo sulla gestione del servizio','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(65,'Q2CCLR-F','Impatto non valutabile senza controllo sulla gestione del servizio','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(53,'Q2CCLR-A1-A3','Impatto non valutabile senza controllo sulla gestione del servizio – bassa compliance accresce i livelli di rischio potenziale','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');
INSERT INTO question VALUES(54,'Q2CCLR-A4.1','Impatto della pianificazione non valutabile senza controllo effettivo su procedura e contenuti della decisione','CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT','40, 40, 40, 200, 150, 100, 250, 250, 250','"[{\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"CB\", \"value\": \"\", \"width\": 40}, {\"type\": \"TST\", \"value\": \"\", \"width\": 200}, {\"type\": \"NUM\", \"value\": \"\", \"width\": 150}, {\"type\": \"HML\", \"value\": \"\", \"width\": 100}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}, {\"type\": \"TLT\", \"value\": \"\", \"width\": 250}]"');

INSERT INTO questionnaire_questions VALUES(20,5,29,NULL);
INSERT INTO questionnaire_questions VALUES(21,5,30,NULL);
INSERT INTO questionnaire_questions VALUES(22,5,31,NULL);
INSERT INTO questionnaire_questions VALUES(23,5,32,NULL);
INSERT INTO questionnaire_questions VALUES(24,5,33,NULL);
INSERT INTO questionnaire_questions VALUES(25,5,35,NULL);
INSERT INTO questionnaire_questions VALUES(26,5,34,NULL);
INSERT INTO questionnaire_questions VALUES(27,5,37,NULL);
INSERT INTO questionnaire_questions VALUES(28,5,39,NULL);
INSERT INTO questionnaire_questions VALUES(29,5,40,NULL);
INSERT INTO questionnaire_questions VALUES(30,5,42,NULL);
INSERT INTO questionnaire_questions VALUES(31,5,43,NULL);
INSERT INTO questionnaire_questions VALUES(32,5,44,NULL);
INSERT INTO questionnaire_questions VALUES(33,5,41,NULL);
INSERT INTO questionnaire_questions VALUES(34,5,38,NULL);
INSERT INTO questionnaire_questions VALUES(35,5,36,NULL);
INSERT INTO questionnaire_questions VALUES(36,1,45,NULL);
INSERT INTO questionnaire_questions VALUES(37,1,46,NULL);
INSERT INTO questionnaire_questions VALUES(38,1,47,NULL);
INSERT INTO questionnaire_questions VALUES(39,1,48,NULL);
INSERT INTO questionnaire_questions VALUES(40,1,49,NULL);
INSERT INTO questionnaire_questions VALUES(41,1,50,NULL);
INSERT INTO questionnaire_questions VALUES(42,1,51,NULL);
INSERT INTO questionnaire_questions VALUES(43,1,52,NULL);
INSERT INTO questionnaire_questions VALUES(44,6,53,NULL);
INSERT INTO questionnaire_questions VALUES(45,6,54,NULL);
INSERT INTO questionnaire_questions VALUES(46,6,55,NULL);
INSERT INTO questionnaire_questions VALUES(47,6,56,NULL);
INSERT INTO questionnaire_questions VALUES(48,6,57,NULL);
INSERT INTO questionnaire_questions VALUES(49,6,58,NULL);
INSERT INTO questionnaire_questions VALUES(50,6,59,NULL);
INSERT INTO questionnaire_questions VALUES(51,6,61,NULL);
INSERT INTO questionnaire_questions VALUES(52,6,62,NULL);
INSERT INTO questionnaire_questions VALUES(53,6,63,NULL);
INSERT INTO questionnaire_questions VALUES(54,6,64,NULL);
INSERT INTO questionnaire_questions VALUES(55,6,65,NULL);
INSERT INTO questionnaire_questions VALUES(56,6,60,NULL);

INSERT INTO answer VALUES(49,0,20,1,45,'2024-04-25 12:37:23',0,'[{"type": "BYN", "value": "Yes", "width": ""}]');
INSERT INTO answer VALUES(50,0,20,1,46,'2024-04-25 11:26:04',0,'[{"type": "TST", "value": "a1-2", "width": ""}]');
INSERT INTO answer VALUES(51,0,20,1,47,'2024-04-25 11:26:04',0,'[{"type": "BYN", "value": "Yes", "width": ""}]');
INSERT INTO answer VALUES(52,0,20,1,48,'2024-04-25 11:26:04',0,'[{"type": "BYN", "value": "No", "width": ""}]');
INSERT INTO answer VALUES(53,0,20,1,49,'2024-04-25 11:26:04',0,'[{"type": "BYN", "value": "Yes", "width": ""}]');
INSERT INTO answer VALUES(54,0,20,1,50,'2024-04-25 11:26:04',0,'[{"type": "FILE", "value": "", "width": ""}]');
INSERT INTO answer VALUES(55,0,20,1,51,'2024-04-25 11:26:04',0,'[{"type": "TLT", "value": "a1-7", "width": ""}]');
INSERT INTO answer VALUES(56,0,20,1,52,'2024-04-25 11:26:04',0,'[{"type": "DD", "value": "2024-04-25", "width": ""}]');
INSERT INTO answer VALUES(57,0,20,5,17,'2024-04-25 15:32:24',0,'[{"type": "TLT", "value": "a11", "width": ""}, {"type": "NI(0-10)", "value": "7", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "c11", "width": ""}]');
INSERT INTO answer VALUES(58,0,20,5,18,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(59,0,20,5,19,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(60,0,20,5,20,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(61,0,20,5,21,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(62,0,20,5,22,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(63,0,20,5,23,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(64,0,20,5,24,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(65,0,20,5,25,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(66,0,20,5,26,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(67,0,20,5,28,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(68,0,20,5,29,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(69,0,20,5,30,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(70,0,20,5,31,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(71,0,20,5,32,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(72,0,20,5,33,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(73,0,20,5,34,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(74,0,20,5,35,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(75,0,20,5,36,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(76,0,20,5,37,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(77,0,20,5,38,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(78,0,20,5,39,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(79,0,20,5,40,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(80,0,20,5,41,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(81,0,20,5,42,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(82,0,20,5,43,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "", "width": ""}, {"type": "NI(0-10)", "value": "0", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(83,0,20,5,44,'2024-04-25 11:31:14',0,'[{"type": "TLT", "value": "a423", "width": ""}, {"type": "NI(0-10)", "value": "10", "width": ""}, {"type": "FILE", "value": "", "width": ""}, {"type": "TLT", "value": "c423", "width": ""}]');
INSERT INTO answer VALUES(84,0,20,6,53,'2024-04-25 15:33:56',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "TST", "value": "a2", "width": ""}, {"type": "NUM", "value": "12345.76", "width": ""}, {"type": "HML", "value": "M", "width": ""}, {"type": "TLT", "value": "c11", "width": ""}, {"type": "TLT", "value": "c2", "width": ""}, {"type": "TLT", "value": "c3", "width": ""}]');
INSERT INTO answer VALUES(85,0,20,6,54,'2024-04-26 12:04:12',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "a4", "width": ""}, {"type": "NUM", "value": "1230239023", "width": ""}, {"type": "HML", "value": "L", "width": ""}, {"type": "TLT", "value": "c21", "width": ""}, {"type": "TLT", "value": "c222", "width": ""}, {"type": "TLT", "value": "c23", "width": ""}]');
INSERT INTO answer VALUES(86,0,20,6,55,'2024-04-26 15:07:30',0,'[{"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "fg", "width": ""}, {"type": "TLT", "value": "ugh", "width": ""}, {"type": "TLT", "value": "yet", "width": ""}]');
INSERT INTO answer VALUES(87,0,20,6,56,'2024-04-26 15:07:30',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(88,0,20,6,57,'2024-04-26 15:07:30',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(89,0,20,6,58,'2024-04-26 15:07:30',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(90,0,20,6,59,'2024-04-26 15:07:30',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(91,0,20,6,60,'2024-04-26 15:09:10',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(92,0,20,6,61,'2024-04-26 15:09:10',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(93,0,20,6,62,'2024-04-26 15:09:10',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(94,0,20,6,63,'2024-04-26 15:09:10',0,'[{"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(95,0,20,6,64,'2024-04-26 15:09:10',0,'[{"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "on", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');
INSERT INTO answer VALUES(96,0,20,6,65,'2024-04-26 15:07:30',0,'[{"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "CB", "value": "", "width": ""}, {"type": "TST", "value": "", "width": ""}, {"type": "NUM", "value": "", "width": ""}, {"type": "HML", "value": "H", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}, {"type": "TLT", "value": "", "width": ""}]');

INSERT INTO company_users VALUES(2,6,18,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(4,8,18,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(5,9,18,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(6,10,18,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(7,11,18,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(8,4,3,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(9,12,21,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(10,2,6,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(11,5,5,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(12,5,3,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(13,12,18,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(14,5,4,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(15,10,23,'2023-12-24 00:00:00.000000',NULL,NULL);
INSERT INTO company_users VALUES(16,8,26,'2024-01-23','2024-01-23',NULL);
INSERT INTO company_users VALUES(17,5,25,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(18,8,26,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(19,8,27,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(20,8,28,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(21,8,29,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(22,9,30,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(24,7,32,'2024-01-25','2024-01-25',NULL);
INSERT INTO company_users VALUES(25,8,31,'2024-01-28','2024-01-28',NULL);
INSERT INTO company_users VALUES(26,0,4,'2024-02-04','2024-02-04',NULL);
INSERT INTO company_users VALUES(27,0,20,'2024-02-04','2024-02-04',NULL);
INSERT INTO company_users VALUES(28,7,33,'2024-03-01','2024-03-01',NULL);


13mai2024


# TODO extend XEditWidgets ad altre parti del programma
class Tabella21_dataView(ModelView):
    create_template = 'admin/area_2/create_base_data21.html'
    subarea_id = 9  # Define subarea_id as a class attribute
    area_id = 2

    # Specify the fields to be edited inline using XEditableWidget
    column_editable_list = ['fi0', 'interval_ord', 'fi1', 'fi2', 'fc1']

    # Customize the widget for inline editing
    form_widget_args = {
        'fi0': {'widget': XEditableWidget()},
        'interval_ord': {'widget': XEditableWidget()},
        'fi1': {'widget': XEditableWidget()},
        'fi2': {'widget': XEditableWidget()},
        'fc1': {'widget': XEditableWidget()},
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # self.class_name = self.__class__.__name__  # Store the class name
        self.subarea_id = Tabella21_dataView.subarea_id  # Initialize subarea_id in __init__
        self.area_id = Tabella21_dataView.area_id  # Initialize area_id in __init__
        self.subarea_name = get_subarea_name(area_id=self.area_id, subarea_id=self.subarea_id)
        try:
            self.year = int(extract_year_from_fy(get_current_interval(1)))
        except:
            self.year = datetime.now().year

    column_list = ('fi0', 'interval_ord', 'fi1', 'fi2', 'fc1')
    form_columns = ('fi0', 'interval_ord', 'fi1', 'fi2', 'fc1')  # Specify form columns with dropdowns

    column_labels = {'interval_ord': 'Periodo', 'fi0': 'Anno',
                     'fi1': 'UDD', 'fi2': 'PdR',
                     'fc1': 'Note'}
    column_descriptions = {'interval_ord': '(inserire il numero - es. 1 - primo quadrimestre; 2 - secondo ecc.)',
                           'fi0': 'Inserire anno (es. 2024)',
                    'fi1': 'Numero UDD', 'fi2': 'Numero PdR',
                    'fc1': 'Note (opzionale)'}

    # Customize inlist for the View class
    column_default_sort = ('fi0', True)
    column_searchable_list = ('fi0', 'interval_ord', 'fi1', 'fi2', 'fc1')  # Adjust based on your model structure
    column_filters = ('fi0', 'interval_ord', 'fi1', 'fi2', 'fc1')  # Adjust based on your model structure

    # Specify fields to be excluded from the form
    #form_excluded_columns = ('user_id', 'company_id', 'status_id', 'created_by', 'created_on', 'updated_on')

    def scaffold_form(self):
        form_class = super(Tabella21_dataView, self).scaffold_form()

        # Use the custom form class instead of the default form class
        # Define a custom form class with the desired date format
        '''class CustomForm(form_class):
            date_of_doc = DateField('Document date', format='%d-%m-%Y')

        # Use the custom form class instead of the default form class
        form_class = CustomForm'''

        # form_class.fi0 = MyIntegerField('Anno', validators=[InputRequired()])
        # Get the current year
        current_year = datetime.now().year
        year_choices = [(str(year), str(year)) for year in range(current_year - 5, current_year + 2)]
        default_year = str(current_year)
        form_class.fi0 = SelectField(
            'Anno di rif.',
            coerce=int,
            choices=year_choices,
            default=default_year
        )

        # NEW
        config_values = get_config_values(config_type='area_interval', company_id=None, area_id=self.area_id,
                                          subarea_id=None)
        nr_intervals = config_values[0]

        # OLD
        # nr_intervals = get_subarea_interval_type(self.area_id, self.subarea_id)

        current_interval = [t[2] for t in intervals if
                            t[0] == nr_intervals]  # int(get_current_interval(3))  # quadriester
        first_element = current_interval[0] if current_interval else None
        interval_choices = [(str(interv), str(interv)) for interv in range(1, nr_intervals + 1)]

        form_class.interval_ord = SelectField(
            'Periodo di rif.',
            coerce=int,
            choices=interval_choices,  # Example choices, replace with your logic
            default=first_element
        )

        return form_class

    # Use the custom loader with 'Servizi' as a filter criteria
    filter_criteria = None
    form_ajax_refs = {
        'name': CustomSubjectAjaxLoader(
            name='Interval',
            session=db.session,
            model=Interval,
            fields=['name'],
            filter_criteria=filter_criteria,
        ),
    }

    def create_model(self, form):
        model = super(Tabella21_dataView, self).create_model(form)
        if current_user.is_authenticated:
            try:
                model.user_id = current_user.id  # Set the user_id
                model.company_id = current_user.company_id  # Set the company_id
                model.data_type = self.subarea_name
                created_by = current_user.username  # Set the created_by
                user_id = current_user.id
                model.user_id = user_id
                try:
                    company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
                except:
                    company_id = None
                    pass
                model.company_id = company_id  # Set the company_id
                model.created_by = created_by  # Set the cr by
                model.created_on = datetime.now()  # Set the created_on
            except AttributeError:
                pass
            return model
        else:
            # Handle the case where the user is not authenticated
            raise ValidationError('User not authenticated.')

    def get_query(self):
        #query = super(Tabella21_dataView, self).get_query().filter_by(data_type=self.subarea_name)
        query = self.session.query(self.model).filter_by(area_id=self.area_id, subarea_id=self.subarea_id)

        if current_user.is_authenticated:
            if current_user.has_role('Admin') or current_user.has_role('Authority'):
                return query
            elif current_user.has_role('Manager'):
                # Manager can only see records related to their company_users
                # Assuming you have a relationship named 'user_companies' between User and CompanyUsers models
                subquery = db.session.query(CompanyUsers.company_id).filter(
                    CompanyUsers.user_id == current_user.id
                ).subquery()

                query = query.filter(self.model.company_id.in_(subquery))
            elif current_user.has_role('Employee'):
                # Employee can only see their own records
                query = query.filter(self.model.user_id == current_user.id)
                return query

        # For other roles or anonymous users, return an empty query
        return query.filter(self.model.id < 0)

    def is_accessible(self):
        if current_user.is_authenticated:
            if (current_user.has_role('Admin') or current_user.has_role('Authority')
                    or current_user.has_role('Manager') or current_user.has_role('Employee')):
                # Allow access for Admin, Manager, and Employee
                return True

        return False

    def on_model_change(self, form, model, is_created):
        super().on_model_change(form, model, is_created)
        # Reset form data

        print('dict 0', form.__dict__)

        form.populate_obj(model)  # This resets the form data to its default values

        fi0_value = model.fi0
        interval_ord_value = model.interval_ord
        fi1_value = model.fi1
        fi2_value = model.fi2
        fc1_value = model.fc1

        # Perform actions relevant to both creation and edit:
        user_id = current_user.id  # Get the current user's ID or any other criteria
        try:
            company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
        except:
            company_id = None
            pass
        area_id = self.area_id
        subarea_id = self.subarea_id
        status_id = 1
        config_values = get_config_values(config_type='area_interval', company_id=company_id, area_id=self.area_id,
                                          subarea_id=self.subarea_id)
        interval_id = config_values[0]

        subject_id = None
        lexic_id = None
        legal_document_id = None
        record_type = 'control_area'
        data_type = self.subarea_name

        # Get the name of the edited field
        edited_field_name = next(iter(form._fields))

        # Validate only the edited field
        edited_field = getattr(form, edited_field_name)

        print('dict 10 field name and data; fi0', edited_field_name, edited_field, fi0_value)
        if fi0_value < 2000 or fi0_value > self.year or fi0_value > 2099:
            print('year?', fi0_value)
            raise ValidationError("Please check the year")

        if edited_field.data is None:
            raise ValidationError(f"{edited_field.label.text} field cannot be null")

        if edited_field_name == 'interval_ord':
            if edited_field.data > 52 or edited_field.data < 0:
                raise ValidationError(
                    "Period must be less than or equal to the number of fractions (e.g. 4 for quarters, 12 for months)")
            else:
                interval_ord_value = edited_field.data

        if edited_field_name == 'fi0':
            if edited_field.data < 2000 or edited_field.data > year or edited_field.data > 2099:
                print('Please check the year entered')
                raise ValidationError("Please check the year")
            else:
                fi0_value = edited_field.data

        if edited_field_name == 'fi1':
            if edited_field.data < 0:
                raise ValidationError("Please enter valid values.")
            else:
                fi1_value = edited_field.data
            pass

        if edited_field_name == 'fi2':
            if edited_field.data < 0:
                raise ValidationError("Please enter valid values.")
            else:
                fi2_value = edited_field.data
            pass

        if edited_field_name == 'fc1':
            fc1_value = edited_field.data
            pass

        if edited_field_name == 'fi1' or edited_field_name == 'fi2':
            # Check if fi1 and fi2 values are provided even though interval_ord is edited
            if fi1_value is not None and fi2_value is not None:
                # Perform validation or logic specific to fi1 and fi2
                if fi1_value + fi2_value == 0:
                    raise ValidationError("Please enter non-zero values for the fields.")
                # ... other logic based on fi1 and fi2 ...
        else:
            # User might be editing a different field (e.g., fi0)
            # You might not need to do anything specific here
            pass

        model.user_id = user_id
        model.data_type = data_type
        model.record_type = record_type
        model.area_id = area_id
        model.subarea_id = subarea_id
        model.interval_id = interval_id
        model.status_id = status_id

        model.legal_document_id = legal_document_id
        model.subject_id = subject_id
        model.interval_ord = interval_ord_value
        model.fi0 = fi0_value
        model.fi1 = fi1_value
        model.fi2 = fi2_value
        model.updated_on = datetime.now()  # Set the created_on
        model.company_id = company_id
        model.fc1 = fc1_value

        if is_created:
            self.session.add(model)
        else:
            self.session.merge(model)
        self.session.commit()

        return model




15Apr18h00m

APP

CBH, CBH, CBH, TSTH, NUMH, HMLH, TLTH, TLTH, TLTH
CB, CB, CB, TST, NUM, HML, TLT, TLT, TLT

[{"type": "CB", "value": "on"}, {"type": "CB", "value": ""}, {"type": "CB", "value": "on"}, {"type": "TST", "value": "text"}, {"type": "NUM", "value": "1234567.76"}, {"type": "HML", "value": "M"}, {"type": "TLT", "value": "a"}, {"type": "TLT", "value": "c"}, {"type": "TLT", "value": "e"}]

# Question table has priority (?) - not sure it's ok:
# ==========================



def merge_answer_fields102(base_fields_json, answer_data_json):
    print('MERGE')
    try:
        base_fields = json.loads(base_fields_json)
        answer_data = json.loads(answer_data_json)
    except json.JSONDecodeError as e:
        raise ValueError(f"Parsing error: {str(e)}")

    # Create a lookup dictionary from the base fields to easily find and fill missing types
    base_lookup = {item['type']: item for item in base_fields}

    # Use answer data as the primary source and update missing fields from the base fields if necessary
    merged_fields = []
    seen_types = set()  # Track types we've added to avoid duplicates

    # First add all fields from the answer data, updating them with values from the base fields if needed
    for answer in answer_data:
        type = answer['type']
        seen_types.add(type)
        # If the type exists in the base fields and it's missing in the answer data, use the base field's default
        if type in base_lookup and 'value' not in answer:
            answer['value'] = base_lookup[type]['value']
        merged_fields.append(answer)

    # Now add any additional types from the base fields that weren't in the answer data
    for type, field in base_lookup.items():
        if type not in seen_types:
            # Append the base field as is, because it wasn't in the answer data
            merged_fields.append(field)

    return json.dumps(merged_fields)  # Return as JSON string if needed for consistency



def update_question_answer_fields102():
    # Fetch all questions from the database
    all_questions = Question.query.all()

    for question in all_questions:
        # Split and trim the answer types from the question's answer_type field
        answer_types = question.answer_type.split(',')
        answer_types = [atype.strip() for atype in answer_types]

        # Create the answer_fields list with dictionaries for each type
        answer_fields = [{
            "type": atype,
            "value": ""  # Initialize value as empty; customize if needed
        } for atype in answer_types]

        # Directly convert the answer_fields list to a JSON string
        # This JSON string now only includes the necessary answer_fields without redundant question data
        question.answer_fields = json.dumps(answer_fields, ensure_ascii=False)

    # Commit changes to the database to save the updated answer_fields
    db.session.commit()




def build_answer_fields(question):
    # Parse the multiple answer types and strip any extra spaces
    answer_types = question.answer_type.split(',')
    answer_types = [type.strip() for type in answer_types]

    # Create the answer fields list with dictionaries for each answer type
    answer_fields = [{
        "type": answer_type,
        "value": ""  # Initialize value as empty, customize if needed
    } for answer_type in answer_types]

    # Create the complete dictionary to be converted into JSON
    question_dict = {
        "id": question.id,
        "question_id": question.question_id,
        "text": question.text,
        "answer_type": question.answer_type,
        'answer_fields': answer_fields,
    }

    # Convert the dictionary to a JSON string
    json_string = json.dumps([question_dict], ensure_ascii=False)  # List containing one dictionary
    return json_string



def serialize_answers102(form_data):
    print('form data is', form_data)
    answers = {}
    for key in form_data.keys():
        # Only consider keys ending in "_CB" for checkboxes, since they may have duplicate keys
        if key.endswith('_CB'):
            value = 'on' if 'on' in form_data.getlist(key) else ''
            key_parts = key.split('_')
            if len(key_parts) >= 3:
                question_id = key_parts[0]
                answer_index = key_parts[1]
                answer_type = key_parts[2]
                if question_id not in answers:
                    answers[question_id] = []
                answers[question_id].append({'type': answer_type, 'value': value})
                print('CB key and value', key, value)
        else:
            value = form_data.get(key)
            key_parts = key.split('_')
            if len(key_parts) >= 3:
                question_id = key_parts[0]
                answer_index = key_parts[1]
                answer_type = key_parts[2]
                if question_id not in answers:
                    answers[question_id] = []
                answers[question_id].append({'type': answer_type, 'value': value})
            else:
                # Handle the case where there are not enough parts after splitting
                pass
    return answers



def serialize_answers224(form_data):
    print('form data is', form_data)
    answers = {}
    for key, value in form_data.items():
        key_parts = key.split('_')
        if len(key_parts) >= 3:
            question_id = key_parts[0]
            answer_index = key_parts[1]
            answer_type = key_parts[2]
            if question_id not in answers:
                answers[question_id] = []
            # Check for missing value (unchecked) or checked value
            if answer_type == 'CB':
                print('CB key and value', key, value)
                if value:  # Checkbox is checked (value will be 'on' or the hidden input value)
                    answers[question_id].append({'type': answer_type, 'value': 'on'})  # Use 'CHECKED' for checked state
                else:
                    answers[question_id].append({'type': answer_type, 'value': ''})  # Use 'UNCHECKED' for unchecked state
            else:
                answers[question_id].append({'type': answer_type, 'value': value})
        else:
            # Handle the case where there are not enough parts after splitting
            pass
    return answers


def serialize_answers333(form_data):

    print('form_data:', form_data)

    # This function processes the form data to serialize it appropriately
    # CONSIDERS CHECKBOXES TOO
    answers = {}
    for key, value in form_data.items():
        key_parts = key.split('_')
        if len(key_parts) >= 3:
            question_id = key_parts[0]
            answer_index = key_parts[1]
            answer_type = key_parts[2]
            if question_id not in answers:
                answers[question_id] = []
            # Include a check for missing values (unchecked checkboxes)
            if answer_type == 'CB':
                answers[question_id].append({'type': answer_type, 'value': value or ''})  # Set empty string for unchecked checkboxes
            else:
                answers[question_id].append({'type': answer_type, 'value': value})
        else:
            # Handle the case where there are not enough parts after splitting
            pass
    return answers




def fetch_questionnaire_details(questionnaire_id):
    # Fetch questionnaire details and questions
    questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questions = []
    for qq in QuestionnaireQuestions.query.filter_by(questionnaire_id=questionnaire_id).join(Question).all():
        question_data = {
            'id': qq.question.id,
            'question_id': qq.question.question_id,
            'text': qq.question.text,
            'answer_type': qq.question.answer_type,
            'answer_fields': qq.question.answer_fields
        }
        questions.append(question_data)
    return questions, questionnaire.name






#question priority
def merge_answer_fields(question_answer_fields, existing_answer_data):
    try:
        question_fields = json.loads(question_answer_fields)  # Load the base fields from the question
        answer_data = json.loads(existing_answer_data)  # Load the answer data
    except json.JSONDecodeError as e:
        raise ValueError(f"Parsing error: {str(e)}")

    # Create a lookup from the answer data for quick value access, storing values in lists
    answer_lookup = {}
    for item in answer_data:
        if item['type'] not in answer_lookup:
            answer_lookup[item['type']] = []
        answer_lookup[item['type']].append(item)

    # Merge logic where question fields are the basis and answers are supplemented
    merged_fields = []
    seen_types = set()

    # Iterate over question fields and add answers from the lookup or keep the original
    for field in question_fields:
        field_type = field['type']
        if field_type in answer_lookup:
            # Add all items for this type from the answer data
            for ans in answer_lookup[field_type]:
                merged_fields.append(ans)
            seen_types.add(field_type)
        else:
            # If no answer of this type, add the question field as is
            merged_fields.append(field)

    # Optionally, add remaining types from answer data not covered by question fields
    for type, answers in answer_lookup.items():
        if type not in seen_types:
            merged_fields.extend(answers)  # Add all answers of this type

    return json.dumps(merged_fields)  # Return as JSON string if needed for consistency



def merge_answer_fields_answer_priority(base_fields_json, answer_data_json):
    try:
        base_fields = json.loads(base_fields_json)
        answer_data = json.loads(answer_data_json)
    except json.JSONDecodeError as e:
        raise ValueError(f"Parsing error: {str(e)}")

    # Create a lookup dictionary from the base fields to easily find and fill missing types
    base_lookup = {item['type']: item for item in base_fields}

    # Use answer data as the primary source and update missing fields from the base fields if necessary
    merged_fields = []
    seen_types = set()  # Track types we've added to avoid duplicates

    # First add all fields from the answer data, updating them with values from the base fields if needed
    for answer in answer_data:
        type = answer['type']
        seen_types.add(type)
        # If the type exists in the base fields and it's missing in the answer data, use the base field's default
        if type in base_lookup and 'value' not in answer:
            answer['value'] = base_lookup[type]['value']
        merged_fields.append(answer)

    # Now add any additional types from the base fields that weren't in the answer data
    for type, field in base_lookup.items():
        if type not in seen_types:
            # Append the base field as is, because it wasn't in the answer data
            merged_fields.append(field)

    return json.dumps(merged_fields)  # Return as JSON string if needed for consistency



@app.route('/show_survey/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey(questionnaire_id):
    form = BaseSurveyForm()
    user_id = current_user.id
    company = CompanyUsers.query.filter_by(user_id=user_id).first()
    if not company:
        flash("Company not found.", "error")
        return redirect(url_for("index"))  # Redirect to a safe page

    company_id = company.company_id

    if request.method == 'POST':
        if form.validate_on_submit():
            answers_to_save = serialize_answers(request.form)
            return handle_post_submission(form, company_id, user_id, questionnaire_id, answers_to_save)
        else:
            flash('Error with form data. Please check your entries.', 'error')

    update_question_answer_fields()  # Ensure this function is safely handling data updates

    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_questions = QuestionnaireQuestions.query.filter_by(
        questionnaire_id=questionnaire_id
    ).join(Question).order_by(Question.question_id).all()

    questions = []
    form_data = {}
    for qq in questionnaire_questions:
        question = qq.question
        existing_answer = Answer.query.filter_by(
            company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id, question_id=question.id
        ).first()

        if existing_answer and existing_answer.answer_data:
            try:
                merged_fields = merge_answer_fields(question.answer_fields, existing_answer.answer_data)
                form_data[str(question.id)] = merged_fields
            except ValueError as e:
                flash(str(e), "error")
                continue  # Skip this question on error

        else:
            form_data[str(question.id)] = question.answer_fields

        questions.append({
            'id': question.id,
            'question_id': question.question_id,
            'text': question.text,
            'answer_type': question.answer_type,
            'answer_fields': form_data[str(question.id)]
        })

    dynamic_html = create_dynamic_form(form, {'questions': questions, 'form_data': form_data}, company_id)
    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=selected_questionnaire.name, today=datetime.now().date())





def save_answers222(data):
    #print('save answers; DATA:', data['answer_data'])
    try:
        if not is_substantive(data['answer_data']):
            flash('No substantial data to save.', 'error')
            return redirect(url_for('show_survey', questionnaire_id=data['questionnaire_id']))

        action_id = data['action_id']
        company_id = data['company_id']
        user_id = data['user_id']
        questionnaire_id = data['questionnaire_id']
        answer_data = json.loads(data['answer_data'])  # This is a dictionary keyed by question IDs

        changes_made = False  # Flag to track if any changes are made

        # Iterate over each question's answer data
        for current_question_id, question_answers in answer_data.items():
            print('current quest, quest answers', current_question_id, question_answers)
            answer = Answer.query.filter_by(
                company_id=company_id,
                user_id=user_id,
                questionnaire_id=questionnaire_id,
                question_id=current_question_id
            ).first()

            serialized_answer = json.dumps(question_answers, ensure_ascii=False)
            should_submit = (action_id == 'submit')

            if answer:
                print('answer exists', serialized_answer)
                if is_substantive(serialized_answer) and serialized_answer != answer.answer_data:
                    answer.answer_data = serialized_answer
                    changes_made = True
                if answer.submitted != should_submit:
                    answer.submitted = should_submit
                    changes_made = True
            else:
                answer = Answer(
                    company_id=company_id,
                    user_id=user_id,
                    questionnaire_id=questionnaire_id,
                    question_id=current_question_id,
                    answer_data=serialized_answer,
                    submitted=should_submit
                )
                db.session.add(answer)
                changes_made = True

        if changes_made:
            flash('Data saved successfully!', 'success')
        else:
            flash('No changes needed to be saved.', 'info')
        db.session.commit()
        return redirect(url_for('thank_you'))
    except Exception as e:
        db.session.rollback()
        print(f"Database commit failed: {e}")
        flash(f'Error saving data: {str(e)}', 'error')
        return redirect(url_for('show_survey', questionnaire_id=questionnaire_id))



def merge_answer_fields333(base_fields_json, answer_data_json):
    try:
        base_fields = json.loads(base_fields_json)
        answer_data = json.loads(answer_data_json)
    except json.JSONDecodeError as e:
        raise ValueError("Parsing error: Invalid JSON in the answer or base fields.")

    answer_lookup = {item['type']: item['value'] for item in answer_data}
    for field in base_fields:
        if field['type'] in answer_lookup:
            field['value'] = answer_lookup[field['type']]
        else:
            # Handle case where answer does not exist for this type
            field['value'] = ""  # or some default value

    print('merged fields', base_fields)
    return base_fields

# Example use within the Flask view function

@app.route('/show_survey333/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey333(questionnaire_id):
    form = BaseSurveyForm()
    user_id = current_user.id
    company = CompanyUsers.query.filter_by(user_id=user_id).first()
    company_id = company.company_id if company else None

    if request.method == 'POST':
        print('form POSTed')
        if form.validate_on_submit():
            print('form validated')
            answers_to_save = serialize_answers(request.form)
            print('answers to save', answers_to_save)
            return handle_post_submission(form, company_id, user_id, questionnaire_id, answers_to_save)
        else:
            flash('Error with form data. Please check your entries.', 'error')

    # Fetch the questionnaire details and questions via QuestionnaireQuestions

    # reset answer_fields in Question
    update_question_answer_fields()

    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_questions = QuestionnaireQuestions.query.filter_by(
        questionnaire_id=questionnaire_id
    ).join(Question).order_by(Question.question_id).all()

    questions = []
    form_data = {}
    for qq in questionnaire_questions:
        question = qq.question
        existing_answer = Answer.query.filter_by(
            company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id, question_id=question.id
        ).first()

        if existing_answer and existing_answer.answer_data:
            merged_fields = merge_answer_fields(question.answer_fields, existing_answer.answer_data)
            form_data[str(question.id)] = json.dumps(merged_fields)  # Convert back to JSON for use in the template
        else:
            form_data[str(question.id)] = question.answer_fields  # Use default structure

        questions.append({
            'id': question.id,
            'question_id': question.question_id,
            'text': question.text,
            'answer_type': question.answer_type,
            'answer_fields': form_data[str(question.id)]
        })

    dynamic_html = create_dynamic_form(form, {'questions': questions, 'form_data': form_data}, company_id)
    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=selected_questionnaire.name, today=datetime.now().date())



'''
# Define the URL associated with the endpoint
@app.route('/custom_base_atti')
def custom_base_atti_index():
    # Implement the logic for your custom base atti index view
    try:
        db.session.commit()
        print('***committed!***')

        last_record_id = db.session.query(BaseData.id).order_by(BaseData.id.desc()).first()[0]
        print('***last record committed was***', last_record_id)

    except Exception as e:
        db.session.rollback()
        print("Failed to create record:", e)

    return render_template('custom_file_loader.html')

@app.route('/custom_base_atti')
def custom_base_atti_index():
    # Access form data passed as query parameters
    fi0 = request.args.get('fi0')
    interval_id = request.args.get('interval_id')
    interval_ord = request.args.get('interval_ord')

    print(fi0, interval_id, interval_ord)

    # Implement the logic for your custom base atti index view
    try:
        db.session.commit()
        print('***committed!***')

        last_record_id = db.session.query(BaseData.id).order_by(BaseData.id.desc()).first()[0]
        print('***last record committed was***', last_record_id)

    except Exception as e:
        db.session.rollback()
        print("Failed to create record:", e)

    return render_template('custom_file_loader.html', fi0=fi0, interval_id=interval_id, interval_ord=interval_ord)
'''



# Define the form class
# TODO (AFTER TESTS) WHEN FILTERING, ONLY NON SUBMITTED FORMS ARE TO BE SHOWN
# If the form exists but it's submited, then a message is provided
# and no other action is performed
@app.route('/show_survey223/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey_223(questionnaire_id):
    form = BaseSurveyForm()
    user_id = current_user.id
    company = CompanyUsers.query.filter_by(user_id=user_id).first()
    company_id = company.company_id if company else None

    if request.method == 'POST':
        print('form POSTed')
        if form.validate_on_submit():
            print('form validated')
            answers_to_save = serialize_answers(request.form)
            print('answers to save', answers_to_save)
            return handle_post_submission(form, company_id, user_id, questionnaire_id, answers_to_save)
        else:
            flash('Error with form data. Please check your entries.', 'error')

    # Fetch the questionnaire details and questions via QuestionnaireQuestions

    # reset answer_fields in Question
    update_question_answer_fields()

    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_questions = QuestionnaireQuestions.query.filter_by(
        questionnaire_id=questionnaire_id
    ).join(Question).order_by(Question.question_id).all()

    # Collect question data for form setup
    questions = []
    form_data = {}
    for qq in questionnaire_questions:
        question = qq.question
        question_data = {
            'id': question.id,
            'question_id': question.question_id,
            'text': question.text,
            'answer_type': question.answer_type,
            'answer_fields': question.answer_fields
        }
        questions.append(question_data)

        # Attempt to load existing answers for each question
        existing_answer = Answer.query.filter_by(
            company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id, question_id=question.id
        ).first()

        if existing_answer and existing_answer.answer_data:
            # print(question.question_id, existing_answer.answer_data)
            try:
                answer_details = json.loads(existing_answer.answer_data)
                form_data[str(question.id)] = answer_details  # Use dot notation here
            except json.JSONDecodeError:
                flash(f'Error decoding answer data for question {question.question_id}.', 'error')
        else:
            print('question without answer or data?', question.question_id, 'no answer or data')


    # Prepare dynamic form HTML with the questions and pre-filled data
    dynamic_html = create_dynamic_form(form, {'questions': questions, 'form_data': form_data}, company_id)  # Passing company_id here

    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=selected_questionnaire.name, today=datetime.now().date())


def save_answers_old_2(data):
    print('save answers; DATA:', data)
    try:
        if not is_substantive(data['answer_data']):
            flash('No substantial data to save.', 'error')
            return redirect(url_for('show_survey', questionnaire_id=data['questionnaire_id']))

        action_id = data['action_id']
        company_id = data['company_id']
        user_id = data['user_id']
        questionnaire_id = data['questionnaire_id']
        #initial_question_id = data.get('question_id')  # Optional: this might not be necessary depending on your schema
        answer_data = json.loads(data['answer_data'])  # This is a dictionary keyed by question IDs

        # Iterate over each question's answer data
        for current_question_id, question_answers in answer_data.items():
            # Find existing answer or create a new one
            answer = Answer.query.filter_by(
                company_id=company_id,
                user_id=user_id,
                questionnaire_id=questionnaire_id,
                question_id=current_question_id  # Correctly using a separate variable for the loop
            ).first()

            # Serialize the question's answer data for storage
            serialized_answer = json.dumps(question_answers, ensure_ascii=False)

            if answer:

                answer.submitted = (action_id == 'submit')
                print(f"Setting submitted for question {current_question_id} to {action_id == 'submit'}")
                # Update existing record
                if is_substantive(serialized_answer) and serialized_answer != answer.answer_data:
                    answer.answer_data = serialized_answer
                db.session.commit()
                flash('Data updated successfully!', 'success')
            else:
                # Create new record
                answer = Answer(
                    company_id=company_id,
                    user_id=user_id,
                    questionnaire_id=questionnaire_id,
                    question_id=current_question_id,
                    answer_data=serialized_answer,
                    submitted=(action_id == 'submit')
                )
                db.session.add(answer)
                db.session.commit()
                flash('Data saved successfully!', 'success')
        return redirect(url_for('thank_you'))
    except Exception as e:
        db.session.rollback()
        print(f"Database commit failed: {e}")
        flash(f'Error saving data: {str(e)}', 'error')
        return redirect(url_for('show_survey', questionnaire_id=questionnaire_id))




def serialize_answers222(form_data):

    # This function processes the form data to serialize it appropriately
    answers = {}
    for key, value in form_data.items():
        key_parts = key.split('_')
        #print('key_parts', key_parts)
        if len(key_parts) >= 3:
            question_id = key_parts[0]  # Extract the question ID
            answer_index = key_parts[1]  # Extract the answer index
            answer_type = key_parts[2]  # Extract the answer type
            if question_id not in answers:
                answers[question_id] = []
            #print('answer type', answer_type, 'value', value)
            answers[question_id].append({'type': answer_type, 'value': value})
        else:
            #print('serialize other keys etc', key, value)
            # Handle the case where there are not enough parts after splitting
            # For example, log a warning or set default values
            pass
    return answers


def save_answers_all_in_one(data):
    print('save answers; DATA:', data)
    try:
        if not is_substantive(data['answer_data']):
            flash('No substantial data to save.', 'error')
            return redirect(url_for('show_survey', questionnaire_id=data['questionnaire_id']))

        action_id = data['action_id']
        company_id = data['company_id']
        user_id = data['user_id']
        questionnaire_id = data['questionnaire_id']
        answer_data = data['answer_data']

        answer = Answer.query.filter_by(
            company_id=company_id,
            user_id=user_id,
            questionnaire_id=questionnaire_id
        ).first()

        if answer:
            if is_substantive(answer_data) and answer_data != answer.answer_data:
                answer.answer_data = answer_data
                answer.submitted = (action_id == 'submit')
                db.session.commit()
                flash('Data updated successfully!', 'success')
            else:
                flash('No new data to update.', 'info')
        else:
            if is_substantive(answer_data):
                answer = Answer(
                    company_id=company_id,
                    user_id=user_id,
                    questionnaire_id=questionnaire_id,
                    answer_data=answer_data,
                    submitted=(action_id == 'submit')
                )
                db.session.add(answer)
                db.session.commit()
                flash('Data saved successfully!', 'success')
        return redirect(url_for('thank_you'))
    except Exception as e:
        db.session.rollback()
        print(f"Database commit failed: {e}")
        flash(f'Error saving data: {str(e)}', 'error')
        return redirect(url_for('show_survey', questionnaire_id=questionnaire_id))



@app.route('/show_survey_single_2/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey_single_2(questionnaire_id):
    form = BaseSurveyForm()
    user_id = current_user.id
    company = CompanyUsers.query.filter_by(user_id=user_id).first()
    company_id = company.company_id if company else None

    if request.method == 'POST':
        if form.validate_on_submit():
            answers_to_save = serialize_answers(request.form)
            return handle_post_submission(form, company_id, user_id, questionnaire_id, answers_to_save)
        else:
            flash('Error with form data. Please check your entries.', 'error')

    # Fetch the questionnaire details and questions via QuestionnaireQuestions
    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_questions = QuestionnaireQuestions.query.filter_by(
        questionnaire_id=questionnaire_id
    ).join(Question).order_by(Question.question_id).all()

    # Collect question data for form setup
    questions = []
    form_data = {}
    for qq in questionnaire_questions:
        question = qq.question
        question_data = {
            'id': question.id,
            'question_id': question.question_id,
            'text': question.text,
            'answer_type': question.answer_type,
            'answer_fields': question.answer_fields
        }
        questions.append(question_data)

    # Attempt to load existing answers for each question
    for question in questions:
        existing_answer = Answer.query.filter_by(
            company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id, question_id=question['id']
        ).first()

        print('question', question, '| existing answer?', existing_answer.question_id, existing_answer)

        if existing_answer and existing_answer.answer_data:
            try:
                answer_details = json.loads(existing_answer.answer_data)
                form_data[str(question['id'])] = answer_details
            except json.JSONDecodeError:
                flash(f'Error decoding answer data for question {question["question_id"]}.', 'error')

    # Prepare dynamic form HTML with the questions and pre-filled data
    dynamic_html = create_dynamic_form(form, {'questions': questions, 'form_data': form_data})

    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=selected_questionnaire.name, today=datetime.now().date())


@app.route('/show_survey_all_in_one/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey_all_in_one(questionnaire_id):
    form = BaseSurveyForm()

    # Retrieve user and company IDs
    user_id = current_user.id
    company = CompanyUsers.query.filter_by(user_id=user_id).first()
    company_id = company.company_id if company else None

    if request.method == 'POST':
        if form.validate_on_submit():
            answers_to_save = serialize_answers(request.form)
            # Implement your form submission logic here
            return handle_post_submission(form, company_id, user_id, questionnaire_id, answers_to_save)
        else:
            flash('Error with form data. Please check your entries.', 'error')

    # GET


    # Call the function to update the database
    update_question_answer_fields()

    # Fetch the questionnaire details and questions via QuestionnaireQuestions
    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_questions = QuestionnaireQuestions.query.filter_by(
        questionnaire_id=questionnaire_id
    ).join(Question).order_by(Question.question_id).all()

    # Collect question data for form setup
    questions = []
    for qq in questionnaire_questions:
        question = qq.question

        questions.append({
            'id': question.id,
            'question_id': question.question_id,
            'text': question.text,
            'answer_type': question.answer_type,
            'answer_fields': question.answer_fields
        })

    # Fetch the single answer record for this user, company, and questionnaire
    existing_answer = Answer.query.filter_by(
        company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id
    ).first()

    # Initialize a dictionary for form data based on the answer JSON
    form_data = {}
    if existing_answer and existing_answer.answer_data:
        print('answer and data exist')
        try:
            answers_json = json.loads(existing_answer.answer_data)
            form_data = {str(question['id']): answers_json.get(str(question['id']), '') for question in questions}

        except json.JSONDecodeError as e:
            flash('Error decoding answer data. ' + str(e), 'error')
            print("JSON Decode Error:", e)  # More explicit logging

    # Prepare dynamic form HTML with the questions and pre-filled data
    print("form data being passed to :", form_data)  # Debug output
    dynamic_html = create_dynamic_form(form, {'questions': questions, 'form_data': form_data})

    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=selected_questionnaire.name, today=datetime.now().date())




@app.route('/submit_confirmed223', methods=['POST'])
def submit_confirmed223():
    print('submit confirmed')
    # Retrieve and immediately check if 'pending_answer_data' exists in the session
    pending_data = session.pop('pending_answer_data', None)

    if request.form['submit_button'] == 'cancel':
        print('cancel')
        return redirect(url_for('show_survey', questionnaire_id=request.form.get('questionnaire_id')))

    if pending_data:
        print('OK')
        print('going to save (alt)', pending_data)
        # Directly use the pending_data dictionary in the save_answers call
        save_answers(pending_data)
        return redirect(url_for('thank_you'))
    else:
        flash('No data to save or session expired.', 'error')
        return redirect(url_for('show_survey', questionnaire_id=request.form.get('questionnaire_id')))



@app.route('/show_survey_NO/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey_NO(questionnaire_id):
    form = BaseSurveyForm()

    # Retrieve user and company IDs
    today = datetime.now().date()
    user_id = current_user.id
    company_id = CompanyUsers.query.filter_by(user_id=user_id).first().company_id if CompanyUsers.query.filter_by(user_id=user_id).first() else None

    # Prepare the questionnaire data
    questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questions = Question.query.filter_by(questionnaire_id=questionnaire_id).all()

    # Check if there is existing data to pre-fill the form (for GET requests)
    if request.method == 'GET':
        existing_answer = Answer.query.filter_by(
            company_id=company_id,
            user_id=user_id,
            questionnaire_id=questionnaire_id
        ).first()

        if existing_answer and not existing_answer.submitted:
            # Deserialize the answer data and prefill the form
            try:
                prefill_data = json.loads(existing_answer.answer_data)
                # Assuming form fields and JSON keys match
                for field in form:
                    if field.name in prefill_data:
                        field.data = prefill_data[field.name]
            except json.JSONDecodeError:
                flash("Error loading existing data.", "error")

    if request.method == 'POST':
        # Post request handling remains largely the same
        if form.validate_on_submit():
            # Serialization and saving logic
            answers_to_save = serialize_answers(request.form)
            session['pending_answer_data'] = {
                'action_id': form.action_id.data,
                'company_id': company_id,
                'user_id': user_id,
                'questionnaire_id': questionnaire_id,
                'answer_data': json.dumps(answers_to_save, ensure_ascii=False)
            }
            if existing_answer:
                flash('Existing data found, please confirm to overwrite.', 'warning')
                return render_template('confirmation_save_submit.html', form=form)
            else:
                return save_answers(session['pending_answer_data'])

        else:
            flash('Error with form data. Please check your entries.', 'error')

    # Construct the dynamic HTML form and render the page
    dynamic_html = create_dynamic_form(form, {'questions': questions})
    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=questionnaire.name, today=today)



@app.route('/show_survey_bis/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey_bis(questionnaire_id):
    form = BaseSurveyForm()

    # Retrieve user and company IDs
    today = datetime.now().date()
    user_id = current_user.id
    try:
        company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
    except:
        company_id = None
        pass

    if request.method == 'POST':
        print('POST running')
        # Log or print the request.form object
        app.logger.info(f"Form Data: {request.form}")

        # Check if the action_id field is present in the form data
        action_id = request.form.get('action_id')
        if action_id:
            app.logger.info(f"Action ID: {action_id}")
            print('action_id', action_id)
            # Further processing based on the action_id value
        else:
            print('no action id?')

        print('validating')
        if form.validate_on_submit():
            print('validated')
            answers_to_save = serialize_answers(request.form)
            print('form.action_id.data', form.action_id.data)

            session['pending_answer_data'] = {
                'action_id': form.action_id.data,
                'company_id': company_id,
                'user_id': user_id,
                'questionnaire_id': questionnaire_id,
                'timestamp': datetime.now(),
                'answer_data': json.dumps(answers_to_save, ensure_ascii=False)
            }
            existing_answer = check_existing_data(company_id, user_id, questionnaire_id)
            if existing_answer:
                flash('Existing data found, please confirm to overwrite.', 'warning')
                return render_template('confirmation_save_submit.html', form=form)
            else:
                print('jumping to save_answers')
                return save_answers(session['pending_answer_data'])
        else:
            print('NOT validated')
            flash('Error with form data. Please check your entries.', 'error')

    # Handle GET method
    # =================
    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_name = selected_questionnaire.name
    questionnaire_questions = QuestionnaireQuestions.query.filter_by(
        questionnaire_id=questionnaire_id
    ).join(Question).order_by(Question.question_id).all()

    questions = []
    for qq in questionnaire_questions:
        question = qq.question
        question_data = {
            'id': question.id,
            'question_id': question.question_id,
            'text': question.text,
            'answer_type': question.answer_type,
            'answer_fields': question.answer_fields
        }
        questions.append(question_data)

    # Prepare dynamic form HTML with the questions data
    # dynamic_html = create_dynamic_form({'questions': questions})
    dynamic_html = create_dynamic_form(form, {'questions': questions})

    # Setup form fields with session data
    # Call fetch_questionnaire_details and unpack the returned tuple
    questions, questionnaire_name = fetch_questionnaire_details(questionnaire_id)

    form.questionnaire_id.data = questionnaire_id
    form.company_id.data = company_id
    form.user_id.data = user_id
    form.action_id.data = 'load'  # Example action_id, adjust as necessary

    # Pass the unpacked variables to create_dynamic_form
    #print('passing', questions)
    dynamic_html = create_dynamic_form(form, {'questions': questions})

    return render_template('survey.html', form=form, dynamic_html=dynamic_html, questionnaire_name=questionnaire_name, today=datetime.now().date())




@app.route('/retrieve_data', methods=['POST'])
def retrieve_data():
    questionnaire_id = request.form.get('questionnaire_id')
    company_id = request.form.get('company_id')
    user_id = request.form.get('user_id')

    answer = Answer.query.filter_by(company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id).first()

    # TEST AND DEBUG
    print('answer data', answer.answer_data)
    json1 = session['pending_answer_data']['answer_data']
    json2 = answer.answer_data
    are_structures_identical = compare_structures(json1, json2)
    if are_structures_identical:
        print(f"Are structures identical? {are_structures_identical}")
        print('and tey are: 1')
        print(json1)
        print('2:')
        print(json2)

    if answer:
        if answer.submitted:
            print(f"Received, submitted - questionnaire_id: {questionnaire_id}, company_id: {company_id}, user_id: {user_id}")

            return jsonify({'found': True, 'submitted': True})
        else:
            # Convert answer data to a dictionary, assuming it's stored in a JSON-compatible format
            print(f"Received, non submitted - questionnaire_id: {questionnaire_id}, company_id: {company_id}, user_id: {user_id}")
            return jsonify({'found': True, 'submitted': False, 'data': json.loads(answer.answer_data)})
    return jsonify({'found': False})


@app.route('/load_survey')
def load_survey():
   company_id = request.args.get('company_id')
   user_id = request.args.get('user_id')
   questionnaire_id = request.args.get('questionnaire_id')

   answer = Answer.query.filter_by(
       company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id
   ).first()

   if answer:
       try:
           # Deserialize JSON data
           json_data = json.loads(answer.answer_data)
       except json.JSONDecodeError:
           return "Error: Data is not in valid JSON format.", 400
   else:
       return "No data found for the given parameters.", 404

   # Now, json_data is a Python dictionary with the structure from the DB
   return render_template('survey.html', form_data=json_data)


def save_answers222(**kwargs):
    try:
        company_id = kwargs['company_id']
        user_id = kwargs['user_id']
        questionnaire_id = kwargs['questionnaire_id']
        action_id = kwargs['action_id']
        answer_data = kwargs.get('answer_data', "{}")

        answer = Answer.query.filter_by(
            company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id
        ).first()

        if answer:
            answer.timestamp = datetime.now()
            answer.answer_data = answer_data
            answer.submitted = action_id == 'submit'
            db.session.commit()
        else:
            new_answer = Answer(
                company_id=company_id,
                user_id=user_id,
                questionnaire_id=questionnaire_id,
                timestamp=datetime.now(),
                submitted=action_id == 'submit',
                answer_data=answer_data
            )
            db.session.add(new_answer)
            db.session.commit()

        print("Data saved.")
        return redirect(url_for('thank_you'))  # Assume there's a route for 'thank_you'
    except Exception as e:
        print(f"Error saving data: {e}")
        db.session.rollback()
        raise





def serialize_answers222(form_data):
    # This function processes the form data to serialize it appropriately
    answers = {}
    for key, value in form_data.items():
        print('serialize', key, value)
        if key.startswith('question'):
            key_parts = key.split('_')
            if len(key_parts) >= 3:
                question_id = key_parts[1]  # Extract the question ID
                answer_index = key_parts[2]  # Extract the answer index
                answer_type = key_parts[3]  # Extract the answer type
                if question_id not in answers:
                    answers[question_id] = []
                answers[question_id].append({'type': answer_type, 'value': value})
            else:

                # Handle the case where there are not enough parts after splitting
                # For example, log a warning or set default values
                pass
    return answers



@app.route('/submit_confirmed222', methods=['POST'])
def submit_confirmed222():
    if request.form['submit_button'] == 'cancel':
        # User cancels operation
        print('POP session data')
        session.pop('pending_answer_data', None)
        return redirect(url_for('show_survey', questionnaire_id=request.form.get('questionnaire_id')))
    else:
        # User confirms overwrite
        pending_data = session.pop('pending_answer_data', None)
        print('2. pending data', pending_data)
        if not pending_data:
            return "Error: Session expired or invalid data.", 400
        return save_answers(**pending_data)




def save_answers102(**data):
    """
    Save or update answers in the database based on the provided data.

    Args:
        data (dict): A dictionary containing all the necessary data to save, including the user's answers and metadata.

    Returns:
        Redirect response to a 'thank_you' page on success, or rerender the current form with errors on failure.
    """
    print('save answers; DATA id', data)
    try:
        action_id = data.get('action_id')
        company_id = data.get('company_id')
        user_id = data.get('user_id')
        questionnaire_id = data.get('questionnaire_id')
        answer_data = data.get('answer_data')

        # Check for an existing record to update
        answer = Answer.query.filter_by(company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id).first()
        if answer:
            # Update existing answer
            print('answer exists, updating it using', answer_data)
            answer.answer_data = answer_data
            answer.submitted = (action_id == 'submit')
        else:
            # Create new answer record
            print('creating a new Answer record')
            answer = Answer(
                company_id=company_id,
                user_id=user_id,
                questionnaire_id=questionnaire_id,
                answer_data=answer_data,
                submitted=(action_id == 'submit')
            )
            db.session.add(answer)

        db.session.flush()
        print('DB commit is next')
        db.session.commit()
        print('DB committed')
        flash('Data saved successfully!', 'success')
        return redirect(url_for('thank_you'))
    except Exception as e:
        db.session.rollback()
        flash(f'Error saving data: {str(e)}', 'error')
        return redirect(url_for('show_survey', questionnaire_id=questionnaire_id))





FORMS.PY
========


def generate_input_html102(input_type, field_name, existing_value, base_path, horizontal=False, order_number=None, width=None):
    css_class = "form-control"
    horizontal_class = "horizontal" if horizontal else "vertical"
    html = ""

    # Add a wrapper for alignment, include dynamic width if provided
    width_style = f" style='width: {width}px;'" if width else ""

    if order_number:
        html += f"<div class='input-group {horizontal_class}'{width_style}>"
        html += f"<label class='order-number'>{order_number}.</label> "
    else:
        order_number = extract_index_with_regex(field_name)
        html += f"<div class='{horizontal_class}'{width_style}>"

    # Your existing input generation logic here
    # Example with CheckBox:
    if input_type == 'CB':
        checked = 'checked' if existing_value.lower() == 'on' else ''
        html += f"<input type='hidden' name='{field_name}' value='off'>"
        html += f"<input type='checkbox' class='form-check-input' id='{field_name}' name='{field_name}' value='on' {checked}>"
        label_text = f"A.{order_number}" if order_number else "A "  # Example label
        html += f"<label class='form-check-label' for='{field_name}'>{label_text}</label>"

    elif input_type == 'TLT':
        html += f"<textarea name='{field_name}' class='{css_class}'>{existing_value}</textarea>"

    elif input_type == 'NI(0-10)':
        options = ''.join(
            f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in
            range(11))
        html += f"<select name='{field_name}' class='form-control'>{options}</select><br>"

    elif input_type == 'FILE':
        if existing_value:
            file_path = url_for('static', filename=f"{base_path}/{existing_value}")
            html += f"Current File: <a href='{file_path}' target='_blank'>{existing_value}</a>"
        html += f"<input type='file' name='{field_name}' class='{css_class}'>"

    elif input_type == 'DD':
        html += f"<input type='date' name='{field_name}' value='{existing_value}' class='{css_class}'>"

    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        html += f"<select name='{field_name}' class='{css_class}'>"
        html += f"<option value='Yes' {yes_selected}>Yes</option>"
        html += f"<option value='No' {no_selected}>No</option></select>"

    elif input_type == 'HML':
        high_selected = "selected" if existing_value == 'H' else ""
        medium_selected = "selected" if existing_value == 'M' else ""
        low_selected = "selected" if existing_value == 'L' else ""
        html += f"<select name='{field_name}' class='{css_class}'>"
        html += f"<option value='H' {high_selected}>High</option>"
        html += f"<option value='M' {medium_selected}>Medium</option>"
        html += f"<option value='L' {low_selected}>Low</option></select>"

    elif input_type == 'NUM':
        html += f"<input type='number' name='{field_name}' value='{existing_value}' step='0.01' class='{css_class}'>"

    else:
        html += f"<input type='text' name='{field_name}' value='{existing_value}' class='{css_class}' autocomplete='off'>"

    # Close the wrapper
    html += "</div><br>"
    return html



def generate_input_html103(input_type, field_name, existing_value, base_path, horizontal=False, order_number=None):
    css_class = "form-control"
    horizontal_class = "horizontal" if horizontal else "vertical"
    html = ""

    # General wrapper for alignment
    html += f"<div class='{horizontal_class}'>"

    # Include the order number if provided (only for vertical alignment)
    if order_number:
        html += f"<label class='order-number'>{order_number}.</label> "

    if input_type == 'CB':
        checked = 'checked' if existing_value.lower() == 'on' else ''
        html += f"<input type='hidden' name='{field_name}' value='off'>"
        html += f"<input type='checkbox' class='form-check-input' id='{field_name}' name='{field_name}' value='on' {checked}>"
        label_text = f"A.{order_number}" if order_number else "A"  # Example label, modify as needed
        html += f"<label class='form-check-label' for='{field_name}'>{label_text}</label>"

    elif input_type == 'TLT':
        html += f"<textarea name='{field_name}' class='{css_class}'>{existing_value}</textarea>"

    elif input_type == 'NI(0-10)':
        options = ''.join(
            f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in
            range(11))
        html += f"<select name='{field_name}' class='form-control'>{options}</select><br>"

    elif input_type == 'FILE':
        if existing_value:
            file_path = url_for('static', filename=f"{base_path}/{existing_value}")
            html += f"Current File: <a href='{file_path}' target='_blank'>{existing_value}</a>"
        html += f"<input type='file' name='{field_name}' class='{css_class}'>"

    elif input_type == 'DD':
        html += f"<input type='date' name='{field_name}' value='{existing_value}' class='{css_class}'>"

    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        html += f"<select name='{field_name}' class='{css_class}'>"
        html += f"<option value='Yes' {yes_selected}>Yes</option>"
        html += f"<option value='No' {no_selected}>No</option></select>"

    elif input_type == 'HML':
        high_selected = "selected" if existing_value == 'H' else ""
        medium_selected = "selected" if existing_value == 'M' else ""
        low_selected = "selected" if existing_value == 'L' else ""
        html += f"<select name='{field_name}' class='{css_class}'>"
        html += f"<option value='H' {high_selected}>High</option>"
        html += f"<option value='M' {medium_selected}>Medium</option>"
        html += f"<option value='L' {low_selected}>Low</option></select>"

    elif input_type == 'NUM':
        html += f"<input type='number' name='{field_name}' value='{existing_value}' step='0.25' class='{css_class}'>"

    else:
        html += f"<input type='text' name='{field_name}' value='{existing_value}' class='{css_class}' autocomplete='off'>"

    # Close the general wrapper for alignment
    html += "</div><br>"
    return html



def generate_input_html102(input_type, field_name, existing_value, base_path, horizontal=False):
    css_class = "form-control"
    horizontal_class = "horizontal" if horizontal else "vertical"
    html = ""

    # General wrapper for alignment
    html += f"<div class='{horizontal_class}'>"

    if input_type == 'CB':
        checked = 'checked' if existing_value.lower() == 'on' else ''
        # Adding a hidden input to ensure the off value is captured if unchecked
        html += f"<input type='hidden' name='{field_name}' value='off'>"
        html += f"<input type='checkbox' class='form-check-input' id='{field_name}' name='{field_name}' value='on' {checked}>"
        cb_label = extract_index_with_regex(field_name)
        label_text = f"A.{cb_label}"  # You might want to customize or externalize this label
        html += f"<label class='form-check-label' for='{field_name}'>{label_text}</label>"

    elif input_type == 'TLT':
        html += f"<textarea name='{field_name}' class='{css_class}'>{existing_value}</textarea>"

    elif input_type == 'NI(0-10)':
        options = ''.join(f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in range(11))
        html += f"<select name='{field_name}' class='form-control'>{options}</select><br>"

    elif input_type == 'FILE':
        if existing_value:
            file_path = url_for('static', filename=f"{base_path}/{existing_value}")
            html += f"Current File: <a href='{file_path}' target='_blank'>{existing_value}</a>"
        html += f"<input type='file' name='{field_name}' class='{css_class}'>"

    elif input_type == 'DD':
        html += f"<input type='date' name='{field_name}' value='{existing_value}' class='{css_class}'>"

    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        html += f"<select name='{field_name}' class='{css_class}'>"
        html += f"<option value='Yes' {yes_selected}>Yes</option>"
        html += f"<option value='No' {no_selected}>No</option></select>"

    elif input_type == 'HML':
        high_selected = "selected" if existing_value == 'H' else ""
        medium_selected = "selected" if existing_value == 'M' else ""
        low_selected = "selected" if existing_value == 'L' else ""
        html += f"<select name='{field_name}' class='{css_class}'>"
        html += f"<option value='H' {high_selected}>High</option>"
        html += f"<option value='M' {medium_selected}>Medium</option>"
        html += f"<option value='L' {low_selected}>Low</option></select>"

    elif input_type == 'NUM':
        html += f"<input type='number' name='{field_name}' value='{existing_value}' step='0.25' class='{css_class}'>"

    else:
        html += f"<input type='text' name='{field_name}' value='{existing_value}' class='{css_class}' autocomplete='off'>"

    # Close the general wrapper for alignment
    html += "</div><br>"
    return html


23Apr2024


def generate_question_html102(question, existing_answers, base_path, horizontal=False):
    html = f"<div class='question'><h6>{question['question_id']}. {question['text']}</h6>"
    answer_fields = json.loads(existing_answers) if isinstance(existing_answers, str) else existing_answers

    input_html = ""
    for idx, answer_field in enumerate(answer_fields):
        input_type = answer_field['type']
        field_name = f"{question['id']}_{idx + 1}_{input_type}"
        existing_value = answer_field.get('value', '')
        input_html += generate_input_html(input_type, field_name, existing_value, base_path, horizontal)

    # Apply a different class based on layout preference
    if horizontal:
        html += f"<div class='answers horizontal'>{input_html}</div>"
    else:
        html += f"<div class='answers vertical'>{input_html}</div>"

    html += "</div><hr>"
    return html


21Apr2024

    elif input_type == 'CB':
        checked = 'checked' if existing_value.lower() == 'on' else ''
        label_text = "Aree impattate (1-2-3)"  # Customize as needed
        # Using the new CSS class for horizontal layout
        html += f"<div class='form-check checkbox-horizontal'>"
        html += f"<input type='checkbox' class='form-check-input' id='{field_name}' name='{field_name}' value='on' {checked}>"
        html += f"<label class='form-check-label' for='{field_name}'>{label_text}</label>"
        html += "</div>"


    elif input_type == 'CB':
        # Add a hidden input with the same name for unchecked states
        html += f"<input type='hidden' name='{field_name}' value=''>"
        checked = 'checked' if existing_value.lower() == 'true' else ''
        label_text = "Aree impattate (1-2-3)"  # Example label text
        html += f"<div class='form-check'>"  # Use Bootstrap form-check class
        html += f"<input type='checkbox' class='form-check-input' id='{field_name}' name='{field_name}' {checked}>"
        html += f"<label class='form-check-label' for='{field_name}'>{label_text}</label>"
        html += "</div><br>"




def generate_question_html225(question, existing_answers, base_path):
    html = f"<div class='question'><h6>{question['question_id']}. {question['text']}</h6>"

    # Decode existing_answers if it is a JSON string
    answer_fields = existing_answers if not isinstance(existing_answers, str) else json.loads(existing_answers)

    labels = ['a.', 'b.', 'c.', 'd.', 'e.', 'f.', 'g.', 'h.', 'i.', 'j.', 'k.', 'l.', 'm.', 'n.', 'o.', 'p.', 'q.', 'r.']

    for idx, answer_field in enumerate(answer_fields):
        label = labels[idx] if idx < len(labels) else f"{chr(97 + idx)}."
        input_type = answer_field['type']
        existing_value = answer_field.get('value', '')
        field_name = f"{question['id']}_{idx + 1}_{input_type}"

        # Structure the label and input side by side using flexbox
        html += f"<div class='form-group' style='display: flex; align-items: center;'>"
        html += f"<label for='{field_name}' style='margin-right: 10px;'>{label}</label>"
        html += generate_input_html(input_type, field_name, existing_value, base_path)
        html += "</div>"

    html += "</div><hr>"
    return html



def generate_question_html226(question, existing_answers, base_path):
    html = f"<div class='question'><h6>{question['question_id']}. {question['text']}</h6>"
    answer_fields = json.loads(existing_answers) if isinstance(existing_answers, str) else existing_answers

    checkbox_html = ""  # To hold all checkbox inputs
    has_checkboxes = any(field['type'] == 'CB' for field in answer_fields)

    if has_checkboxes:
        checkbox_html += "<div class='checkbox-horizontal'>"

    for idx, answer_field in enumerate(answer_fields):
        input_type = answer_field['type']
        field_name = f"{question['id']}_{idx + 1}_{input_type}"
        existing_value = answer_field.get('value', '')

        if input_type == 'CB':
            checkbox_html += generate_input_html(input_type, field_name, existing_value, base_path, is_checkbox=True)
        else:
            html += generate_input_html(input_type, field_name, existing_value, base_path, is_checkbox=False)

    if has_checkboxes:
        checkbox_html += "</div>"
        html += checkbox_html  # Append all checkboxes together in a flex container

    html += "</div><hr>"
    return html




def generate_input_html224(input_type, field_name, existing_value, base_path):
    html = ""
    if input_type == 'TLT':
        html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
    elif input_type == 'NI(0-10)':
        options = ''.join(
            f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in range(11))
        html += f"<select name='{field_name}' class='form-control'>{options}</select><br>"
    elif input_type == 'FILE':
        if existing_value:
            file_path = url_for('static', filename=f"{base_path}/{existing_value}")
            html += f"<div>Current File: <a href='{file_path}' target='_blank'>{existing_value}</a></div>"
        html += f"<input type='file' name='{field_name}' class='form-control'><br>"
    elif input_type == 'DD':
        html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"
    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        html += f"<select name='{field_name}' class='form-control'><option value='Yes' {yes_selected}>Yes</option><option value='No' {no_selected}>No</option></select><br>"

    elif input_type == 'CB':
        checked = 'checked' if existing_value.lower() == 'on' else ''
        label_text = "Aree impattate (1-2-3)"  # Customize as needed
        # Using the new CSS class for horizontal layout
        html += f"<div class='form-check checkbox-horizontal'>"
        html += f"<input type='checkbox' class='form-check-input' id='{field_name}' name='{field_name}' value='on' {checked}>"
        html += f"<label class='form-check-label' for='{field_name}'>{label_text}</label>"
        html += "</div>"

    elif input_type == 'HML':
        high_selected = "selected" if existing_value == 'H' else ""
        medium_selected = "selected" if existing_value == 'M' else ""
        low_selected = "selected" if existing_value == 'L' else ""
        html += f"<select name='{field_name}' class='form-control'>"
        html += f"<option value='H' {high_selected}>High</option>"
        html += f"<option value='M' {medium_selected}>Medium</option>"
        html += f"<option value='L' {low_selected}>Low</option>"
        html += "</select><br>"
    elif input_type == 'NUM':
        html += f"<input type='number' name='{field_name}' value='{existing_value}' step='0.01' class='form-control'><br>"
    else:
        html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    return html


def generate_input_html223(input_type, field_name, existing_value, base_path):
    html = ""
    if input_type == 'TLT':
        html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
    elif input_type == 'NI(0-10)':
        options = ''.join(
            f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in
            range(11))
        html += f"<select name='{field_name}' class='form-control'>{options}</select><br>"
    elif input_type == 'FILE':
        if existing_value:
            file_path = url_for('static', filename=f"{base_path}/{existing_value}")
            html += f"<div>Current File: <a href='{file_path}' target='_blank'>{existing_value}</a></div>"
        html += f"<input type='file' name='{field_name}' class='form-control'><br>"
    elif input_type == 'DD':
        html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"
    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        html += f"<select name='{field_name}' class='form-control'><option value='Yes' {yes_selected}>Yes</option><option value='No' {no_selected}>No</option></select><br>"
    else:
        html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    return html



def generate_question_html224(question, existing_answers, base_path):
    html = f"<div class='question'><h6>{question['question_id']}. {question['text']}</h6>"

    answer_fields = existing_answers if not isinstance(existing_answers, str) else json.loads(existing_answers)

    for idx, answer_field in enumerate(answer_fields):
        input_type = answer_field['type']
        existing_value = answer_field.get('value', '')
        field_name = f"{question['id']}_{idx + 1}_{input_type}"
        html += generate_input_html(input_type, field_name, existing_value, base_path)

    html += "</div><hr>"
    return html

def generate_input_html224(input_type, field_name, existing_value, base_path):
    html = ""
    if input_type == 'TLT':
        html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
    elif input_type == 'NI(0-10)':
        options = ''.join(f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in range(11))
        html += f"<select name='{field_name}' class='form-control'>{options}</select><br>"
    elif input_type == 'FILE':
        if existing_value:
            file_path = url_for('static', filename=f"{base_path}/{existing_value}")
            html += f"<div>Current File: <a href='{file_path}' target='_blank'>{existing_value}</a></div>"
        html += f"<input type='file' name='{field_name}' class='form-control'><br>"
    elif input_type == 'DD':
        html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"
    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        html += f"<select name='{field_name}' class='form-control'><option value='Yes' {yes_selected}>Yes</option><option value='No' {no_selected}>No</option></select><br>"
    else:
        html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    return html



19APR2024


def generate_question_html202(question, existing_answers, base_path):
    html = f"<div class='question'><h6>{question['question_id']}. {question['text']}</h6>"

    # Decode existing_answers if it is a JSON string
    answer_fields = existing_answers if not isinstance(existing_answers, str) else json.loads(existing_answers)

    # Define a list of labels that you would use for each answer field
    labels = ['a.', 'b.', 'c.', 'd.', 'e.', 'f.', 'g.', 'h.', 'i.', 'j.', 'k.', 'l.', 'm.', 'n.', 'o.', 'p.', 'q.', 'r.']

    for idx, answer_field in enumerate(answer_fields):
        label = labels[idx] if idx < len(labels) else f"{chr(97 + idx)}."
        input_type = answer_field['type']
        existing_value = answer_field.get('value', '')
        field_name = f"{question['id']}_{idx + 1}_{input_type}"

        # Append the label before generating the input HTML
        html += f"<div class='answer-label'>{label}</div>"
        html += generate_input_html(input_type, field_name, existing_value, base_path)

    html += "</div><hr>"
    return html



# 17Apr2024

def create_dynamic_form(form: BaseSurveyForm, data: Dict[str, Any]) -> str:
    # print('data passed to create_dynamic_form', data)
    html_form = f"{form.hidden_tag()}"

    questions = data.get('questions', [])
    form_data = data.get('form_data', {})  # This dictionary contains existing answers keyed by question IDs

    for question in questions:
        # Use existing answers if available, otherwise use default structure from the question
        existing_answers = form_data.get(str(question['id']), question['answer_fields'])
        html_form += generate_question_html(question, existing_answers)

    html_form += "<div class='button-group'>"
    html_form += "<button type='submit' class='btn btn-primary'>Save</button>"
    html_form += "<button type='submit' class='btn btn-primary'>Submit</button>"
    html_form += "</div>"

    return html_form

def generate_question_html(question, existing_answers):
    html = f"<div class='question'><h6>{question['question_id']}. {question['text']}</h6>"

    # Ensure that existing_answers is a list of answers
    if isinstance(existing_answers, str):
        try:
            answer_fields = json.loads(existing_answers)
        except json.JSONDecodeError:
            raise ValueError("Parsing error: 'existing_answers' is not valid JSON.")
    else:
        answer_fields = existing_answers

    for idx, answer_field in enumerate(answer_fields):
        input_type = answer_field['type']
        existing_value = answer_field.get('value', '')
        field_id = question['id']
        field_name = f"{field_id}_{idx + 1}_{input_type}"

        html += generate_input_html(input_type, field_name, existing_value)

    html += "</div><hr>"
    return html


def generate_input_html(input_type, field_name, existing_value):
    if input_type == 'TLT':
        return f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
    elif input_type == 'NI(0-10)':
        options = ''.join(f"<option value='{num}' {'selected' if str(num) == existing_value else ''}>{num}</option>" for num in range(11))
        return f"<select name='{field_name}' class='form-control'>{options}</select><br>"
    elif input_type == 'FILE':
        if existing_value:
            # Display a link to the existing file and an option to replace it
            file_path = url_for('static', filename='uploads/' + existing_value)  # Modify as necessary
            html += f"<div>Current File: <a href='{file_path}' target='_blank'>{existing_value}</a></div>"
        html += f"<input type='file' name='{field_name}' class='form-control'><br>"

    elif input_type == 'DD':
        return f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"
    elif input_type == 'BYN':
        yes_selected = "selected" if "Yes" == existing_value else ""
        no_selected = "selected" if "No" == existing_value else ""
        return f"<select name='{field_name}' class='form-control'><option value='Yes' {yes_selected}>Yes</option><option value='No' {no_selected}>No</option></select><br>"
    else:
        return f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

#endo of 17Apr2024

def create_dynamic_form_001(form: BaseSurveyForm, data: Dict[str, Any]) -> str:
    html_form = f"{form.hidden_tag()}"

    # Debugging: Check what data looks like
    # print("Data received:", data)

    # Ensure questions are available and parsed correctly
    questions = data.get('questions', [])
    if not questions:
        print("No questions found in data.")

    for question in questions:
        # print("Question found:", question)  # Debugging output to confirm questions are present

        # If necessary, parse the answer_type field from JSON string to Python object
        # This may not be needed based on your recent descriptions; it seems answer_type is already properly formatted
        # if isinstance(question.get('answer_type'), str):
        #     try:
        #         question['answer_type'] = json.loads(question['answer_type'])
        #         print("Parsed answer_type:", question['answer_type'])
        #     except json.JSONDecodeError:
        #         print(f"JSON decoding error in question {question['question_id']}")
        #         continue  # Skip this question on JSON errors

        #print("Question being passed to generate_question_html:", question)  # Confirm each question reaches here
        html_form += generate_question_html(question)

    html_form += "<div class='button-group'>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSave()'>Save</button>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSubmit()'>Submit</button>"
    html_form += "</div>"

    return html_form



def generate_question_html_old(question):
    # Initialize html variable as an empty string to build HTML content
    html = ""

    # Add the question text as a header or label before the input fields
    question_text = question['text']
    question_id = question['question_id']
    html += f"<div class='question'><h6>{question_id}. {question_text}</h6>"

    # Ensure that answer_fields is properly parsed into a Python object
    if isinstance(question['answer_fields'], str):
        try:
            answer_fields = json.loads(question['answer_fields'])
        except json.JSONDecodeError:
            raise ValueError("Parsing error: 'answer_fields' is not valid JSON.")
    else:
        answer_fields = question['answer_fields']

    for answer_field in answer_fields:
        input_type = answer_field['type']
        existing_value = answer_field.get('value', '')
        field_id = question['id']
        answer_index = answer_fields.index(answer_field) + 1
        field_name = f"{field_id}_{answer_index}_{input_type}"

        # Generate HTML for each type of input based on 'input_type'
        if input_type == 'TLT':
            html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
        elif input_type == 'NI(0-10)':
            html += f"<select name='{field_name}' class='form-control'>"
            for num in range(11):  # Options from 0 to 10
                selected = "selected" if str(num) == existing_value else ""
                html += f"<option value='{num}' {selected}>{num}</option>"
            html += "</select><br>"
        elif input_type == 'FILE':
            html += f"<input type='file' name='{field_name}' class='form-control'><br>"
        elif input_type == 'DD':
            html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"
        elif input_type == 'BYN':
            html += f"<select name='{field_name}' class='form-control'>"  # Added missing f-string prefix
            for option in ["Yes", "No"]:  # Assuming these are the only two options
                selected = "selected" if option == existing_value else ""
                html += f"<option value='{option}' {selected}>{option}</option>"
            html += "</select><br>"

        else:
            html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    # Close the question div and add a horizontal rule for separation
    html += "</div><hr>"
    return html



def generate_question_html334(question):
    # Ensure that answer_fields is properly parsed into a Python object
    if isinstance(question['answer_fields'], str):
        try:
            answer_fields = json.loads(question['answer_fields'])
        except json.JSONDecodeError:
            raise ValueError("Parsing error: 'answer_fields' is not valid JSON.")
    else:
        answer_fields = question['answer_fields']

    for answer_field in answer_fields:
        # Now answer_field should be a dictionary, and this should work without error
        input_type = answer_field['type']
        existing_value = answer_field.get('value', '')
        field_id = question['id']
        answer_index = answer_fields.index(answer_field) + 1
        field_name = f"{field_id}_{answer_index}_{input_type}"

        # Further processing to generate HTML based on input_type, etc.
        # Construct your HTML or further processing here
        # Example: Generate HTML for each type of input
        if input_type == 'TLT':
            html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
        elif input_type == 'NI(0-10)':
            html += f"<select name='{field_name}' class='form-control'>"
            for num in range(11):  # Options from 0 to 10
                selected = "selected" if str(num) == existing_value else ""
                html += f"<option value='{num}' {selected}>{num}</option>"
            html += "</select><br>"

        elif input_type == 'FILE':
            html += f"<input type='file' name='{field_name}' class='form-control'><br>"

        elif input_type == 'DD':
            html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"

        else:
            html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    html += "</div><hr>"
    return html




def generate_question_html222(question: Dict[str, Any]) -> str:
    html = f"<div class='form-group'><label for='{question['question_id']}'>{question['text']}</label><br>"

    # Attempt to decode the JSON-encoded answer_fields
    try:
        answer_details = json.loads(question['answer_fields'])
    except json.JSONDecodeError:
        print(f"Error decoding JSON for question {question['question_id']}")
        return html + "</div><hr>"  # Return partial HTML if parsing fails

    # Process each item in answer_details, assuming multiple answers could be present
    for detail in answer_details:
        for answer_index, answer_type in enumerate(detail['answer_type'], start=1):
            field_id = question['id'] #was question_id, which is WRONG
            input_type = answer_type['type']
            existing_value = answer_type.get('value', '')
            field_name = f"{field_id}_{answer_index}_{input_type}"

            # Check for various input types including the datepicker
            if input_type == 'TLT':
                html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"

            elif input_type == 'NI(0-10)':
                html += f"<select name='{field_name}' class='form-control'>"  # Ensure `f` for f-string is present
                for num in range(11):  # Options from 0 to 10
                    selected = "selected" if str(num) == existing_value else ""
                    html += f"<option value='{num}' {selected}>{num}</option>"
                html += "</select><br>"

            elif input_type == 'BYN':
                html += f"<select name='{field_name}' class='form-control'>"  # Added missing f-string prefix
                for option in ["Yes", "No"]:  # Assuming these are the only two options
                    selected = "selected" if option == existing_value else ""
                    html += f"<option value='{option}' {selected}>{option}</option>"
                html += "</select><br>"

            elif input_type == 'FILE':
                html += f"<input type='file' name='{field_name}' class='form-control'><br>"

            elif input_type == 'DD':
                html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"

            else:
                html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    html += "</div><hr>"
    return html



def create_dynamic_form100_101(form: BaseSurveyForm, data: Dict[str, Any]) -> str:
    html_form = f"{form.hidden_tag()}"

    # Debugging: Check what data looks like
    print("Data received:", data)

    # Ensure questions are available and parsed correctly
    questions = data.get('questions', [])
    if not questions:
        print("No questions found in data.")

    for question in questions:
        print("Question found:", question)  # Debugging output to confirm questions are present

        # If necessary, parse the answer_type field from JSON string to Python object
        # This may not be needed based on your recent descriptions; it seems answer_type is already properly formatted
        # if isinstance(question.get('answer_type'), str):
        #     try:
        #         question['answer_type'] = json.loads(question['answer_type'])
        #         print("Parsed answer_type:", question['answer_type'])
        #     except json.JSONDecodeError:
        #         print(f"JSON decoding error in question {question['question_id']}")
        #         continue  # Skip this question on JSON errors

        print("Question being passed to generate_question_html:", question)  # Confirm each question reaches here
        html_form += generate_question_html(question)

    html_form += "<div class='button-group'>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSave()'>Save</button>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSubmit()'>Submit</button>"
    html_form += "</div>"

    return html_form




def generate_question_html101(question: Dict[str, Any]) -> str:
    html = f"<div class='form-group'><label for='{question['question_id']}'>{question['text']}</label><br>"

    # Decode the JSON-encoded answer_fields
    try:
        answer_details = json.loads(question['answer_fields'])
    except json.JSONDecodeError:
        print(f"Error decoding JSON for question {question['question_id']}")
        return html + "</div><hr>"  # Return partial HTML if parsing fails

    # Process each item in answer_details
    for detail in answer_details:
        for answer_index, answer_type in enumerate(detail['answer_type'], start=1):
            field_id = question['question_id']
            input_type = answer_type['type']
            existing_value = answer_type.get('value', '')
            field_name = f"{field_id}_{answer_index}_{input_type}"

            if input_type == 'TLT':
                html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
            elif input_type == 'NI(0-10)':
                html += "<select name='{field_name}' class='form-control'>"
                for num in range(11):  # Options from 0 to 10
                    selected = "selected" if str(num) == existing_value else ""
                    html += f"<option value='{num}' {selected}>{num}</option>"
                html += "</select><br>"
            elif input_type == 'BYN':
                html += "<select name='{field_name}' class='form-control'>"
                for option in ["Yes", "No"]:
                    selected = "selected" if option == existing_value else ""
                    html += f"<option value='{option}' {selected}>{option}</option>"
                html += "</select><br>"
            elif input_type == 'FILE':
                html += f"<input type='file' name='{field_name}' class='form-control'><br>"
            else:
                html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    html += "</div><hr>"
    return html


import json

def generate_question_html100(question: Dict[str, Any]) -> str:
    html = f"<div class='form-group'><label for='{question['question_id']}'>{question['text']}</label><br>"

    # Parse the answer_fields from JSON string to Python object
    try:
        answer_fields = json.loads(question['answer_fields'])
    except json.JSONDecodeError:
        print(f"Error decoding JSON for question {question['question_id']}")
        return html + "</div><hr>"  # Return the partial HTML for this question if parsing fails

    print('answer fields json loaded', answer_fields)
    # Process each item in answer_fields assuming it's a list of dictionaries with answer types
    for answer_index, answer_field in enumerate(answer_fields, start=1):
        input_type = answer_field['answer_type'][0]['type']  # Extract type from the nested structure
        existing_value = answer_field['answer_type'][0].get('value', '')
        field_id = question['question_id']
        field_name = f"{field_id}_{answer_index}_{input_type}"

        if input_type == 'TLT':
            html += f"<textarea name='{field_name}' class='form-control'>{existing_value}</textarea><br>"
        elif input_type == 'NI(0-10)':
            html += "<select name='{field_name}' class='form-control'>"
            for num in range(11):  # Options from 0 to 10
                selected = "selected" if str(num) == existing_value else ""
                html += f"<option value='{num}' {selected}>{num}</option>"
            html += "</select><br>"
        elif input_type == 'BYN':
            html += "<select name='{field_name}' class='form-control'>"
            for option in ["Yes", "No"]:
                selected = "selected" if option == existing_value else ""
                html += f"<option value='{option}' {selected}>{option}</option>"
            html += "</select><br>"
        elif input_type == 'FILE':
            html += f"<input type='file' name='{field_name}' class='form-control'><br>"
        elif input_type == 'DD':  # Assuming 'DD' means 'Date'
            html += f"<input type='date' name='{field_name}' value='{existing_value}' class='form-control'><br>"
        else:
            html += f"<input type='text' name='{field_name}' value='{existing_value}' class='form-control' autocomplete='off'><br>"

    html += "</div><hr>"
    return html


# Example usage with your provided dictionary format
# question_data = json.loads('[{"id": 17, "question_id": "S11-A11", "text": "Governance - Struttura gestore - Struttura ordinaria", "answer_type": [{"type": "TLT", "value": ""}, {"type": "NI(0-10)", "value": ""}, {"type": "FILE", "value": ""}, {"type": "BYN", "value": ""}, {"type": "TST", "value": ""}]}]')[0]

def generate_question_html223(question: Dict[str, Any]) -> str:
    # Start with a div for form-group for better CSS management
    html = f"<div class='form-group'><label for='{question['question_id']}'>{question['text']}</label><br>"

    # Parsing the answer_fields JSON to process each type of input
    answer_fields_dict = json.loads(question['answer_fields'])

    for answer_index, answer_field in enumerate(answer_fields_dict, start=1):
        print("answer_field:", answer_field)

        field_id = question['id']
        if isinstance(answer_field, dict):
            answer_type_list = answer_field.get('answer_type', [])
            if answer_type_list:
                # Assuming there's only one dictionary in the list for simplicity
                answer_type_dict = answer_type_list[0]
                control_type = answer_type_dict.get('type', '').upper()  # Ensure upper case for uniformity
            else:
                # Handle the case where answer_type_list is empty
                control_type = ''
        else:
            # Handle the case where answer_field is not a dictionary
            control_type = ''

        # Build the question_id as described (n_m_t)
        question_id = f"{field_id}_{answer_index}_{control_type}"
        print('question_id', question_id)

        field_full_name = question_id
        existing_value = answer_field.get('value', '')

        # Determining the input type based on control_type
        input_type = 'file' if control_type == 'FILE' else 'text'
        css_class = 'form-control'

        # Appending additional classes based on specific date/time controls
        if control_type in ['DT', 'TT', 'DD']:
            css_class += {'DT': ' datetimepicker', 'TT': ' timepicker', 'DD': ' datepicker'}.get(control_type, '')

        # Create the input tag with dynamic classes
        html += f"<input type='{input_type}' name='{field_full_name}' value='{existing_value}' class='{css_class}' autocomplete='off'><br>"

        # Handling numerical inputs and select options
        if control_type in ['NI', 'NI(0-10)']:
            html += f"<input type='number' name='{field_full_name}' value='{existing_value}'><br>"
        elif control_type == 'BYN':
            html += "<select name='{field_full_name}'>"
            for option in ["", "Yes", "No"]:
                selected = "selected" if option == existing_value else ""
                html += f"<option value='{option}' {selected}>{option}</option>"
            html += "</select><br>"

    # Close the form-group div and add a horizontal rule for separation
    html += "</div><hr>"
    return html



def generate_question_html_rezerva(question):
    """Generates HTML for a single question based on the type and other metadata."""
    field_id = question['id']
    field_name = f"question_{field_id}"
    field_label = question['text']
    answer_fields = json.loads(question['answer_fields'])

    html = f"<label for='{field_name}'>{field_label}</label><br>"
    for answer_field in answer_fields:
        control_type = answer_field['type'].upper()
        field_full_name = f"{field_id}_{control_type}"
        existing_value = answer_field.get('value', '')

        # Determine the correct input type and additional classes
        if control_type == 'FILE':
            input_type = 'file'
            css_class = 'form-control'
        elif control_type == 'DT':
            input_type = 'text'
            css_class = 'form-control datetimepicker'
        elif control_type == 'TT':
            input_type = 'text'
            css_class = 'form-control timepicker'
        elif control_type == 'DD':
            input_type = 'date'
            css_class = 'form-control'
        elif control_type == 'TLT' or control_type == 'TST':
            input_type = 'text'
            css_class = 'form-control'
        elif control_type == 'NI':
            input_type = 'number'
            css_class = 'form-control'
        elif control_type == 'BYN':
            html += f"<select name='{field_full_name}' class='form-control'>"
            options = ["", "Yes", "No"]
            for option in options:
                selected = "selected" if option == existing_value else ""
                html += f"<option value='{option}' {selected}>{option}</option>"
            html += "</select><br>"
            continue  # Skip the normal input append for select dropdown
        else:
            input_type = 'text'  # Default fallback
            css_class = 'form-control'

        # Append the appropriate input type to the HTML string
        html += f"<input type='{input_type}' name='{field_full_name}' value='{existing_value}' class='{css_class}' autocomplete='off'><br>"

    html += "<hr style='border-top: 1px solid blue;'>"
    return html

def create_dynamic_form778(data: List[QuestionForm], form_data: Dict[str, Any] = None) -> str:
    # Ensure form_data is initialized before using it
    if form_data is None:
        form_data = {}

    html_form = "<form id='questionnaireForm' method='post'>"

    # Include CSRF Token (assuming Flask-WTF is configured to handle CSRF protection)
    csrf_token = form_data.get('csrf_token', '')
    html_form += f"<input type='hidden' name='csrf_token' value='{csrf_token}'>"

    # Adding hidden fields for identifiers
    html_form += f"<input type='hidden' name='questionnaire_id' value='{form_data.get('questionnaire_id', '')}'>"
    html_form += f"<input type='hidden' name='company_id' value='{form_data.get('company_id', '')}'>"
    html_form += f"<input type='hidden' name='user_id' value='{form_data.get('user_id', '')}'>"
    html_form += f"<input type='hidden' name='action_id' value='{form_data.get('action_id', 'none')}'>"

    # Generate dynamic fields based on input data
    for question_data in data:
        field_id = question_data['id']
        field_name = question_data['question_id']
        field_label = question_data['text']

        # Add label for the question
        html_form += f"<label for='{field_name}'>{field_label}</label><br>"

        # Parse the answer_fields JSON string
        if question_data['answer_fields']:
            answer_fields_dict = json.loads(question_data['answer_fields'])

            # Create controls based on answer_fields
            answer_counter = 0
            for index, answer_field in enumerate(answer_fields_dict):
                if isinstance(answer_field, dict):
                    control_types = answer_field.get('answer_type', [])
                    for control_type_data in control_types:
                        control_type = control_type_data.get('type')
                        control_type = control_type.upper() if control_type else None
                        answer_counter += 1

                        # Determine the name to be used for form field and retrieve any existing data
                        field_full_name = f"{field_id}_{answer_counter}_{control_type}"
                        existing_value = form_data.get(field_full_name, "")

                        # Append control label and input based on type
                        if control_type in ['TLT', 'TST', 'FILE', 'TT', 'DT', 'DD']:
                            input_type = 'file' if control_type == 'FILE' else 'text'
                            css_class = 'form-control'
                            if control_type == 'DT':
                                css_class += ' datetimepicker'
                            elif control_type == 'TT':
                                css_class += ' timepicker'
                            elif control_type == 'DD':
                                css_class += ' datepicker'
                            html_form += f"<input type='{input_type}' name='{field_full_name}' value='{existing_value}' class='{css_class}' autocomplete='off'><br>"
                        elif control_type == 'NI' or control_type == 'NI(0-10)':
                            if control_type == 'NI':
                                html_form += f"<input type='number' name='{field_full_name}' value='{existing_value}'><br>"
                            else:
                                html_form += f"<select name='{field_full_name}'>"
                                for i in range(11):  # 0 to 10
                                    selected = "selected" if str(i) == existing_value else ""
                                    html_form += f"<option value='{i}' {selected}>{i}</option>"
                                html_form += "</select><br>"
                        elif control_type == 'BYN':
                            html_form += f"<select name='{field_full_name}'>"
                            options = ["", "Yes", "No"]
                            for option in options:
                                selected = "selected" if option == existing_value else ""
                                html_form += f"<option value='{option}' {selected}>{option}</option>"
                            html_form += "</select><br>"

            # Add a separator between questions
            html_form += "<hr style='border-top: 1px solid blue;'>"

    # Buttons
    html_form += "<div class='button-group'>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='return confirmSave();'>Save</button>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='return confirmSubmit();'>Submit</button>"
    html_form += "</div>"
    html_form += "</form>"
    return html_form



def create_dynamic_form667(data: List[QuestionForm], form_data: Dict[str, Any] = None) -> str:
    html_form = "<form id='questionnaireForm' method='post'>"

    if form_data is None:
        form_data = {}

    for question_data in data:
        field_id = question_data['id']
        field_name = question_data['question_id']
        field_label = question_data['text']

        # Add label for the question
        html_form += f"<label for='{field_name}'>{field_label}</label><br>"

        # Parse the answer_fields JSON string
        if question_data['answer_fields']:
            answer_fields_dict = json.loads(question_data['answer_fields'])

            # Create controls based on answer_fields
            answer_counter = 0
            for index, answer_field in enumerate(answer_fields_dict):
                if isinstance(answer_field, dict):
                    control_types = answer_field.get('answer_type', [])
                    for control_type_data in control_types:
                        control_type = control_type_data.get('type')
                        control_type = control_type.upper() if control_type else None
                        answer_counter += 1

                        # Determine the name to be used for form field and retrieve any existing data
                        field_full_name = f"{field_id}_{answer_counter}_{control_type}"
                        existing_value = form_data.get(field_full_name, "")

                        # Append control label and input based on type
                        if control_type in ['TLT', 'TST', 'FILE', 'TT', 'DT', 'DD']:
                            input_type = 'file' if control_type == 'FILE' else 'text'
                            css_class = 'form-control'
                            if control_type == 'DT':
                                css_class += ' datetimepicker'
                            elif control_type == 'TT':
                                css_class += ' timepicker'
                            elif control_type == 'DD':
                                css_class += ' datepicker'
                            html_form += f"<input type='{input_type}' name='{field_full_name}' value='{existing_value}' class='{css_class}' autocomplete='off'><br>"
                        elif control_type == 'NI' or control_type == 'NI(0-10)':
                            if control_type == 'NI':
                                html_form += f"<input type='number' name='{field_full_name}' value='{existing_value}'><br>"
                            else:
                                html_form += f"<select name='{field_full_name}'>"
                                for i in range(11):  # 0 to 10
                                    selected = "selected" if str(i) == existing_value else ""
                                    html_form += f"<option value='{i}' {selected}>{i}</option>"
                                html_form += "</select><br>"
                        elif control_type == 'BYN':
                            html_form += f"<select name='{field_full_name}'>"
                            options = ["", "Yes", "No"]
                            for option in options:
                                selected = "selected" if option == existing_value else ""
                                html_form += f"<option value='{option}' {selected}>{option}</option>"
                            html_form += "</select><br>"
                        print('field name', field_full_name, 'value', existing_value, 'type', control_type)
            # Add a separator between questions
            html_form += "<hr style='border-top: 1px solid blue;'>"
        else:
            print(f"No answer fields defined for question ID {field_id}")

    html_form += "<div class='button-group'>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSave()'>Save</button>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSubmit()'>Submit</button>"
    html_form += "</div>"

    html_form += "</form>"
    return html_form



def create_dynamic_form223(data: List[QuestionForm], form_data: Dict[str, Any] = None) -> str:
    html_form = "<form id='questionnaireForm' method='post'>"

    if form_data is None:
        form_data = {}

    for question_data in data:
        if question_data['answer_fields'] is not None:  # Ensure data is not None
            field_id = question_data['id']  # Access 'id' field using dictionary indexing
            field_name = question_data['question_id']  # Access 'question_id' field using dictionary indexing
            field_label = question_data['text']  # Access 'text' field using dictionary indexing

            # Add label for the question
            html_form += f"<label>{field_name}. {field_label}</label><br>"

            # Parse the answer_fields JSON string
            answer_fields_dict = json.loads(question_data['answer_fields'])

            # Create controls based on answer_fields
            answer_counter = 0  # Initialize counter for answer labels
            answer_text = ''
            for index, answer_field in enumerate(answer_fields_dict):
                if isinstance(answer_field, dict):  # Check if answer_field is a dictionary
                    control_types = answer_field.get('answer_type', [])  # Get the list of answer types
                    for control_type_data in control_types:
                        control_type = control_type_data.get('type')  # Get the control type
                        if answer_counter == 0:
                            answer_text = ''
                        elif answer_counter == 1:
                            answer_text = 'Score'
                        elif answer_counter == 2:
                            answer_text = 'File'
                        elif answer_counter == 3:
                            answer_text = 'Auditor comment'

                        control_label = f"{answer_text}   "  # Generate label for answer field
                        answer_counter += 1  # Increment answer counter

                        if control_type:  # Check if control_type is not None
                            control_type = control_type.upper()

                            # Append control label
                            html_form += f"<label>{control_label}</label>"

                            # Append control field based on control type
                            if control_type == 'TLT':
                                # html_form += f"<input type='text' name='{field_id}_{answer_counter}_{control_type}' class='my-custom-statement'><br>"
                                # multiple lines
                                html_form += f"<textarea name='{field_id}_{answer_counter}_{control_type}' class='my-custom-textarea'></textarea><br>"

                            elif control_type == 'TST':
                                html_form += f"<textarea name='{field_id}_{answer_counter}_{control_type}' class='my-custom-shorttextarea'></textarea><br>"


                            elif control_type == 'NI':
                                html_form += f"<input type='number' name='{field_id}_{answer_counter}_{control_type}'><br>"

                            elif control_type == 'NI(0-10)':
                                # Create a SelectField with options from 0 to 10
                                options = [(str(i), str(i)) for i in range(11)]  # Range from 0 to 10 (inclusive)
                                html_form += f"<select name='{field_id}_{answer_counter}_{control_type}'>"
                                for option_value, option_label in options:
                                    html_form += f"<option value='{option_value}'>{option_label}</option>"
                                html_form += "</select><br>"

                            elif control_type == 'BYN':
                                # Create a SelectField with options for Yes, No, and Blank
                                html_form += f"<select name='{field_id}_{answer_counter}_{control_type}'>"
                                html_form += "<option value=''></option>"
                                html_form += "<option value='Yes'>Yes</option>"
                                html_form += "<option value='No'>No</option>"
                                html_form += "</select><br>"

                            elif control_type == 'DD':
                                html_form += f"<input class='form-control datepicker' type='text' name='{field_id}_{answer_counter}_{control_type}' autocomplete='off'><br>"

                            elif control_type == 'DT':
                                html_form += f"<input class='form-control datetimepicker' type='text' name='{field_id}_{answer_counter}_{control_type}' autocomplete='off'><br>"

                            elif control_type == 'TT':
                                html_form += f"<input class='form-control timepicker' type='text' name='{field_id}_{answer_counter}_{control_type}' autocomplete='off'><br>"

                            elif control_type == 'FILE':
                                # Create a FileField for file uploads
                                html_form += f"<input type='file' name='{field_id}_{answer_counter}_{control_type}'><br>"

                            else:
                                html_form += f"<input type='text' name='{field_id}_{answer_counter}_{control_type}'><br>"
                            # Add cases for other control types

            # Add a thin red line between questions
            html_form += "<hr style='border-top: 1px solid blue;'>"

        else:
            # Handle the case where no answer fields are available
            answer_fields_dict = {}  # Use an empty dictionary or set a default
            print("Warning: No answer fields data found for question.", question_data['id'])
    # Continue with the rest of the function

    return html_form


def create_dynamic_form222(data: List[QuestionForm], form_data: Dict[str, Any] = None) -> str:
    html_form = "<form id='questionnaireForm' method='post'>"

    if form_data is None:
        form_data = {}

    for question_data in data:
        field_id = question_data['id']  # Access 'id' field using dictionary indexing
        field_name = question_data['question_id']  # Access 'question_id' field using dictionary indexing
        field_label = question_data['text']  # Access 'text' field using dictionary indexing

        # Add label for the question
        html_form += f"<label>{field_name}. {field_label}</label><br>"

        # Parse the answer_fields JSON string
        answer_fields_dict = json.loads(question_data['answer_fields'])

        # Create controls based on answer_fields
        answer_counter = 0  # Initialize counter for answer labels
        answer_text = ''
        for index, answer_field in enumerate(answer_fields_dict):
            if isinstance(answer_field, dict):  # Check if answer_field is a dictionary
                control_types = answer_field.get('answer_type', [])  # Get the list of answer types
                for control_type_data in control_types:
                    control_type = control_type_data.get('type')  # Get the control type
                    if answer_counter == 0:
                        answer_text = ''
                    elif answer_counter == 1:
                        answer_text = 'Score'
                    elif answer_counter == 2:
                        answer_text = 'File'
                    elif answer_counter == 3:
                        answer_text = 'Auditor comment'

                    control_label = f"{answer_text}   "  # Generate label for answer field
                    answer_counter += 1  # Increment answer counter

                    if control_type:  # Check if control_type is not None
                        control_type = control_type.upper()

                        # Append control label
                        html_form += f"<label>{control_label}</label>"

                        # Append control field based on control type
                        if control_type == 'TLT':
                            #html_form += f"<input type='text' name='{field_id}_{answer_counter}_{control_type}' class='my-custom-statement'><br>"
                            #multiple lines
                            html_form += f"<textarea name='{field_id}_{answer_counter}_{control_type}' class='my-custom-textarea'></textarea><br>"

                        elif control_type == 'TST':
                            html_form += f"<textarea name='{field_id}_{answer_counter}_{control_type}' class='my-custom-shorttextarea'></textarea><br>"


                        elif control_type == 'NI':
                            html_form += f"<input type='number' name='{field_id}_{answer_counter}_{control_type}'><br>"

                        elif control_type == 'NI(0-10)':
                            # Create a SelectField with options from 0 to 10
                            options = [(str(i), str(i)) for i in range(11)]  # Range from 0 to 10 (inclusive)
                            html_form += f"<select name='{field_id}_{answer_counter}_{control_type}'>"
                            for option_value, option_label in options:
                                html_form += f"<option value='{option_value}'>{option_label}</option>"
                            html_form += "</select><br>"

                        elif control_type == 'BYN':
                            # Create a SelectField with options for Yes, No, and Blank
                            html_form += f"<select name='{field_id}_{answer_counter}_{control_type}'>"
                            html_form += "<option value=''></option>"
                            html_form += "<option value='Yes'>Yes</option>"
                            html_form += "<option value='No'>No</option>"
                            html_form += "</select><br>"

                        elif control_type == 'DD':
                            html_form += f"<input class='form-control datepicker' type='text' name='{field_id}_{answer_counter}_{control_type}' autocomplete='off'><br>"

                        elif control_type == 'DT':
                            html_form += f"<input class='form-control datetimepicker' type='text' name='{field_id}_{answer_counter}_{control_type}' autocomplete='off'><br>"

                        elif control_type == 'TT':
                            html_form += f"<input class='form-control timepicker' type='text' name='{field_id}_{answer_counter}_{control_type}' autocomplete='off'><br>"

                        elif control_type == 'FILE':
                            # Create a FileField for file uploads
                            html_form += f"<input type='file' name='{field_id}_{answer_counter}_{control_type}'><br>"

                        else:
                            html_form += f"<input type='text' name='{field_id}_{answer_counter}_{control_type}'><br>"
                        # Add cases for other control types

        # Add a thin red line between questions
        html_form += "<hr style='border-top: 1px solid blue;'>"

    # Add save button and submit button inside a div
    '''
    html_form += "<div class='button-group'>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSave()'>Save--</button>"
    html_form += "<button type='submit' class='btn btn-primary' onclick='confirmSubmit()'>Submit--</button>"
    html_form += "</div>"
    '''

    # html_form += f"<input type='text' name='action_id'><br>"

    return html_form




14Apr2024 before review of server side answer_data storage


# Define the form class
# TODO (AFTER TESTS) WHEN FILTERING, ONLY NON SUBMITTED FORMS ARE TO BE SHOWN
# If the form exists but it's submited, then a message is provided
# and no other action is performed
@app.route('/show_survey/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey222(questionnaire_id):

    print(request.form)  # This will print all form data received
    # action_id = request.form.get('action_id')

    if request.method in ['GET', 'POST']:
        today = datetime.now().date()
        user_id = current_user.id
        try:
            company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
        except:
            company_id = None
            pass

    if request.method == 'GET':

        # In your GET branch, add something like this:
        if 'action_id' in session:
            action_id = session['action_id']
        else:
            action_id = 'None'  # Default or initial value as necessary

        print('action_id', action_id)
        # Adjusted query to join QuestionnaireQuestion with Question and sort by question.question_id
        selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
        questionnaire_name = selected_questionnaire.name

        questionnaire_questions = QuestionnaireQuestions.query.filter_by(
            questionnaire_id=questionnaire_id
        ).join(Question).order_by(Question.question_id).all()

        # question_ids = [qq.question.question_id for qq in questionnaire_questions]

        # Extracting Question.id instead of Question.question_id
        question_ids = [qq.question.id for qq in questionnaire_questions]
        print('Sorted question IDs by Question.id based on Question.question_id:', question_ids)

        # TODO added the answer_type here below on 10Apr2024
        # TOO no answers found for question 6: come mai non si scrivono in fase di preparazione delle domande?
        # Use list of dictionaries to represent questions
        # Use list of dictionaries to represent questions
        questions = []
        for question_id in question_ids:

            question = Question.query.get_or_404(question_id)  # Retrieve question by its ID

            # create the JSON field based on answer_type
            # question.answer_fields = build_answer_fields(question)
            # print('qaf', question.answer_fields)

            question_data = {
                'id': question.id,
                'question_id': question.question_id,  # Assuming 'question_id' is what 'create_dynamic_form' expects
                'text': question.text,  # Use actual question text from the database
                'answer_type': question.answer_type,
                'answer_fields': question.answer_fields  # Use actual answer fields from the database
            }
            questions.append(question_data)

        # Commit question structure [changes] to the database (Question)
        db.session.commit()

        # Print statements for debugging
        # print('questions sent to create_dynamic_form are:', questions)
        # print('rendering these questions data:', questions)

        # Generate dynamic form HTML
        dynamic_form_html = create_dynamic_form(questions)
        session['form_data'] = dynamic_form_html

        if 'initial_form_data' not in session:
            print('initial form non in session')
            session['initial_form_data'] = dynamic_form_html

        print('render GET', action_id, company_id, user_id)
        return render_template('survey.html',
                   dynamic_form=dynamic_form_html,
                   questions=questions,
                   questionnaire_id=questionnaire_id,
                   questionnaire_name=questionnaire_name,
                   company_id=company_id,
                   user_id=user_id,
                   action_id=action_id,
                   today=today,
               )

    if request.method == 'POST':
        print("Handling POST request of:")

        print(request.form)  # or print(request.json) if JSON

        action_id = request.form.get('action_id')
        company_id = request.form.get('company_id', type=int)
        user_id = request.form.get('user_id', type=int)

        answer_data_to_save = "{}"  # Default empty JSON

        print('POST data qre, act, comp, usr', questionnaire_id, action_id, company_id, user_id)

        # Dictionary to store answers for each question
        answers_to_save = {}
        for field_name, field_value in request.form.items():
            print('field name and value', field_name, field_value)
            # Check if the field name starts with a digit and is likely to be a question-related field
            if field_name[0].isdigit() and field_name.count('_') == 2:
                parts = field_name.split('_')
                question_id, instance, answer_type = parts  # parts should be like ['1', '1', 'BYN']
                question_key = f"{question_id}_{instance}"  # Create a unique key like '1_1'

                if question_key not in answers_to_save:
                    answers_to_save[question_key] = []

                # Append a dictionary containing both answer_type and field_value
                answers_to_save[question_key].append({
                    'type': answer_type,
                    'value': field_value if field_value else ""
                })

        # Convert the dictionary of answers to a JSON string
        try:
            answer_data_to_save = json.dumps(answers_to_save)
        except Exception as e:
            print(f"An error occurred while creating JSON: {str(e)}")
            answer_data_to_save = "{}"  # Default to empty JSON in case of an error
        finally:
            # print(f"Answer Data to Save: {answer_data_to_save}")
            pass

        # try
        # Check if a record already exists
        existing_answer = Answer.query.filter_by(
            company_id=company_id,
            user_id=user_id,
            questionnaire_id=questionnaire_id
        ).first()

        print('existing answer?', existing_answer, f"to act, comp, user, qstn: {action_id}, {company_id}, {user_id}, {questionnaire_id}")

        session['pending_answer_data'] = {
            'action_id': action_id,
            'company_id': company_id,
            'user_id': user_id,
            'questionnaire_id': questionnaire_id,
            'answer_data': answer_data_to_save
        }

        if existing_answer:
            # If there is existing data, redirect to confirmation page
            print('confirm for existing', questionnaire_id, action_id, company_id, user_id)
            return render_template('confirmation_save_submit.html', **session['pending_answer_data'])
        else:
            # If no confirmation needed, proceed to save answers directly
            print('saving answers with', questionnaire_id, action_id, company_id, user_id)
            save_answers(**session['pending_answer_data'])
            return redirect(url_for('thank_you'))
        # except:
        #     print('Error checking if data exists.')
        #     pass

    return redirect(url_for('open_admin_10.index'))

@app.route('/submit_confirmed', methods=['POST'])
def submit_confirmed222():
    print('submit confirmed')
    if request.form['submit_button'] == 'cancel':
        print('cancel')
        return redirect(url_for('show_survey', questionnaire_id=request.form.get('questionnaire_id')))
    else:
        print('OK')
        action_id = request.form.get('action_id')
        questionnaire_id = request.form.get('questionnaire_id')

        company_id = request.form.get('company_id')
        user_id = request.form.get('user_id')
        answer_data = request.form.get('answer_data')

        print('going to save', action_id, questionnaire_id, company_id, user_id, 'ecc (data)')
        save_answers(questionnaire_id=questionnaire_id, company_id=company_id, user_id=user_id,
                     action_id=action_id, answer_data=answer_data)
        return redirect(url_for('thank_you'))

def save_answers222(**kwargs):
    try:
        # Extracting parameters with default values if not found
        company_id = kwargs.get('company_id')
        user_id = kwargs.get('user_id')
        questionnaire_id = kwargs.get('questionnaire_id')
        action_id = kwargs.get('action_id')
        answer_data = kwargs.get('answer_data', "{}")  # Provide empty JSON as default

        # Assuming `Answer` is a model class for a database table
        submitted = action_id == 'submit'
        answer = Answer.query.filter_by(company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id).first()

        if answer:
            print("Updating existing answer.")
            answer.timestamp = datetime.now()
            answer.answer_data = answer_data
            answer.submitted = submitted
            db.session.commit()
        else:
            print("Creating new answer.")
            new_answer = Answer(
                company_id=company_id,
                user_id=user_id,
                questionnaire_id=questionnaire_id,
                timestamp=datetime.now(),
                submitted=submitted,
                answer_data=answer_data
            )
            db.session.add(new_answer)
            db.session.commit()

            # Assuming 'user_info' is a key in the session that you want to remove
            user_info = session.pop('pending_answer_data', None)  # 'None' is the default return value if 'user_info' is not found

        print("Data saved.")
    except Exception as e:
        print(f"Error saving data: {e}")
        db.session.rollback()
        raise

    return "Data processing complete"  # or redirect, or another appropriate response

# TODO this is alternative to load_survey somehow
# see route in survey.html!



Indicare se nel periodo di riferimento sono stati segnalati malfunzionamenti o guasti delle apparecchiature che hanno comportato la necessità di stimare i quantitativi immessi.
BYN
(Se sì) Specificare quale criterio ha seguito la società di trasporto per l'effettuazione della stima dei quantitativi immessi
TST
(Se sì)  Specificare se tale criterio è stato concordato con la vostra Società
BYN
Indicare se nel periodo di riferimento si sono verificati scostamenti nei quantitativi tra gas immesso nella singola RE.MI. e gas complessivamente distribuito nell’impianto in consegna ai clienti finali
BYN
(Se sì) Specificare se uno o più utenti hanno lamentato problemi di incoerenza tra la quantità di gas fatturato e allocato ai propri clienti, chiedendo alla vostra Società di effettuare verifiche sulla correttezza dei processi di settlement fisico
BYN
(Se sì) In caso positivo fornire riscontri sulle verifiche effettuate e sugli esiti che hanno prodotto
FILE
Altre informazioni
TLT
Scadenza
DD

        # Adjusted query to join QuestionnaireQuestion with Question and sort by question.question_id
        selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
        questionnaire_name = selected_questionnaire.name

        questionnaire_questions = QuestionnaireQuestions.query.filter_by(
            questionnaire_id=questionnaire_id
        ).join(Question).order_by(Question.question_id).all()

        question_ids = [qq.question.question_id for qq in questionnaire_questions]
        print('Sorted question IDs by Question.question_id:', question_ids)




11Apr2024 IMP:

Your provided server-side code looks well-structured and appears to correctly implement the functionality you need, with good use of session management, form handling, and data persistence. However, there are a few adjustments and best practices you might consider to enhance clarity, security, and reliability. Here’s a detailed review and some recommendations:

### Code Review and Recommendations

1. **Clear Separation of GET and POST Logic**:
   - Your `show_survey` function handles both GET and POST methods. It’s usually a good practice to separate these into different functions if the logic becomes too complex. This keeps your code cleaner and easier to maintain.

2. **Session Data Handling**:
   - Be cautious with storing potentially large or sensitive data in the session. Ensure that your session cookie is secure and consider the size of data being stored. Flask sessions are cookie-based by default and have a size limit of about 4KB.
   - Clear the session data (`pending_answer_data`) appropriately after it's no longer needed to avoid stale data issues.

3. **Confirmation Handling**:
   - The use of `session['pending_answer_data']` for passing data to the confirmation page is good. Just make sure to clear this data if the user cancels the action to prevent unintended reuse of old data.

4. **HTML Form Handling in `confirmation_save_submit.html`**:
   - Ensure that your HTML form in `confirmation_save_submit.html` includes CSRF tokens if you are using Flask-WTF or similar for form handling to prevent Cross-Site Request Forgery (CSRF) attacks.
   - Verify that all necessary hidden fields are correctly populated and that they match the names expected in the `submit_confirmed` route.

5. **Error Handling and Logging**:
   - Your error handling in `save_answers` is robust. Consider also logging these errors to a file or external logging service for better traceability and auditing, especially in production environments.

6. **Redundancy in POST Data Handling**:
   - You are fetching `action_id` twice in the `POST` section of `show_survey`. Remove redundant lines to clean up the code.
   - Be aware of the potential for bugs if `existing_data` is used without being defined (as seen in your last `if existing_data:` check). Make sure to define and check this variable correctly.

7. **Redirect After POST**:
   - Using `redirect(url_for('thank_you'))` after successful handling in `submit_confirmed` is good practice as it adheres to the Post/Redirect/Get pattern, preventing form resubmission issues.

### Sample Adjusted Code Snippet

Here’s a small tweak in the `show_survey` function for clarity and bug prevention:

```python
@app.route('/show_survey/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey(questionnaire_id):
    print('Request form, method is:', request.method)
    print(request.form)  # Debugging: Print all form data received

    today = datetime.now().date()
    user_id = current_user.id
    company_id = CompanyUsers.query.filter_by(user_id=user_id).first().company_id if current_user else None

    if request.method == 'GET':
        action_id = session.get('action_id', 'None')  # Use session.get for safer access
        ...
        return render_template('survey.html', **locals())

    elif request.method == 'POST':
        print("Handling POST request")
        print(f"Form Data: {request.form}")
        action_id = request.form.get('action_id')
        ...

        existing_answer = Answer.query.filter_by(company_id=company_id, user_id=user_id, questionnaire_id=questionnaire_id).first()
        if existing_answer:
            return render_template('confirmation_save_submit.html', **session['pending_answer_data'])
        else:
            save_answers(**session['pending_answer_data'])
            return redirect(url_for('thank_you'))

    return redirect(url_for('open_admin_10.index'))
```

### Final Notes

- **Testing**: Extensively test each part of this flow, particularly the edge cases such as what happens when data is missing or invalid.
- **Security**: Always sanitize and validate any data coming from the user to prevent injection attacks and ensure data integrity.

Overall, your code setup is on the right track. Just refine it based on these suggestions for enhanced performance and reliability.


def save_answers222(request, questionnaire_id, company_id, user_id, action_id, answer_data):

    print('two, action is', action_id)
    try:
        # Check if a record already exists
        existing_answer = Answer.query.filter_by(
            company_id=company_id,
            user_id=user_id,
            questionnaire_id=questionnaire_id
        ).first()

        if existing_answer:

            print('2.2 existence confirmed', 'rendering', questionnaire_id, action_id)
            return render_template('confirmation_save_submit.html', questionnaire_id=questionnaire_id)
            print('rendered', questionnaire_id)
        else:
            print('2.3 existence not confirmed')
            # Create Answer instance and save to the database

            submitted = False
            if action_id == 'submit':
                submitted = True

            answer = Answer(
                company_id=company_id,
                user_id=user_id,
                questionnaire_id=questionnaire_id,
                timestamp=datetime.now(),
                submitted=submitted,
                answer_data=answer_data
            )
            print('three')
            db.session.add(answer)
            db.session.commit()

            print('four creating audit log', company_id, user_id, inline_data_string)
            inline_data_string = f"At {datetime.now()} a type '{questionnaire_id}' survey "
            inline_data_string += f"was saved by the user {user_id} ({company_id}. "

            # Now you have the inline form data as a string, you can use it to create a system message
            # For example, you can use it to create a message using your `create_notification` function

            create_notification(
                db.session,
                company_id=company_id,
                user_id=user_id,
                sender="System",
                message_type="noticeboard",
                subject="Survey Saved",
                body=inline_data_string,
                lifespan='one-off'
            )
            print('five zer0')

            create_audit_log(
                db.session,
                company_id=company_id,
                user_id=user_id,
                base_data_id=None,
                workflow_id=None,
                step_id=None,
                action='save',
                details=inline_data_string
            )
            print('five one')

    except Exception as e:
        # Flash an error message if an exception occurs
        print('nine - rollback')
        flash(f'An error occurred: {str(e)}', 'danger')

        # Rollback the session in case of an error
        db.session.rollback()




10Apr2024 14h11m


# Define the form class
@app.route('/show_survey222/<int:questionnaire_id>', methods=['GET', 'POST'])
def show_survey222(questionnaire_id):

    print('request form, method is:', request.method)
    print(request.form)  # This will print all form data received
    action_id = request.form.get('action_id')

    if request.method in ['GET', 'POST']:
        today = datetime.now().date()
        user_id = current_user.id
        try:
            company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
        except:
            company_id = None
            pass

    if request.method == 'GET':

        # In your GET branch, add something like this:
        if 'action_id' in session:
            action_id = session['action_id']
        else:
            action_id = 'None'  # Default or initial value as necessary

        # Populate it back to the session in your POST branch:
        # session['action_id'] = action_id  # After retrieving and using it

        selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
        questionnaire_name = selected_questionnaire.name
        print('questionnaire_name', questionnaire_name)
        question_ids = [qq.question_id for qq in selected_questionnaire.questionnaire_questions]
        # Sort question_ids in ascending order
        question_ids.sort()

        # Use list of dictionaries to represent questions
        # Use list of dictionaries to represent questions
        questions = []
        for question_id in question_ids:
            question = Question.query.get_or_404(question_id)  # Retrieve question by its ID
            question_data = {
                'id': question.id,
                'question_id': question.question_id,  # Assuming 'question_id' is what 'create_dynamic_form' expects
                'text': question.text,  # Use actual question text from the database
                'answer_fields': question.answer_fields  # Use actual answer fields from the database
            }
            questions.append(question_data)

        # Commit question structure [changes] to the database (Question)
        db.session.commit()

        # Print statements for debugging
        # print('questions sent to create_dynamic_form are:', questions)
        # print('rendering these questions data:', questions)

        # Generate dynamic form HTML
        dynamic_form_html = create_dynamic_form(questions)
        session['form_data'] = dynamic_form_html

        if 'initial_form_data' not in session:
            session['initial_form_data'] = dynamic_form_html

        # TODO 08Apr2024 .id ILD Question_id (1, 2, 19 ILD S11-A1243 pt o mai usoara gestiune a salvarii in DB)
        return render_template('survey.html',
                    dynamic_form=dynamic_form_html,
                    questions=questions,
                    questionnaire_id=questionnaire_id,
                    questionnaire_name=questionnaire_name,
                    company_id=company_id,
                    user_id=user_id,
                    action_id=action_id,
                    today=today,
                    )

    elif request.method == 'POST':

        action_id = request.form.get('action_id')  # Use request.form.get for form data
        session['action_id'] = action_id

        try:
            answers_to_save = {}  # Dictionary to store answers for each question
            for field_name, field_value in request.form.items():
                # TODO for this to work, the first char of answers MUST be a digit
                # print('field name', field_name)
                if field_name[0].isdigit():  # Check if the field name consists only of digits (answers)
                    # Extract question ID from the field name
                    question_id = int(field_name.split('_')[0])
                    # print('question', question_id)
                    # Initialize list for answers if question ID not already in answers_to_save dictionary
                    if question_id not in answers_to_save:
                        answers_to_save[question_id] = []
                    # Append field value to answers list for the question
                    answers_to_save[question_id].append(field_value)

            # Convert answers_to_save dictionary to JSON string
            answer_data_to_save = json.dumps(answers_to_save)

            # Save answers separately using save_answers function
            save_answers(request, questionnaire_id, company_id, user_id, action_id, answer_data_to_save)
            print('six - save managed')

            flash(f'Answers saved successfully.', 'success')  # Flash success message

            return redirect(
                url_for('show_survey', questionnaire_id=questionnaire_id, action_id=action_id))  # Redirect to the same page
        except Exception as e:
            flash(f'An error occurred: {str(e)}', 'danger')  # Flash error message
            return redirect(
                url_for('show_survey', questionnaire_id=questionnaire_id, action_id=action_id))  # Redirect to the same page
    else:
        flash('Invalid method', 'danger')  # Flash error message
        return redirect(url_for('show_survey', questionnaire_id=questionnaire_id, action_id=action_id))

# TODO create audit record!


        csrf_token = request.form.get('csrf_token')
        print('*** csrf ***', csrf_token)
        # Validate CSRF token
        print('parameters passed with POST are', questionnaire_id, company_id, user_id, csrf_token)
        if 'csrf_token' not in db.session:
            print('CSRF token error - NOT IN SESSION')
            abort(403)  # CSRF token validation failed
        elif session['csrf_token'] != request.form.get('csrf_token'):
            print("session['csrf_token']", db.session['csrf_token'])
            print("request.form.get('csrf_token')", csrf_token)
            print('CSRF token error - NOT MATCHING FORM CSRF!')
            abort(403)  # CSRF token validation failed
        else:
            print('csrf_token okay')




class FormQuestion:
    def __init__(self, text, answer_fields):
        self.text = text
        self.answer_fields = answer_fields


def create_dynamic_form(data: List[FormQuestion], form_data: Dict[str, Any] = None) -> Form:
    class DynamicForm(Form):
        pass

    if form_data is None:
        form_data = {}
    i = 0
    for question_data in data:
        i += 1
        field_name = question_data.question_id.lower().replace(" ", "_")
        field_label = question_data.text

        # Parse the answer_fields JSON string
        answer_fields_dict = json.loads(question_data.answer_fields)
        #print('answer_fields_dict:', answer_fields_dict)  # Print answer_fields_dict

        # Create controls based on answer_fields
        for answer_field in answer_fields_dict:
            if isinstance(answer_field, dict):  # Check if answer_field is a dictionary
                control_types = answer_field.get('answer_type', [])  # Get the list of answer types
                j = 0
                for control_type_data in control_types:
                    control_type = control_type_data.get('type')  # Get the control type
                    control_label = answer_field.get('value')

                    if j == 0:
                        control_label = field_label
                    else:
                        if control_label:  # Check if control_label is not empty
                            control_label = control_label.capitalize()
                        else:
                            control_label = f"{control_type}_answer_{i}{j}"

                    if control_type:  # Check if control_type is not None
                        control_type = control_type.upper()

                        # Map control type to WTForms field type
                        field_type = {
                            'TLT': StringField,
                            'NI': IntegerField,
                            'NI(1-10)': IntegerField,
                            'FILE': FileField,
                            'BC': BooleanField,
                            'BYN': SelectField,
                            'DD': DateField,
                            'TST': SelectField,
                        }.get(control_type, StringField)  # Default to StringField

                        if control_type == 'BYN':
                            field = field_type(label=control_label, choices=[(None, ''), ('yes', 'Yes'), ('no', 'No')])

                        elif control_type == 'TST':
                            # Extract options from answer_fields_dict
                            options = [(option, option) for option in answer_field.get('options', [])]
                            field = field_type(label=control_label, choices=options)

                        elif control_type == 'NI(1-10)':
                            # Extract options from answer_fields_dict
                            # Create a list of integers from 0 to 10 for the select dropdown
                            options = [(str(i), str(i)) for i in range(11)]  # Range from 0 to 10 (inclusive)
                            # Create a SelectField instance with the integer options
                            field = SelectField(label=control_label, choices=options)

                        else:
                            field = field_type(label=control_label)

                        if field:
                            if j == 0:
                                field_label_new = field_label
                                print('field_label_new', field_label_new)
                            else:
                                field_label_new = control_label
                                print('field_label_new', field_label_new)
                            j += 1

                        setattr(DynamicForm, field_label_new, field)

    return DynamicForm(form_data)





04Apr2024

# v mails with steps
# TODO ***** risolvere parte SAVE e SUBMIT answer(s) here
@app.route('/show_questionnaire222', methods=['GET'])
def show_questionnaire222():
    today = datetime.now().date()
    user_id = current_user.id
    try:
        company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
    except:
        company_id = None
        pass

    prepare_questions_by_answer_type('complex')

    if company_id is not None:

        relevant_questionnaire_ids = (
            db.session.query(Questionnaire)
            .join(QuestionnaireCompanies, QuestionnaireCompanies.questionnaire_id == Questionnaire.id)
            .join(CompanyUsers, and_(CompanyUsers.company_id == QuestionnaireCompanies.company_id,
                                     CompanyUsers.user_id == current_user.id))
            .filter(Questionnaire.deadline_date > today,
                    Questionnaire.status_id < 3)
            .join(QuestionnaireQuestions)  # Join with QuestionnaireQuestions
            .join(
                QuestionnaireQuestions.question)  # Join with Question based on the relationship defined in QuestionnaireQuestions
            .order_by(Question.id)  # Order by question_id or whichever column you prefer
            .all()
        )

    else:
        relevant_questionnaire_ids = None  # Or provide a default value

    if not relevant_questionnaire_ids:
        return render_template('no_questionnaires.html')

    questionnaire_id = request.args.get('id', default=None, type=int)

    if questionnaire_id is None or questionnaire_id not in [q.id for q in relevant_questionnaire_ids]:
        first_questionnaire_id = relevant_questionnaire_ids[0].id
        return redirect(url_for('show_questionnaire', id=first_questionnaire_id))

    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_name = selected_questionnaire.name

    question_ids = [qq.question_id for qq in selected_questionnaire.questionnaire_questions]
    questions = Question.query.filter(Question.id.in_(question_ids)).order_by(Question.question_id).all()

    form = create_dynamic_form(questions, form_data=request.form)
    session['form_data'] = form.data # make it persistent

    if 'initial_form_data' not in session:
        session['initial_form_data'] = form.data

    type = None
    retrieve_mode = None
    for question in questions:

        question_answer_dict = build_question_answer_dict(question)
        print('build_question_answer_dict executed', question_answer_dict)

        '''
        print('*** decode start ***')
        answer_type_list = question.answer_type
        control_types = decode_answer_types(answer_type_list, encoding_scheme)

        print("Decoded Control Types:")
        for control_type in control_types:
            if "Integer in range 0-10" in control_type:
                print(control_type, '0-10 int range')  # Print the specific message for 0-10 integer range
            else:
                print(control_type)  # Print the regular control type
        print('*** decode end ***')
        '''

        if question.answer_type == 'complex':
            fields = {}
            if question.answer_fields:
                try:
                    answer_fields_dict = json.loads(question.answer_fields)
                    for field_label, subfield in answer_fields_dict.items():
                        if isinstance(subfield, dict):  # Check if subfield is a dictionary
                            print('sub', subfield)
                            # Complex subfield (multiple fields)
                            # ... (logic for handling nested structures)
                        else:
                            # Simple subfield (single field)
                            label_text = field_label.replace('_', ' ').capitalize()  # Human-readable label
                            form.add_field(field_label, StringField(label=label_text, default=subfield))
                except json.JSONDecodeError:
                    print(f"Error parsing JSON for question {question.id}: {question.answer_fields}")
            else:
                fields = {'answer_fields': 'Missing complex answer data'}

            if fields:
                field = FormField(Form(**fields))
                print('field in show q', field)
                return render_template('questionnaire.html', form=form, questions=questions,
                            questionnaire_id=questionnaire_id, today=today,
                            # ... other arguments
                            complex_field=field, company_id=company_id, user_id=user_id)
                # Pass the FormField to the template
            else:
                # Option 1: Display a placeholder message
                fields = {'answer_fields': 'Missing complex answer data'}  # Simple dictionary for the template

                # Option 2: Attempt to retrieve data (example)
                try:
                    # Code to retrieve missing data from another source
                    # Option 1: Display a placeholder message
                    fields = {'answer_fields': StringField(label="Placeholder for Missing Data")}
                except Exception as e:
                    print(f"Error retrieving missing data: {e}")
                    fields = {'answer_fields': 'Error retrieving complex answer data'}

                # Optionally pass fields to the template if needed
                print('* render ', form)
                return render_template('questionnaire.html',
                    form=form, questions=questions,
                     fields=fields, questionnaire_name=questionnaire_name,
                       dynamic_form=form, current_interval=current_interval, type=type,
                        questionnaire_id = questionnaire_id, company_id=company_id, user_id=user_id, today=today)

                # ... other arguments)
    print('** render ', form)
    return render_template('questionnaire.html', form=form, questions=questions,
            questionnaire_id=questionnaire_id, questionnaire_name=questionnaire_name,
            dynamic_form=form, current_interval=current_interval, type=type,
            company_id=company_id, user_id=user_id, today=today)






(item 1*)

Almost! The provided code snippet incorporates the essential elements for handling both simple and complex questions in the `show_questionnaire` function. However, there's a minor redundancy within the loop that can be simplified.

**Redundancy:**

In the current structure, you have two separate `if` blocks, one checking for `question.answer_type == 'complex'` and another within the `else` block checking for each simple question type. This repetition can be streamlined.

**Improved Loop:**

```python
for question in questions:
    question_base_field = f'question_{question.id}'

    if question.answer_type == 'complex':
        # Handle complex question logic using process_answer_fields (explained earlier)
        answer_fields = process_answer_fields(question.answer_fields)
        for field_name, field_type in answer_fields.items():
            # Create appropriate fields based on field_type
            # ... (same logic as before)

    else:
        # Handle simple question types directly:
        if question.answer_type == 'text':
            form.add_field(f'{question_base_field}_text', StringField(label=question.text))
        elif question.answer_type == 'score':
            form.add_field(f'{question_base_field}_integer', IntegerField(label=question.text))
        # ... (logic for other simple types)

    print('question', question, question.id, question.text)
```

**Explanation:**

- The loop iterates through each question.
- If `question.answer_type == 'complex'`, the logic for complex questions using `process_answer_fields` is executed.
- Otherwise (for simple questions), the `else` block directly handles each simple type using a series of `if` statements to create the corresponding form field.

**Remember:**

- Ensure the `process_answer_fields` function is implemented to extract field information from complex questions.
- Add logic for other question types (e.g., `boolean`, `date`, `file`) as needed in both sections.

With this streamlined loop structure, the `show_questionnaire` function should effectively generate a form with the appropriate fields for both simple and complex questions based on the question types stored in your database.




# @app.route('/save_questionnaire', methods=['POST'])
# TODO this one uses the rel QuestionnaireQuestions and IDENTIFIES the answers
# AND WRITES ONE RECORD PER EACH ANSWER
def save_questionnaire444(form_data):
    # Process the form data for saving
    success = False
    #try:
    questionnaire_id = form_data.get('questionnaire_id')
    company_id = form_data.get('company_id')
    user_id = form_data.get('user_id')

    print('questionnaire_id:', questionnaire_id, 'company_id:', company_id, 'user_id:', user_id)

    # Fetch the selected questionnaire based on the questionnaire_id
    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)

    # Sort the questionnaire_questions by question_id
    sorted_questions = sorted(selected_questionnaire.questionnaire_questions, key=lambda x: x.question.id)

    # Initialize a list to hold all answer data
    all_answers_data = []

    # Iterate over questions related to the selected questionnaire
    for questionnaire_question in sorted_questions:
        question = questionnaire_question.question

        # Initialize answer data dictionary for the current question
        answer_data = {
            'question_id': question.id,
            'questionnaire_id': questionnaire_id,
            'company_id': company_id,
            'user_id': user_id,
            'timestamp': datetime.now(),
            'answers': {}
        }

        # Extract answer details for the current question
        answer_text = form_data.get(f"{question.id}_text")
        answer_score = form_data.get(f"{question.id}_score")
        answer_description = form_data.get(f"{question.id}_description")
        answer_file = request.files.get(f"{question.id}_file")

        # If file was uploaded, save it and include the file path in answer data
        if answer_file:
            filename = secure_filename(answer_file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            answer_file.save(file_path)
            answer_data['answers']['answer_file'] = file_path

        # Include other answer data in the answer data dictionary
        answer_data['answers']['answer_text'] = answer_text
        answer_data['answers']['answer_comment'] = answer_description
        answer_data['answers']['answer_conclusion'] = None  # Set to None or the appropriate value
        answer_data['answers']['answer_boolean'] = None  # Set to None or the appropriate value
        answer_data['answers']['answer_integer'] = answer_score  # Adjusted to match your column name
        answer_data['answers']['answer_number'] = None  # Set to None or the appropriate value
        answer_data['answers']['answer_date'] = None  # Set to None or the appropriate value

        # Append the answer data to the list of all answers data
        all_answers_data.append(answer_data)

    # Serialize all answers data into JSON format (solves the datetime non JSONified issue)
    answer_data_json = json.dumps(all_answers_data, cls=DateTimeEncoder)

    # Now you have a JSON string containing all the answer data, with identifiers for each answer
    print('answer_data_json', answer_data_json)

    # Your database logic to save answer_data_json here
    # Save answer data to the database
    # Adjust this part based on your database schema and ORM usage
    # For example:
    for answer_data in all_answers_data:
        answer = Answer(
            questionnaire_id=answer_data['questionnaire_id'],
            question_id=answer_data['question_id'],
            company_id=answer_data['company_id'],
            user_id=answer_data['user_id'],
            timestamp=answer_data['timestamp'],
            answer_data=json.dumps(answer_data['answers'])
        )
        db.session.add(answer)

    db.session.commit()

    success = True

    '''
    except Exception as e:
        print(f"Error saving questionnaire: {e}")
        # success = False  # Return False if failed
    '''

    # Your save_questionnaire logic here
    message = 'Questionnaire saved successfully with ID: ' + str(
        questionnaire_id) if success else 'Failed to save questionnaire'
    return success, jsonify({'message': message})



# TODO this would work if I had a question_answers relationship (which I don't have for now)
'''
# Initialize a dictionary to hold all answer data
all_answers_data = []

# Iterate over questions and their corresponding answers
for question_id, answers in question_answers.items():
    # Initialize answer data dictionary for the current question
    answer_data = {
        'question_id': question_id,
        'answers': {}
    }

    # Access individual answer fields
    answer_text = answers['text']
    answer_score = answers['score']
    answer_description = answers['description']
    answer_file = answers['file']

    # If file was uploaded, save it and include the file path in answer data
    if answer_file:
        filename = secure_filename(answer_file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        answer_file.save(file_path)
        answer_data['answers']['answer_file'] = file_path

    # Include other answer data in the answer data dictionary
    answer_data['answers']['answer_text'] = answer_text
    answer_data['answers']['answer_comment'] = answer_description
    answer_data['answers']['answer_conclusion'] = None  # Set to None or the appropriate value
    answer_data['answers']['answer_boolean'] = None  # Set to None or the appropriate value
    answer_data['answers']['answer_integer'] = answer_score  # Adjusted to match your column name
    answer_data['answers']['answer_number'] = None  # Set to None or the appropriate value
    answer_data['answers']['answer_date'] = None  # Set to None or the appropriate value

    # Append the answer data to the list of all answers data
    all_answers_data.append(answer_data)

# Serialize all answers data into JSON format
answer_data_json = json.dumps(all_answers_data)

# Now you have a JSON string containing all the answer data, with identifiers for each answer
print(answer_data_json)
'''


# @app.route('/save_questionnaire', methods=['POST'])
def save_questionnaire333(form_data):
    # Process the form data for saving
    success = False
    try:
        questionnaire_id = form_data.get('questionnaire_id')
        company_id = form_data.get('company_id')
        user_id = form_data.get('user_id')

        print('questionnaire_id:', questionnaire_id, 'company_id:', company_id, 'user_id:', user_id)

        # Initialize a dictionary to store question IDs and their respective answers
        question_answers = {}

        # Iterate over form data keys and extract question IDs and answers
        for key in form_data:
            print('key:', key)

            # Check if the key corresponds to a question ID
            if key.endswith('_text'):
                # Extract the question ID from the key
                question_id = key.split('_')[0]

                print('question:', question_id)
                # Get the answer fields associated with the question ID
                answer_text = form_data.get(key)
                answer_score = form_data.get(f'{question_id}_score')
                answer_description = form_data.get(f'{question_id}_description')

                # Check if file upload exists for this question
                file_key = f'{question_id}_file'
                if file_key in form_data:
                    answer_file = form_data[file_key]
                    print('file', answer_file)
                else:
                    print('no file')
                    answer_file = None

                # Store the question ID and its answers in the dictionary
                question_answers[question_id] = {
                    'text': answer_text,
                    'score': answer_score,
                    'file': answer_file,
                    'description': answer_description
                }

        # Now you have question IDs mapped to their respective answers
        # You can iterate over this dictionary to process and save the data to the database

        # Example: Iterate over question IDs and their answers
        for question_id, answers in question_answers.items():
            # Access individual answer fields
            answer_text = answers['text']
            answer_score = answers['score']
            answer_file = answers['file']
            answer_description = answers['description']

            print('question and answers:', question_id, answer_text, answer_score, answer_file, answer_description)
            # Perform database operations to save the question ID and its answers
            # Example: Assuming you have a model named Answer
            # Perform database operations to save the question ID and its answers
            # Example:
            # TODO maybe done? ^2 add fields' values here if needed (as a further development,
            #  after having added them to the list of
            #  "inline" fields) - as done here:
            '''
            answer = Answer(
                questionnaire_id=questionnaire_id,
                question_id=question_id,
                user_id=user_id,
                company_id=company_id,
                answer_text=answer_text,
                answer_comment=answer_description,  # Set to None for now, you can adjust it accordingly
                answer_conclusion=None,  # Set to None for now, you can adjust it accordingly
                answer_boolean=None,  # Set to None for now, you can adjust it accordingly
                answer_integer=answer_score,  # Adjusted to match your column name
                answer_number=None,  # Set to None for now, you can adjust it accordingly
                answer_date=None,  # Set to None for now, you can adjust it accordingly
                answer_file=None,  # Adjusted to match your column name
                timestamp=datetime.now(),  # Adjusted to match your column name and default value
                submitted=False  # Set to False by default, you can adjust it accordingly
            )
            '''

            # If file was uploaded, save it
            if answer_file:
                filename = secure_filename(answer_file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                answer_file.save(file_path)
                # Include the file path in the answer_data dictionary
                file_data = {'file_path': file_path}
            else:
                # If no file was uploaded, set file_data to None
                file_data = None

            # TODO (maybe already done) - OR, BETTER, JSONify the complex answers and save them in answer_data!
            # THIS IS DONE HERE
            # Serialize the answer information into JSON format

            # TODO 0 - check if answer(s) to that questionnaire for that comp id/user id exists already
            #               and take action
            # TODO      1 - Check if all answers are completed - set a % limit of completion,
            # TODO      2 if less than that, error
            # TODO      3 if more than that but not 100%, message of attention

            # TODO How to solve the problem of "identifying" single answers?
            # TODO      is it necessary to create a QuestionAnswers relationship table?
            # TODO I think that every questionnaire needs to be independent of others (i.e. for every other year/period)
            # TODO      otherwise I need to introduce year or period too!

            answer_data = json.dumps({
                'answer_text': answer_text,
                'answer_comment': answer_description,
                'answer_conclusion': None,  # Set to None or the appropriate value
                'answer_boolean': None,  # Set to None or the appropriate value
                'answer_integer': answer_score,  # Adjusted to match your column name
                'answer_number': None,  # Set to None or the appropriate value
                'answer_date': None,  # Set to None or the appropriate value
                'answer_file': file_data  # Include the file path data
                # Add other fields as needed
            })

            # Create the Answer object with answer_data populated
            answer = Answer(
                questionnaire_id=questionnaire_id,
                question_id=question_id,
                user_id=user_id,
                company_id=company_id,
                answer_data=answer_data,
                timestamp=datetime.now(),
                submitted=False
            )
            db.session.add(answer)

        # Commit the changes to the database
        db.session.commit()

        success = True

    except Exception as e:
        print(f"Error saving questionnaire: {e}")
        db.session.rollback()
        # success = False  # Return False if failed

    # Your save_questionnaire logic here
    message = 'Questionnaire saved successfully with ID: ' + str(
        questionnaire_id) if success else 'Failed to save questionnaire'
    return success, jsonify({'message': message})





      {% if question.answer_type == 'inline' %}
        <h2>{{ question.text }}</h2>
        {% for answer_type, label_text in question.inline_fields.items %}
          <label class="form-control-label">{{ label_text }}</label>
          <input class="form-control" type="text" name="{{ question.field_name }}_{{ answer_type }}">


(in the questionnaire view)
    @expose
    def edit(self, id):
        # Get the question object
        question = Question.query.get(id)

        # Additional logic for form generation (optional)

        # Define inline fields based on answer_type (if needed)
        inline_fields = None
        if question.answer_type == 'inline':
            inline_fields = {
                'text': 'Answer',
                'integer': 'Score',
                'file': 'File',
                'text': 'Comment',
                'date': 'Date',
            }
        # Make inline_fields accessible in the template (optional)
        self.template_args['inline_fields'] = inline_fields




@app.route('/show_questionnaire123', methods=['GET'])
def show_questionnaire123():
    today = datetime.now().date()
    user_id = current_user.id

    try:
        company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
    except:
        company_id = None
        pass

    prepare_questions_by_answer_type('complex')

    if company_id is not None:

        relevant_questionnaire_ids = (
            db.session.query(Questionnaire)
            .join(QuestionnaireCompanies, QuestionnaireCompanies.questionnaire_id == Questionnaire.id)
            .join(CompanyUsers, and_(CompanyUsers.company_id == QuestionnaireCompanies.company_id,
                                     CompanyUsers.user_id == current_user.id))
            .filter(Questionnaire.deadline_date > today,
                    Questionnaire.status_id < 3)
            .join(QuestionnaireQuestions)  # Join with QuestionnaireQuestions
            .join(
                QuestionnaireQuestions.question)  # Join with Question based on the relationship defined in QuestionnaireQuestions
            .order_by(Question.id)  # Order by question_id or whichever column you prefer
            .all()
        )

        print('show_questionnaire relevant quest ids', relevant_questionnaire_ids)
    else:
        relevant_questionnaire_ids = None  # Or provide a default value

    if not relevant_questionnaire_ids:
        return render_template('no_questionnaires.html')

    questionnaire_id = request.args.get('id', default=None, type=int)

    if questionnaire_id is None or questionnaire_id not in [q.id for q in relevant_questionnaire_ids]:
        first_questionnaire_id = relevant_questionnaire_ids[0].id
        return redirect(url_for('show_questionnaire', id=first_questionnaire_id))

    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_name = selected_questionnaire.name

    question_ids = [qq.question_id for qq in selected_questionnaire.questionnaire_questions]
    questions = Question.query.filter(Question.id.in_(question_ids)).order_by(Question.question_id).all()

    form = create_dynamic_form(questions, form_data=request.form)
    # ... (code for storing form data in session)

    # Main loop for creating form fields based on question types
    for question in questions:

        question_base_field = f'question_{question.id}'
        #print('question base field', question_base_field)
        if question.answer_type == 'complex':
            if question.answer_type == 'text':
                form.add_field(f'{question_base_field}_text', StringField(label=question.text))
            if question.answer_type == 'score':
                form.add_field(f'{question_base_field}_integer', IntegerField(label=question.text))
            if question.answer_type == 'boolean':
                form.add_field(f'{question_base_field}_boolean', BooleanField(label=question.text))
            if question.answer_type == 'file':
                form.add_field(f'{question_base_field}_file', FileField(label=question.text))
            if question.answer_type == 'date':
                form.add_field(f'{question_base_field}_date', DateField(label=question.text))
            # ... (add logic for other question types as needed)

            #print('form after question', question, form)
        else:

            if question.answer_type == 'text':
                form.add_field(f'{question_base_field}_text', StringField(label=question.text))
            elif question.answer_type == 'score':
                form.add_field(f'{question_base_field}_integer', IntegerField(label=question.text))
            elif question.answer_type == 'boolean':
                form.add_field(f'{question_base_field}_boolean', BooleanField(label=question.text))
            elif question.answer_type == 'file':
                form.add_field(f'{question_base_field}_file', FileField(label=question.text))
            elif question.answer_type == 'date':
                form.add_field(f'{question_base_field}_date', DateField(label=question.text))
            # ... (add logic for other question types as needed)

        #print('** question **', question, question.id, question.text)

    print('** render **', questions, questionnaire_name, questionnaire_id, today, company_id, user_id, 'type', type)
    print('** form **', form)

    return render_template('questionnaire.html', form=form,
                           questions=questions,
                           questionnaire_name=questionnaire_name,
                            type=type,
                           questionnaire_id=questionnaire_id,
                           company_id=company_id, user_id=user_id, today=today
                           # ... (other variables for the template)
                        )





old show_questionnaire 30Mar2024

@app.route('/show_questionnaire222', methods=['GET'])
def show_questionnaire222():
    today = datetime.now().date()
    try:
        company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
    except:
        company_id = None
        pass

    # prepare Question for 'complex' answers. In case of need, additional answer types can be added
    # in that case, an additional 'sample_answer'-like dict must be created according to the structure of those answers
    prepare_questions_by_answer_type('complex')

    if company_id is not None:
        relevant_questionnaire_ids = (db.session.query(Questionnaire). \
            join(QuestionnaireCompanies, QuestionnaireCompanies.questionnaire_id == Questionnaire.id). \
            join(CompanyUsers, and_(CompanyUsers.company_id == QuestionnaireCompanies.company_id,
                                    CompanyUsers.user_id == current_user.id)). \
            filter(Questionnaire.deadline_date > today,
                   Questionnaire.status_id < 3). \
            all()
        )
    else:
        # Handle the case when company_user is None
        relevant_questionnaire_ids = None  # Or provide a default value

    if not relevant_questionnaire_ids:
        return render_template('no_questionnaires.html')

    questionnaire_id = request.args.get('id', default=None, type=int)
    print('q id', questionnaire_id)

    if questionnaire_id is None or questionnaire_id not in [q.id for q in relevant_questionnaire_ids]:
        first_questionnaire_id = relevant_questionnaire_ids[0].id
        return redirect(url_for('show_questionnaire', id=first_questionnaire_id))

    selected_questionnaire = Questionnaire.query.get_or_404(questionnaire_id)
    questionnaire_name = selected_questionnaire.name

    question_ids = [qq.question_id for qq in selected_questionnaire.questionnaire_questions]

    submission_datetime = datetime.utcnow()
    questions = Question.query.filter(Question.id.in_(question_ids)).order_by(Question.question_id).all()

    '''
    questions = Question.query.filter(Question.id.in_(question_ids)).order_by(Question.question_id).options(
        db.joinedload(Question.inline_fields)  # Use the relationship attribute here
    ).all()
    '''
    print('one')
    print(questions)
    print(request.form)

    form = create_dynamic_form(questions, form_data=request.form)

    print('two')

    if 'initial_form_data' not in session:
        session['initial_form_data'] = form.data

    type = None
    retrieve_mode = None
    for question in questions:
        print('Question:', question, question.answer_type)
        if question.answer_type == 'complex':
            print('answer_fields:', type(question.answer_fields), question.answer_fields)

    return render_template('questionnaire.html', form=form,
                           questions=questions, questionnaire_id=questionnaire_id,
                           questionnaire_name=questionnaire_name, dynamic_form=form,
                           current_interval=current_interval, type=type)






file upload:


Yes, the provided code handles the uploading and serving of files within company-specific folders. Here's an overview of how it works:

1. **Listing Company Files (`/company_files/<company_id>`)**:
   - This route lists files belonging to a specific company identified by `company_id`.
   - It retrieves file paths associated with the company and prepares information about each file for display.
   - The `render_template` function renders a template (`files_list.html`) to display the list of files.

2. **Downloading File (`/download_file/<company_id>/<filename>`)**:
   - This route allows users to download files belonging to a specific company.
   - It verifies the user's permissions for accessing the file and checks if the file exists.
   - If the file exists, it uses `send_from_directory` to send the file to the user for download.

3. **Serving Company File (`/company_files/<int:company_id>/<path:filename>`)**:
   - This route serves files stored within company-specific folders.
   - It constructs the path to the requested file within the company folder and checks if the file exists.
   - If the file exists, it uses Flask's `send_file` function to serve the file as an attachment.

4. **Saving File with Incremented Name** (`save_file_with_incremented_name`):
   - This function saves a file to a specified folder path while ensuring that the filename is unique.
   - It appends a numerical suffix to the filename if a file with the same name already exists in the folder.

5. **Creating Company Folder (`create_company_folder`)**:
   - This function creates a folder for a specific company within the directory specified by `COMPANY_FILES_DIR`.
   - It constructs the folder path using the company ID and a subfolder name.
   - If the folder doesn't already exist, it creates the folder using `os.makedirs`.

Overall, these routes and functions provide a way to manage files associated with different companies, ensuring proper access control and file serving capabilities.




conteingencies, OK, 26Mar2024 13h16m
Only problem, INLINE records are duplicated


class Contingencies_dataView(ModelView):

    can_export = True  # Default to enabled

    inline_models = (StepBaseDataInlineForm(StepBaseData),)
    # inline_models = [(StepBaseDataInlineForm, StepBaseData, 'ONE_TO_MANY')]  # Assuming a one-to-one relationship
    form_base_class = CustomBaseDataForm  # Use our custom form class
    create_template = 'admin/area_1/create_base_data_3.html'
    subarea_id = 3
    area_id = 1

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        #self.class_name = self.__class__.__name__  # Store the class name
        self.subarea_id = Contingencies_dataView.subarea_id  # Initialize subarea_id in __init__
        self.area_id = Contingencies_dataView.area_id  # Initialize area_id in __init__
        self.subarea_name = get_subarea_name(area_id=self.area_id, subarea_id=self.subarea_id)

    '''
    def is_accessible(self):
        if current_user.is_authenticated:
            if (current_user.has_role('Admin') or current_user.has_role('Authority')
                or current_user.has_role('Manager') or current_user.has_role('Employee')):
                # Allow access for Admin, Manager, and Employee
                return True
        return False
    '''

    column_list = ('fi0', 'interval_ord', 'subject', 'number_of_doc', 'date_of_doc', 'file_path', 'no_action', 'fc2')
    # Specify the columns to display in the edit view
    form_columns = ('fi0', 'interval_ord', 'number_of_doc', 'date_of_doc', 'file_path', 'no_action', 'fc2')
    #'interval_ord', 'fi0', 'subject_id', 'fc2',
    # Replace the StringField with FileUploadField

    column_labels = {'fi0': 'Anno di rif.', 'interval_ord': 'Periodo di rif.', 'subject': 'Oggetto',
                     'number_of_doc': 'Nr. documento', 'date_of_doc': 'Data documento', 'file_path': 'Allegati',
                     'no_action': 'Conferma assenza doc.', 'fc2': 'Note'}
    column_descriptions = {'interval_ord': '(inserire il numero; es. 1: primo quadrimestre; 2: secondo ecc.)',
                           'fi0': 'Inserire anno (es. 2024)', 'subject_id': 'Seleziona oggetto',
                           'fc2': 'Note', 'file_path': 'Allegati', 'no_action': 'Dichiarazione di assenza di documenti (1)'}

    form_extra_fields = {
        'file_path': FileUploadField('File', base_path=app.config['UPLOAD_FOLDER'])
    }

    form_overrides = {
        'no_action': CheckboxField
    }

    column_filters = ('subject', 'fc2', 'no_action')  # Adjust based on your model structure
    # Specify fields to be excluded from the form
    form_excluded_columns = ('user_id', 'company_id', 'status_id', 'created_on', 'updated_on', 'data_type')

    @action('custom_action', 'List Workflows of Documents')
    def custom_action(self, ids):
        # Fetch StepBaseData records related to the provided model IDs
        step_base_data_records = StepBaseData.query.filter(StepBaseData.base_data_id.in_(ids)).all()

        # Fetch model records related to the provided model IDs
        model_records = BaseData.query.filter(BaseData.id.in_(ids)).all()

        # Render the template to display the records
        return self.render('basedata_workflow_step_list.html', step_base_data_records=step_base_data_records, model_records=model_records)


    def _subject_formatter(view, context, model, name):
        # This function will be used to format the 'subject' column
        if model.subject:
            if isinstance(model.subject, Subject):  # Check if the subject is an instance of Subject
                return model.subject.name
            else:
                return Subject.query.get(model.subject).name  # If not, query the subject object
        return ''

    column_formatters = {
        'subject': _subject_formatter
    }

    # TODO check if this function below is necessary or not

    '''
    def create_or_update_steps(self, form, model):
        """
        Create or update StepBaseData instances based on the form data.
        """
        # Get the form data
        step_id = form.step_id.data
        workflow_id = form.workflow_id.data
        status_id = form.status_id.data
        deadline_date = form.deadline_date.data
        auto_move = form.auto_move.data
        open_action = 1

        # Check if the step_id is provided
        if step_id:
            # Check if a StepBaseData instance already exists for the current BaseData instance, workflow_id, and step_id
            step_base_data = StepBaseData.query.filter_by(base_data_id=model.id, step_id=step_id,
                                                          workflow_id=workflow_id).first()

            if step_base_data:
                # Check if the form data matches the existing StepBaseData instance
                if (step_base_data.status_id == status_id and
                        step_base_data.deadline_date == deadline_date and
                        step_base_data.auto_move == auto_move):
                    print('Form data matches existing StepBaseData record')
                    return  # No need to update or create a new record

                # Update the existing StepBaseData instance
                step_base_data.status_id = status_id
                step_base_data.deadline_date = deadline_date
                step_base_data.auto_move = auto_move
                step_base_data.end_date = datetime.now()  # Update the end_date if needed
                #step_base_data.open_action = open_action  # For updating existing record

                print('Updating existing StepBaseData record')
            else:
                # Create a new StepBaseData instance
                step_base_data = StepBaseData(
                    base_data_id=model.id,
                    step_id=step_id,
                    workflow_id=workflow_id,
                    status_id=status_id,
                    deadline_date=deadline_date,
                    auto_move=auto_move,
                    #open_action=open_action
                    # Add other fields as needed
                )
                db.session.add(step_base_data)
                print('Creating new StepBaseData record')

            # Commit the changes to the database

            db.session.commit()

            # Pass the form data to the StepBaseDataInlineForm inline model
            inline_model = StepBaseDataInlineForm(StepBaseData, form_data=inline_form)
            inline_model.form_data = inline_form

            # Refresh the form data for the inline model
            inline_model.form.populate_obj(inline_model.model)

            # Return the inline model
            return inline_model

    '''

    def scaffold_form(self):
        form_class = super(Contingencies_dataView, self).scaffold_form()
        current_year = datetime.now().year
        year_choices = [(str(year), str(year)) for year in range(current_year - 5, current_year + 2)]
        default_year = str(current_year)
        form_class.fi0 = SelectField(
            'Anno di rif.',
            coerce=int,
            choices=year_choices,
            default=default_year
        )
        # NEW
        config_values = get_config_values(config_type='area_interval', company_id=None, area_id=self.area_id,
                                          subarea_id=None)
        nr_intervals = config_values[0]

        current_interval = [t[2] for t in intervals if t[0] == nr_intervals] #int(get_current_interval(3))  # quadriester
        first_element = current_interval[0] if current_interval else None
        interval_choices = [(str(interv), str(interv)) for interv in range(1, nr_intervals + 1)]

        form_class.interval_ord = SelectField(
            'Periodo di rif.',
            coerce=int,
            choices=interval_choices,  # Example choices, replace with your logic
            default=first_element
        )

        # Remove 'subject_id' field from the form
        form_class.subject_id = SelectField(
            'Tipo di documento',
            validators=[InputRequired()],
            coerce=int,
            choices=[(subject.id, subject.name) for subject in Subject.query.filter_by(tier_1="Legale").all()]
        )
        #delattr(form_class, 'subject_id')
        form_class.no_action = CheckboxField('Confirm no documents to attach',
                                             default=False)  # Set default value to False

        form_class.form_excluded_columns = ('user_id', 'company_id', 'status_id',
                                            'created_by', 'created_on', 'updated_on', 'data_type')
        # Set default values for specific fields
        form_class.fc2 = MyStringField('Note')

        return form_class #ExtendedForm


    def _validate_no_action(self, model, form):
        no_action_value = form.no_action.data
        if model.file_path is None and not no_action_value:
            raise ValidationError(
                'If no file exists, then this absence must be acknowledged by checking the "no documents" box.')

    def _uncheck_if_document(self, model, form):
        no_action_value = form.no_action.data
        if model.file_path is not None and no_action_value:
            raise ValidationError(
                'The no-document box is checked but a document was uploaded - please confirm either of the two.')

    def get_query(self):
        query = self.session.query(self.model).filter_by(area_id=self.area_id, subarea_id=self.subarea_id)

        if current_user.is_authenticated:
            if current_user.has_role('Admin') or current_user.has_role('Authority'):
                return query
            elif current_user.has_role('Manager'):
                # Manager can only see records related to their company_users
                subquery = db.session.query(CompanyUsers.company_id).filter(
                    CompanyUsers.user_id == current_user.id
                ).subquery()

                query = query.filter(self.model.company_id.in_(subquery))
            elif current_user.has_role('Employee'):
                # Employee can only see their own records
                query = query.filter(self.model.user_id == current_user.id)
                return query

        # For other roles or anonymous users, return an empty query
        return query.filter(self.model.id < 0)


    # TODO eliminate or use all over the procs (!) ?
    '''
    def build_workflow_controls(self, model_data):
        """
        This method generates the HTML for the workflow controls based on the provided model data.

        Args:
            model_data (model instance): The model instance containing relevant information.

        Returns:
            str: The HTML string representing the workflow controls.
        """

        # Access data from the model relevant to control generation (e.g., file type, subject)
        # ... your logic to determine controls based on model data ...

        # Define the HTML structure for the controls (e.g., dropdown, checkbox)
        controls_html = ""
        dropdown_html = ""  # Initialize an empty string for the dropdown
        date_picker_html = ""  # Similarly, initialize for date picker
        checkbox_html = ""  # And for checkbox

        # Example: Dropdown for selecting a workflow
        if model_data.subject_id == 1:  # Adjust condition based on your logic
            workflows = Workflow.query.all()
            controls_html += f"""
                <select name="workflow">
            """
            for workflow in workflows:
                controls_html += f"""<option value="{workflow.id}">{workflow.name}</option>"""
            controls_html += "</select><br>"

        # Current date for the date picker default
        current_date = datetime.now()

        # HTML for the date picker
        date_picker_html = f'<input type="date" name="deadline_date" value="{current_date}">'

        # HTML for the checkbox
        checkbox_html = '<input type="checkbox" name="auto_move"> Auto Transition'

        # Combine all controls HTML
        controls_html = f"{dropdown_html}<br>{date_picker_html}<br>{checkbox_html}"

        # ... Add more controls based on your requirements ...

        return controls_html

    '''

    def on_model_change(self, form, model, is_created):
        super().on_model_change(form, model, is_created)

        # Reset form data
        form.populate_obj(model)

        # Get the inline form data
        # TODO eliminated on 26Mar to cope with duplicated records in the INLINE
        # inline_form_data = form.inline_form  # Assuming 'inline_form' is the attribute holding the inline form data

        # Populate or update the inline form data
        '''
        if inline_form_data:
            inline_form = StepBaseDataInlineForm(model=StepBaseData)  # Initialize the inline form
            # Create or update StepBaseData instances
            self.create_or_update_steps(form, model)
            # TODO if this eliminates duplicated records, then cancel out create_or_update_steps; if not, reactivate this snippet

            inline_form.populate_form(inline_form_data)  # Populate the inline form with data
        '''
        uploaded_file = form.file_path.data
        print('1 - uploaded file', uploaded_file)

        if is_created:
            # Handle new model creation:
            # - Set default values
            # - Send notification
            # Apply your custom logic to set data_type
            model.created_on = datetime.now()  # Set the created_on
            pass
        else:
            # Handle existing model edit:
            # - Compare previous and updated values
            # - Trigger specific actions based on changes
            pass

        user_id = current_user.id  # Get the current user's ID or any other criteria
        try:
            company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
        except:
            company_id = None
            pass

        area_id = self.area_id
        subarea_id = self.subarea_id
        status_id = 1
        year_id = form.fi0.data

        nr_intervals = get_subarea_interval_type(self.area_id, self.subarea_id)
        interval_id = nr_intervals
        interval_ord = form.interval_ord.data
        subject_id = form.subject_id.data
        record_type = 'control_area'
        data_type = self.subarea_name

        if form.fi0.data == None or form.interval_ord.data == None:
            raise ValidationError(f"Time interval reference fields cannot be null")

        if form.subject_id.data == None:
            raise ValidationError(f"Document type can not be null")

        # Perform actions relevant to both creation and edit:
        with app.app_context():
            result, message = check_status_limited(is_created, company_id,
                                subject_id, None, year_id, interval_ord,
                                    interval_id, area_id, subarea_id, datetime.today(), db.session)

        # - Validate data - Save the model
        if form.interval_ord.data > 3 or form.interval_ord.data < 0:
            raise ValidationError(
                "Period must be less than or equal to the number of fractions (e.g. 4 for quarters, 12 for months)")
            pass

        if form.fi0.data < 2000 or form.fi0.data > 2099:
            raise ValidationError(
                "Please check the year")
            pass

        if self._uncheck_if_document(model, form):
            pass
        if self._validate_no_action(model, form):
            pass

        if result == False:
            raise ValidationError(message)
            pass

        model.updated_on = datetime.now()  # Set the created_on
        model.user_id = user_id
        model.company_id = company_id
        model.data_type = data_type
        model.record_type = record_type
        model.area_id = area_id
        model.subarea_id = subarea_id
        model.fi0 = year_id
        model.interval_id = interval_id
        model.interval_ord = interval_ord
        model.status_id = status_id
        model.subject_id = subject_id
        model.legal_document_id = None
        # for upload actions
        # model.file_path = form.file_path.data
        print('2 - file path',  form.file_path.data)

        # workflow_controls = f"{dropdown_html}<br>{date_picker_html}<br>{checkbox_html}"  # Adjusted variable name

        # Determine if workflow controls need to be generated
        # TODO confirm deletion
        #  print('check upload')
        '''
        if uploaded_file and is_created:  # Adjust condition based on your needs
            selected_controls_html = self.build_workflow_controls(model_data=model)
            script_to_inject = f"""
                <script>
                  $(document).ready(function() {{
                    $('#dynamic-controls').html('{selected_controls_html}');
                  }});
                </script>
            """
            print('is created; uploaded_file; script to inject', is_created, ';', uploaded_file, ';', script_to_inject)
            return script_to_inject  # Return script_to_inject first
        else:
            script_to_inject = ""  # No script injection if conditions not met
        '''

        # Save the model to the database
        if is_created:
            self.session.add(model)
        else:
            self.session.merge(model)
        self.session.commit()

        # Return the model after saving
        return model




deadline cards (click and trigger...)


    <script>
        function openAdmin(id) {
            // Make an AJAX request to the server
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/handle_card_click?id=" + id, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    // Redirect to the specified route after successful response
                    window.location.href = "/open_admin_3/assigned_documents/edit/?id=" + id;
                }
            };
            xhr.send();
        }
    </script>



CARDS

creating card html:


def create_card(**kwargs):
  """
  This function creates a card HTML element with customizable attributes and support for statistics.

  Args:
      **kwargs: Dictionary containing key-value pairs for card attributes.
          - title (str): Title of the card. (Required)
          - stats (dict): Dictionary containing key-value pairs for statistics. (Optional)
          - body (str): Content of the card body. (Optional)
          - footer (str): Content of the card footer. (Optional)
          - card_class (str): CSS class(es) for the card. (Optional)

  Returns:
      str: HTML code for the card element.
  """

  # Required argument check
  if 'title' not in kwargs:
      raise ValueError("Missing required argument 'title'")

  # Define default values for optional arguments
  stats = kwargs.get('stats', {})
  body = kwargs.get('body', '')
  footer = kwargs.get('footer', '')
  card_class = kwargs.get('card_class', '')

  # Build the card HTML
  card_html = f"""
  <div class="card {card_class}">
    <div class="card-body">
      <h5 class="card-title">{kwargs['title']}</h5>
  """

  # Add statistics section if provided
  if stats:
      card_html += """
      <ul class="list-group list-group-flush">
      """
      for stat_name, stat_value in stats.items():
          card_html += f"""
          <li class="list-group-item">{stat_name}: {stat_value}</li>
          """
      card_html += "</ul>"

  # Add body content if provided
  if body:
      card_html += f"""
      <p class="card-text">{body}</p>
      """

  # Add footer if provided
  if footer:
      card_html += f"""
      <div class="card-footer text-muted">
        {footer}
      </div>
      """

  # Close the card div
  card_html += "</div>"


  # Add visibility class if provided
  visibility_class = kwargs.get('visibility', '')
  card_class += f" {visibility_class}"  # Append visibility class to existing card_class

  # Close card div
  card_html += "</div>"

  return card_html


statistics (ex of function)

def get_basedata_statistics():
  """
  This function retrieves data from the database and calculates some statistics for BaseData.

  Returns:
      dict: Dictionary containing key-value pairs for calculated statistics.
  """

  # Retrieve data from BaseData table (replace with your actual query)
  basedata_list = BaseData.query.all()

  # Calculate statistics here
  total_count = len(basedata_list)
  active_count = sum(data.is_active for data in basedata_list)

  # Store statistics in a dictionary
  statistics = {
      "Total Count": total_count,
      "Active Count": active_count,
  }

  return statistics





#atti_dataview 21Mr2024


class Atti_dataView(ModelView):
    # Your existing code for Atti_dataView

    create_template = 'admin/area_1/create_base_data_2.html'
    subarea_id = 2  # Define subarea_id as a class attribute
    area_id = 1

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # self.class_name = self.__class__.__name__  # Store the class name
        self.subarea_id = Atti_dataView.subarea_id  # Initialize subarea_id in __init__
        self.area_id = Atti_dataView.area_id  # Initialize area_id in __init__
        self.subarea_name = get_subarea_name(area_id=self.area_id, subarea_id=self.subarea_id)

    column_list = (
    'fi0', 'interval_ord', 'subject', 'number_of_doc', 'date_of_doc', 'file_path', 'no_action', 'fc2',
    'workflow_id', 'step_id')
    # Add 'workflow_id' and 'step_id' to the column list
    form_columns = ('fi0', 'interval_ord', 'number_of_doc', 'date_of_doc', 'file_path', 'no_action',
                    'fc2', 'workflow_id', 'step_id')

    column_labels = {'fi0': 'Anno di rif.', 'interval_ord': 'Periodo di rif.', 'subject': 'Oggetto',
                     'number_of_doc': 'Nr. documento', 'date_of_doc': 'Data documento', 'file_path': 'Allegati',
                     'no_action': 'Conferma assenza doc.', 'fc2': 'Note', 'workflow_id': 'Workflow ID',
                     'step_id': 'Step ID'}

    column_descriptions = {'interval_ord': '(inserire il numero; es. 1 = primo quadrimestre; 2 = secondo ecc.)',
                           'fi0': 'Inserire anno (es. 2024)', 'subject_id': 'Seleziona oggetto',
                           'fc2': 'Note', 'file_path': 'Allegati',
                           'no_action': 'Dichiarazione di assenza di documenti (1)', 'workflow_id': 'Workflow',
                           'step_id': 'Phase'}


    form_extra_fields = {
        'file_path': FileUploadField('File', base_path=app.config['UPLOAD_FOLDER'])
    }

    form_overrides = {
        'no_action': CheckboxField
    }

    column_filters = ('subject', 'fc2', 'no_action')  # Adjust based on your model structure

    # Specify fields to be excluded from the form
    form_excluded_columns = ('user_id', 'company_id', 'status_id', 'created_on', 'updated_on', 'data_type')


    def _workflow_id_formatter(view, context, model, name):
        # This function will be used to format the 'workflow_id' column
        #if model.workflow_data:
        #    return model.workflow_data.workflow_id
        return ''

    def _step_id_formatter(view, context, model, name):
        # This function will be used to format the 'step_id' column
        #if model.step_data:
        #    return model.step_data.step_id
        return ''

    def _subject_formatter(view, context, model, name):
        # This function will be used to format the 'subject' column
        if model.subject:
            if isinstance(model.subject, Subject):  # Check if the subject is an instance of Subject
                return model.subject.name
            else:
                return Subject.query.get(model.subject).name  # If not, query the subject object
        return ''

    column_formatters = {
        'subject': _subject_formatter,
        'workflow_id': _workflow_id_formatter,
        'step_id': _step_id_formatter
    }

    def scaffold_form(self):
        form_class = super(Atti_dataView, self).scaffold_form()
        # Use the custom form class instead of the default form class
        # Define a custom form class with the desired date format
        '''class CustomForm(form_class):
            date_of_doc = DateField('Document date', format='%d-%m-%Y')

        # Use the custom form class instead of the default form class
        form_class = CustomForm'''

        current_year = datetime.now().year
        year_choices = [(str(year), str(year)) for year in range(current_year - 5, current_year + 2)]
        default_year = str(current_year)
        form_class.fi0 = SelectField(
            'Anno di rif.',
            coerce=int,
            choices=year_choices,
            default=default_year
        )

        # NEW
        config_values = get_config_values(config_type='area_interval', company_id=None, area_id=self.area_id,
                                          subarea_id=None)
        nr_intervals = config_values[0]

        # OLD
        # nr_intervals = get_subarea_interval_type(self.area_id, self.subarea_id)

        current_interval = [t[2] for t in intervals if
                            t[0] == nr_intervals]  # int(get_current_interval(3))  # quadriester
        first_element = current_interval[0] if current_interval else None
        interval_choices = [(str(interv), str(interv)) for interv in range(1, nr_intervals + 1)]

        form_class.interval_ord = SelectField(
            'Periodo di rif.',
            coerce=int,
            choices=interval_choices,  # Example choices, replace with your logic
            default=first_element
        )

        # Remove 'subject_id' field from the form
        form_class.subject_id = SelectField(
            'Tipo di documento',
            validators=[InputRequired()],
            coerce=int,
            choices=[(subject.id, subject.name) for subject in Subject.query.filter_by(tier_1="Legale").all()]
        )
        # delattr(form_class, 'subject_id')
        form_class.no_action = CheckboxField('Confirm no documents to attach',
                                             default=False)  # Set default value to False

        form_class.form_excluded_columns = ('user_id', 'company_id', 'status_id',
                                            'created_by', 'created_on', 'updated_on', 'data_type')
        # Set default values for specific fields
        form_class.fc2 = MyStringField('Note')

        # Add 'workflow_id' and 'step_id' to the form
        form_class.workflow_id = ''
        '''
        SelectField(
            'Workflow ID',
            coerce=int,
            choices=[(workflow.id, workflow.name) for workflow in WorkflowBaseData.query.all()]
        )
        '''

        form_class.step_id = ''
        '''
        SelectField(
            'Step ID',
            coerce=int,
            choices=[(step.id, step.name) for step in Step.query.all()]
        )
        '''

        return form_class  # ExtendedForm

    def _validate_no_action(self, model, form):
        no_action_value = form.no_action.data
        if model.file_path is None and not no_action_value:
            raise ValidationError(
                'If no file exists, then this absence must be acknowledged by checking the "no documents" box.')

    def _uncheck_if_document(self, model, form):
        no_action_value = form.no_action.data
        if model.file_path is not None and no_action_value:
            raise ValidationError(
                'The no-document box is checked - please confirm.')

    def get_query(self):

        query = self.session.query(self.model).filter_by(data_type=self.subarea_name)

        if current_user.is_authenticated:
            if current_user.has_role('Admin') or current_user.has_role('Authority'):
                return query
            elif current_user.has_role('Manager'):
                # Manager can only see records related to their company_users
                subquery = db.session.query(CompanyUsers.company_id).filter(
                    CompanyUsers.user_id == current_user.id
                ).subquery()

                query = query.filter(self.model.company_id.in_(subquery))
            elif current_user.has_role('Employee'):
                # Employee can only see their own records
                query = query.filter(self.model.user_id == current_user.id)
                return query

        # For other roles or anonymous users, return an empty query
        return query.filter(self.model.id < 0)

    def is_accessible(self):
        if current_user.is_authenticated:
            if (current_user.has_role('Admin') or current_user.has_role('Authority')
                    or current_user.has_role('Manager') or current_user.has_role('Employee')):
                # Allow access for Admin, Manager, and Employee
                return True

        return False


    def create_model(self, form):
        # Create the model instance using the form data
        model = self.model()
        form.populate_obj(model)

        # Save the model to the database
        self.session.add(model)
        self.session.commit()

        print('create model override')

        # Redirect to custom_base_atti.index
        return redirect(url_for('custom_base_atti.index'))

    '''
    @action('custom_route', 'Edit Document Workflow')
    def custom_route(self, model):
        # Extract data from the request
        fi0 = request.form.get('fi0')
        interval_id = request.form.get('interval_id')
        interval_ord = request.form.get('interval_ord')

        # Perform any additional logic
        perform_complex_operations(model, 'do something')
        # return redirect(url_for('custom_base_atti.index', fi0=fi0, interval_id=interval_id, interval_ord=interval_ord))
    '''

    # 1001
    @action('custom_action', 'Activate Workflow', 'Are you sure you want to create workflow?')
    def custom_action(self, ids):
        # Fetch data for workflows and steps
        workflows = Workflow.query.all()
        steps = Step.query.all()
        # Render the data input template
        return render_template('set_dws_rich_data.html', workflows=workflows, steps=steps)

    def get_list_actions(self):
        actions = super(Atti_dataView, self).get_list_actions()
        # Add your custom action to the list of available actions
        actions.append('custom_action')
        return actions


    def on_model_change(self, form, model, is_created):

        super().on_model_change(form, model, is_created)
        # Reset form data
        form.populate_obj(model)  # This resets the form data to its default values

        if is_created:
            # Handle new model creation:
            # - Set default values
            # - Send notification
            # Apply your custom logic to set data_type

            model.created_on = datetime.now()  # Set the created_on

            self.custom_route(model, form)

            pass
        else:
            # Handle existing model edit:
            # - Compare previous and updated values
            # - Trigger specific actions based on changes
            pass

        user_id = current_user.id  # Get the current user's ID or any other criteria
        try:
            company_id = CompanyUsers.query.filter_by(user_id=current_user.id).first().company_id
        except:
            company_id = None
            pass

        area_id = self.area_id
        subarea_id = self.subarea_id
        status_id = 1
        year_id = form.fi0.data

        nr_intervals = get_subarea_interval_type(self.area_id, self.subarea_id)
        interval_id = nr_intervals
        interval_ord = form.interval_ord.data
        subject_id = form.subject_id.data
        record_type = 'control_area'
        data_type = self.subarea_name

        if form.fi0.data == None or form.interval_ord.data == None:
            raise ValidationError(f"Time interval reference fields cannot be null")

        if form.subject_id.data == None:
            raise ValidationError(f"Document type can not be null")

        # Perform actions relevant to both creation and edit:
        with app.app_context():
            result, message = check_status_limited(is_created, company_id,
                                                   subject_id, None, year_id, interval_ord,
                                                   interval_id, area_id, subarea_id, datetime.today(), db.session)

        # - Validate data
        # - Save the model
        if form.interval_ord.data > 3 or form.interval_ord.data < 0:
            raise ValidationError(
                "Period must be less than or equal to the number of fractions (e.g. 4 for quarters, 12 for months)")
            pass
        if form.fi0.data < 2000 or form.fi0.data > 2099:
            raise ValidationError(
                "Please check the year")
            pass

        if self._uncheck_if_document(model, form):
            pass
        if self._validate_no_action(model, form):
            pass

        if result == False:
            raise ValidationError(message)
            pass

        model.updated_on = datetime.now()  # Set the created_on
        model.user_id = user_id
        model.company_id = company_id
        model.data_type = data_type
        model.record_type = record_type
        model.area_id = area_id
        model.subarea_id = subarea_id
        model.fi0 = year_id
        model.interval_id = interval_id
        model.interval_ord = interval_ord
        model.status_id = status_id
        model.subject_id = subject_id
        model.legal_document_id = None

        if is_created:
            self.session.add(model)
        else:
            self.session.merge(model)

        # print('now redirect')

        # Omitted the commit operation

        # After committing the changes to the database, redirect to the Atti_BaseView (for complex operations)
        # return redirect(url_for('custom_base_atti.index'))

        return model


    '''
    def after_model_change(self, form, model, is_created):
        if is_created:
            # This is where you can trigger operations after a new record is created.
            # For complex operations, you might call a function or even use a Flask view.
            perform_complex_operations(model, 'create')
        else:
            perform_complex_operations(model, 'edit')
    '''


# built as an akternative for att, contenziosi, contingencies etc. (complex, multimodel views
# as opposed to simple models using ModelView)
'''
class CustomBaseView(BaseView):

    @expose('/')  # Default view method
    def index(self):
        user_id = current_user.id  # Replace with your logic to get user ID
        company_id = get_company_id(user_id)  # Replace with your logic to get company ID
        return self._render(company_id=company_id, user_id=user_id)

    def _render(self, **kwargs):
        form = CustomFileLoaderForm(request.form)
        return self.render('custom_file_loader.html', form=form)

    @expose('/', methods=['POST'])
    def post(self):
        form = CustomFileLoaderForm(request.form)
        if form.validate():
            # Handle form data and database operations
            base_data = Base_data(
                id=form.id.data,
                area_id=form.area_id.data,
                subarea_id=form.subarea_id.data,
                user_id=form.user_id.data,
                company_id=form.company_id.data,
                lexic_id=form.lexic_id.data,
                status_id=form.status_id.data,
                document_number=form.document_number.data,
                document_date=form.document_date.data,
                document_title=form.document_title.data,
                document_origin=form.document_origin.data,
                document_receiver=form.document_receiver.data,
                document_year=form.document_year.data,
                document_reference_interval=form.document_reference_interval.data,
                document_interval=form.document_interval.data,
                file_upload=form.file_upload.data,
                no_attachment=form.no_attachment.data,
                workflow=form.workflow.data,
                step=form.step.data,
                deadline_date=form.deadline_date.data,
                auto_move=form.auto_move.data,
                reminder_units=form.reminder_units.data,
                reminder_unit=form.reminder_unit.data
            )
            db.session.add(base_data)
            db.session.commit()

            # implement the complex operations and multi model relationships here
            #
            #

            return redirect(url_for('success_page'))
        else:
            return self._render()  # Re-render form with errors

'''

# 1001
# TODO sistemare modal form - dropdowns
@app.route('/custom_action/', methods=['GET', 'POST'])
def custom_action():
    if request.method == 'POST':
        # Process the form data and perform complex operations
        print('POST towards complex action')
        perform_complex_operations(request.form)
        # Redirect back to the original view or any other desired page

        # Redirect the user to the Flask-Admin list view for YourModel
        # return redirect(url_for('admin.index_view', view_name='atti_data_view'))
        # Redirect the user back to the previous page
        #return redirect(request.referrer)

        # Redirect the user back to the Flask-Admin atti_data_view
        return redirect('open_admin/atti_data_view')

    else:
        # Render the data input template
        return render_template('set_dws_rich_data.html')


# 1001
def perform_complex_operations(form_data):
    # This function might modify related models based on the new MainModel instance
    # For example, create a new RelatedModel instance linked to the MainModel

    print('form data to process', form_data)
    print('*****')
    '''

    :param form_data:
    :return:
    if action == 'create':
        print('create', model)


        new_related_record = RelatedModel(main_model_id=main_model_instance.id, detail="Some detail")
        db.session.add(new_related_record)
        db.session.commit()
        # You could also call a BaseView method or redirect to a BaseView's page for further actions


    elif action == 'edit':
        print('create', model)

    else:
        print('none of the two', model)
        for item in model:
            print('item', item)
    '''
    pass








d3.js (text in the rectangles):

                .enter()
                  .append("text")
                  .attr("x", function(d) {
                    const width = 100px; // Get rectangle width
                    return width / 2; // Center text horizontally
                    })
                  .attr("y", function(d) {
                    const height = 20px; // Get rectangle height
                    return height / 2; // Center text vertically
                    })
                  .attr("dy", ".35em") // Adjust vertical alignment
                  .text(function(d) { return d.name; })
                  .attr("font-size", "8px") // Adjust font size
                  .attr("fill", "black"); // Adjust text color



# collect, 11Mar2024 17h15m

            // Function to collect data from all records
            function collectFormData() {
              var all_records_data = [];
              $('.cloned-form').each(function(index) {
                var record_data = {};

                // Handle auto_move checkbox first (outside the inner each loop)
                var autoMoveCheckbox = $(this).find('[name="auto_move"]');
                var autoMoveValue = autoMoveCheckbox.prop('checked') ? 'y' : ''; // Set value based on checked state

                $(this).find('[name]:not([name*="-id"])').each(function() {
                  var value = $(this).val();

                  // Assign auto_move value directly
                  if ($(this).attr('name') === 'auto_move') {
                    value = autoMoveValue;
                  }

                  console.log("Name:", $(this).attr('name'), "Value:", value); // Log name and value

                  record_data[$(this).attr('name')] = value;
                });

                all_records_data.push(record_data);
              });
              return all_records_data;
            }




#CLONING LOGIC 10Mar2024 19h30m


            // Function to collect data from all records
            function collectFormData() {
                var all_records_data = [];
                $('.cloned-form').each(function(index) {
                    var forms_data = $(this).serializeArray();
                    var record_data = {};
                    for (var i = 0; i < forms_data.length; i++) {
                        record_data[forms_data[i].name] = forms_data[i].value;
                    }
                    all_records_data.push(record_data);
                });
                return all_records_data;
            }


            function cloneFormElements() {
                var originalForm = $('#original-form');
                var clonedForm = originalForm.clone();

                // Generate a unique identifier
                var cloneCounter = $('.cloned-form').length + 1;

                // Update IDs and names for cloned form elements
                clonedForm.find('[id]').each(function() {
                    var id = $(this).attr('id');
                    $(this).attr('id', id + '-' + cloneCounter);
                });

                clonedForm.find('[name]').each(function() {
                    var name = $(this).attr('name');
                    // Replace existing counter with the new one or add a new counter
                    $(this).attr('name', name.replace(/\-\d+$/, '') + '-' + cloneCounter);
                });

                // Clear the selected option of the step dropdown
                clonedForm.find('select[id^="step-select"]').val('');

                // Add a "Remove" button for each cloned record
                var removeButton = $('<button type="button" class="btn btn-danger remove-button">Remove</button>');
                removeButton.click(function() {
                    clonedForm.remove(); // Remove the cloned form when "Remove" button is clicked
                });
                clonedForm.append(removeButton);

                originalForm.after(clonedForm); // Append cloned form after original
            }

            // Event handler for Clone button
            $('#clone-button').click(function() {
                cloneFormElements();
            });




def parse_form_data_bws(form_data):
    # Parse the form data string and return a dictionary
    parsed_data = {}
    for pair in form_data.split('&'):
        key, value = pair.split('=')
        try:
            if key == 'base_data_id':
                parsed_data['base_data_id'] = value
            elif key == 'workflow_id':
                parsed_data['workflow_id'] = value
            elif key == 'step':
                parsed_data['step_id'] = value
            elif key == 'auto_move':
                parsed_data['auto_move'] = value
            elif key == 'hidden_data':
                parsed_data['hidden_data'] = value
        except ValueError:
            # Handle cases where pair.split('=') fails
            print("Error parsing pair:", pair)
    return parsed_data







I have the 'Base_data' table, with: company_id, interval_id, interval_ord, fi0 and other data. The interval_id has a foreign key in 'Interval', values are 1 (year), 2 (semester), 3 (quadrimester), 4 (quarter), 5 (month) 6 (fortnight) and 7 (week); interval_ord is the n-th interval of the year (e.g. 2-nd quarter). fi0 is the year ('YYYY'). Each record is related to one interval_id, interval_ord and fi0. I want to 1) create a function which, for each interval_id, determines which is the current one - in other words, if today were to be 14 august 2024, the function should return: interval_id, current_interval_ord, current_year (e.g. 4, 3, 2024 - i.e. quarter, 3-rd, 2024); 2) I want a function that returns, for each Company, the numbe of records (grouped by area_id and subarea_id) related to the current period and the number of records (grouped likewise) related to the past. Thanks



        query = super(Iniziative_dso_as_dataView, self).get_query()

        # Join the area_subareas table
        query = query.join(AreaSubareas, and_(
            AreaSubareas.area_id == Area.id,
            AreaSubareas.subarea_id == Subarea.id
        ))

        # Join the subarea table to access the name field
        query = query.join(Subarea, Subarea.id == AreaSubareas.subarea_id)

        # Replace 'iniziative_dso_as' with the value of the name field from the subarea table
        query = query.filter_by(data_type=Subarea.name)

        print(query)
        # this is how it was - query = super(Iniziative_dso_as_dataView, self).get_query().filter_by(data_type='iniziative_dso_as')





@app.route('/dashboard_company_audit')
def dashboard_company_audit():
    # Your view logic goes here
    # Perform the SQL query to get information for each company
    print('GO CARDS')
    """
    Generates cards for companies with data in Base_data, including company name, data count, and a new metric.

    Args:
        session: SQLAlchemy session object.

    Returns:
        A list of company cards, where each card is a dictionary containing:
            company_id: The company ID.
            company_name: The company name.
            count: The total number of records for the company.
            new_metric: The number of records grouped by fi0, interval_id, area_id, subarea_id.
    """
    cards = []
    company_data = defaultdict(dict)  # Efficiently group data by company_id

    # Efficiently count distinct company_id's:
    distinct_company_ids = db.session.query(Company.id).distinct().count()

    # Use query with filtering and aggregation for efficiency:
    query = db.session.query(Base_data.company_id, Base_data.fi0, Base_data.interval_id,
                          Base_data.area_id, Base_data.subarea_id, func.count(Base_data.id).label('count'))
    query = query.group_by(Base_data.company_id, Base_data.fi0, Base_data.interval_id,
                           Base_data.area_id, Base_data.subarea_id)

    # Efficiently iterate over grouped results:
    for company_data_row in query.all():
        company_id, fi0, interval_id, area_id, subarea_id, count = company_data_row

        # Store grouped data efficiently:
        company_data[company_id][(fi0, interval_id, area_id, subarea_id)] = count

    # Retrieve company names efficiently:
    company_names = {c.id: c.name for c in db.session.query(Company.id, Company.name).all()}

    # Create company cards with clarity and error handling:
    for company_id in range(1, distinct_company_ids + 1):
        data = company_data.get(company_id, {})
        company_name = company_names.get(company_id)  # Handle potential missing company

        if company_name is None:
            print(f"Warning: Company with ID {company_id} does not exist!")
            continue

        count = sum(data.values())
        new_metric = sum(count for count in data.values())

        card = {
            "company_id": company_id,
            "company_name": company_name,
            "count": count,
            "new_metric": new_metric,
        }

        cards.append(card)

    print(cards)  # Each card contains desired information

    # Pass the companies list and user_roles to the template
    # user_roles = ["Admin", "Authority"]
    return render_template('admin_cards.html', companies=cards, user_roles=user_roles)






@app.route('/dashboard_company_audit')
def dashboard_company_audit():
    # Your view logic goes here
    # Perform the SQL query to get information for each company
    print('GO CARDS')
    """
    Generates cards for companies with data in Base_data, including company name, data count, and a new metric.

    Args:
        session: SQLAlchemy session object.

    Returns:
        A list of company cards, where each card is a dictionary containing:
            company_id: The company ID.
            company_name: The company name.
            count: The total number of records for the company.
            new_metric: The number of records grouped by fi0, interval_id, area_id, subarea_id.
    """

    with app.app_context():
        bind_key = 'db1'  # Use the bind key corresponding to the desired database

        options = {'url': str(db.engine.url)}  # Your options dictionary

        print('url', db.engine.url)
        # Create the SQLAlchemy engine using db object
        engine = db._make_engine(bind_key, options, app)
        # Usage example:
        from sqlalchemy.orm import sessionmaker

        Session = sessionmaker(bind=engine)
        session = Session()  # Create a session object

        print("Session Bind:", session.bind)  # Debug print

        print('report')
        sorted_values = get_pd_report_from_base_data(session)
        # Example usage
        html_cards = generate_html_cards(sorted_values)
        print(html_cards)  # Print or send the HTML code to the desired output

        # Write HTML code to a file
        with open('report_cards1.html', 'w') as f:
            f.write(html_cards)




@app.route('/dashboard_company_audit')
def dashboard_company_audit():
    # Your view logic goes here
    # Perform the SQL query to get information for each company
    print('GO CARDS')
    """
    Generates cards for companies with data in Base_data, including company name, data count, and a new metric.

    Args:
        session: SQLAlchemy session object.

    Returns:
        A list of company cards, where each card is a dictionary containing:
            company_id: The company ID.
            company_name: The company name.
            count: The total number of records for the company.
            new_metric: The number of records grouped by fi0, interval_id, area_id, subarea_id.
    """
    cards = []
    company_data = defaultdict(dict)  # Efficiently group data by company_id

    # Efficiently count distinct company_id's:
    distinct_company_ids = db.session.query(Company.id).distinct().count()

    # Use query with filtering and aggregation for efficiency:
    query = db.session.query(Base_data.company_id, Base_data.fi0, Base_data.interval_id,
                          Base_data.area_id, Base_data.subarea_id, func.count(Base_data.id).label('count'))
    query = query.group_by(Base_data.company_id, Base_data.fi0, Base_data.interval_id,
                           Base_data.area_id, Base_data.subarea_id)

    # Efficiently iterate over grouped results:
    for company_data_row in query.all():
        company_id, fi0, interval_id, area_id, subarea_id, count = company_data_row

        # Store grouped data efficiently:
        company_data[company_id][(fi0, interval_id, area_id, subarea_id)] = count

    # Retrieve company names efficiently:
    company_names = {c.id: c.name for c in db.session.query(Company.id, Company.name).all()}

    # Create company cards with clarity and error handling:
    for company_id in range(1, distinct_company_ids + 1):
        data = company_data.get(company_id, {})
        company_name = company_names.get(company_id)  # Handle potential missing company

        if company_name is None:
            print(f"Warning: Company with ID {company_id} does not exist!")
            continue

        count = sum(data.values())
        new_metric = sum(count for count in data.values())

        card = {
            "company_id": company_id,
            "company_name": company_name,
            "count": count,
            "new_metric": new_metric,
        }

        cards.append(card)

    print(cards)  # Each card contains desired information

    # Pass the companies list and user_roles to the template
    # user_roles = ["Admin", "Authority"]
    return render_template('admin_cards.html', companies=cards, user_roles=user_roles)






    def __repr__(self):
        return (f"<Base_data(id={self.id}, user_id={self.user_id}, company_id={self.company_id}, \
        interval_id={self.interval_id}, interval_ord={self.interval_ord}, status_id={self.status_id}, \
        subject_id={self.subject_id}, legal_document_id={self.legal_document_id}, data_type={self.data_type}, \
        record_type={self.record_type}, created_on={self.created_on}, updated_on={self.updated_on}, deadline={self.deadline},  \
        created_by={self.created_by}, area_id={self.area_id}, subarea_id={self.subarea_id}, lexic_id={self.lexic_id})>")




document.querySelector('#admin-navbar-collapse > ul:nth-child(1) > li.active a').addEventListener('click', function(event) {
  event.preventDefault(); // Prevent default link behavior
  window.location.href = '/open-admin_2/'; // Redirect to the home page
});


<a href="/open-admin_2/">Home</a>



'''@app.route('/')
def index_a():
    return '''
        <a href="/first-admin/">Click me to get to First Admin!</a><br>
        <a href="/second-admin/">Click me to get to Second Admin!</a>
        '''


class FirstAdminIndexView(AdminIndexView):
    @expose('/')
    def index_a(self):
        return 'Hello From first admin :{}.'.format(self)


class SecondAdminIndexView(AdminIndexView):
    @expose('/')
    def index_a(self):
        return 'Hello From second admin :{}'.format(self)


first_admin = Admin(
    app,
    template_mode="bootstrap3",
    url='/open_admin_app',
    endpoint='flussi_data_view1',
    index_view=FirstAdminIndexView(url='/open_admin_app', endpoint='flussi_data_view1')
)'''






from flask_admin import Admin
from flask import Flask, redirect, url_for

app = Flask(__name__)
admin = Admin(app)

# Custom admin view with links to Table1 to Table7 views - Custom View Number 1
class MyCustomViewNumber1(AdminIndexView):
    def index(self):
        # Add links to Table1 to Table7 views
        links = [
            MenuLink(name='Table1', url=url_for('admin.table1view')),
            # Add links to Table2 to Table7 views similarly
        ]
        return self.render('custom_index.html', links=links)

# Custom admin view with links to other views - Custom View Number 2
class MyCustomViewNumber2(AdminIndexView):
    def index(self):
        # Add links to other views
        links = [
            MenuLink(name='SomeOtherView1', url=url_for('admin.some_other_view1')),
            # Add links to other views similarly
        ]
        return self.render('custom_index.html', links=links)

# Route for the first menu item
@app.route('/menu1')
def menu1():
    return redirect(url_for('admin.custom_view_number_1'))

# Route for the second menu item
@app.route('/menu2')
def menu2():
    return redirect(url_for('admin.custom_view_number_2'))

# Register the custom views with Flask-Admin
admin.add_view(MyCustomViewNumber1(name='custom_view_number_1', endpoint='custom_view_number_1'))
admin.add_view(MyCustomViewNumber2(name='custom_view_number_2', endpoint='custom_view_number_2'))

if __name__ == '__main__':
    app.run(debug=True)






                    // Get the user_id from the user_id variable (replace with your actual source of user_id)
                    const user_id = '{{ user_id }}'; // Replace this with the actual source of user_id
                    const company_id = '{{ company_id }}'; // Replace this with the actual source
                    const area_id = '{{ area_id }}'; // Replace this with the actual source
                    const subarea_id = '{{ subarea_id }}'; // Replace this with the actual source
                    const data_type = '{{ data_type }}'; // Replace this with the actual source
                    const record_type = '{{ record_type }}'; // Replace this with the actual source
                    const status_id = '{{ status_id }}'; // Replace this with the actual source
                    const interval_id = '{{ interval_id }}'; // Replace this with the actual source





validate_base_data_fields


Your code looks well-structured and you're correctly handling both POST and GET requests to the `/open_restful21` endpoint. However, there are a few areas that could be improved:

1. **Error Handling**: While you're catching exceptions and printing error messages, it would be better to provide more informative error messages to the client. This will help the client understand what went wrong. For example, instead of returning a generic `"Internal Server Error"` message, you could return more specific messages like `"Validation Error: Missing required field 'fi1'"` or `"Database Error: Failed to insert record"`.

2. **Validation**: You're validating and preparing the data before inserting it into the database, which is good practice. However, ensure that your validation logic covers all necessary cases and that you're handling invalid input appropriately.

3. **Authentication and Authorization**: You're checking if the user is authenticated before proceeding with creating the record. However, you may also need to consider authorization - ensuring that the authenticated user has the necessary permissions to perform the action. If only certain users should be able to create records, you should check their roles or permissions before allowing the action to proceed.

4. **Database Transactions**: Consider wrapping your database operations in a transaction (`db.session.commit()` and `db.session.rollback()`). This ensures data consistency and integrity, especially if multiple database operations are involved.

5. **Response Format**: Ensure consistency in the response format. For successful responses, always return a JSON object with a consistent structure. Similarly, for error responses, provide clear error messages in a consistent format.

Overall, your code appears to be on the right track. Make sure to address these points for robustness and maintainability.



                        //<label for="company_id">Company ID:</label>
                        //<input type="integer" id="company_id" name="company_id" required>

                        //<label for="user_id">User ID:</label>
                        //<input type="integer" id="user_id" name="user_id">
                        //<label for="area_id">Area ID:</label>
                        //<input type="integer" id="area_id" name="area_id">
                        //<label for="subarea_id">Subarea ID:</label>
                        //<input type="text" id="subarea_id" name="subarea_id">
                        //<label for="record_type">Record type:</label>
                        //<input type="text" id="record_type" name="record_type" required>
                        //<label for="data_type">Data type:</label>
                        //<input type="text" id="data_type" name="data_type" required>
                        //<label for="status_id">Status ID:</label>
                        //<input type="integer" id="status_id" name="status_id" required>
                        //<label for="interval_id">Interval ID:</label>
                        //<input type="integer" id="interval_id" name="interval_id" required>



        fetch('{{ api_url }}')
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('data-container');
                container.innerHTML = '<h2>Data from the API:</h2>';
                const dataList = document.createElement('ul');

                // Assuming data is an array with objects containing a 'data' property
                data.data.forEach(record => {
                    const listItem = document.createElement('li');
                    listItem.textContent = JSON.stringify(record);
                    dataList.appendChild(listItem);
                });

                container.appendChild(dataList);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
                const container = document.getElementById('data-container');
                container.innerHTML = '<p>Error fetching data from the API.</p>';
            });




    @blueprint.route('/<int:item_id>/delete', methods=['GET', 'POST'])
    async def delete(model_name, item_id):
        item = model.query.get_or_404(item_id)
        print(item_id, 'to be deleted next')
        # Check the request method
        print('Request method:', request.method)

        # If it's a GET request, render the confirmation template
        if request.method == 'GET':
            return render_template('crud_delete_template.html', item=item, model_name=model_name)

        # If it's a POST request, handle the confirmation
        if request.method == 'POST':
            # Actual deletion logic
            db.session.delete(item)
            db.session.commit()
            print('Record deleted.')

            return redirect(url_for('{}.read'.format(model_name)))





export PYTHONPATH=$PYTHONPATH:/Users/aradulescu/PycharmProjects/ILMFlask101/flaskProject





        // Placeholder functions for Create, Update, and Delete actions
        function createRecord() {
            // Display a modal for creating a new record
            Swal.fire({
                title: 'Create Record',
                html: `
                    <form id="createRecordForm">
                        <label for="company_id">Company ID:</label>
                        <input type="integer" id="company_id" name="company_id" required>

                        <label for="user_id">User ID:</label>
                        <input type="integer" id="user_id" name="user_id">
                        <label for="area_id">Area ID:</label>
                        <input type="integer" id="area_id" name="area_id">
                        <label for="subarea_id">Subarea ID:</label>
                        <input type="text" id="subarea_id" name="subarea_id">
                        <label for="record_type">Record type:</label>
                        <input type="text" id="record_type" name="record_type" required>
                        <label for="data_type">Data type:</label>
                        <input type="text" id="data_type" name="data_type" required>
                        <label for="status_id">Status ID:</label>
                        <input type="integer" id="status_id" name="status_id" required>
                        <label for="interval_id">Interval ID:</label>
                        <input type="integer" id="interval_id" name="interval_id" required>
                        <label for="fi1">Totale:</label>
                        <input type="integer" id="fi1" name="fi1" required>
                        <label for="fi2">IVI:</label>
                        <input type="integer" id="fi2" name="fi2" required>
                        <label for="fi3">Altri:</label>
                        <input type="integer" id="fi3" name="fi3" required>
                        <label for="fc1">Notes:</label>
                        <input type="text" id="fc1" name="fc1">
                        <!-- Add other fields as needed -->

                        <button type="submit">Create</button>
                    </form>
                `,
                showCancelButton: true,
                focusConfirm: false,
                preConfirm: () => {
                    // Handle form submission
                    const form = document.getElementById('createRecordForm');
                    const formData = new FormData(form);
                    const data = {};
                    formData.forEach((value, key) => {
                        data[key] = value;
                    });

                    // Add your logic to send the data to the server for creating a new record
                    console.log('Data to be sent to the server:', data);

                    // For now, just return a dummy response
                    return {
                        success: true,
                        message: 'Record created successfully',
                    };
                }
            }).then(result => {
                // Handle the result after the form is submitted
                if (result.isConfirmed && result.value.success) {
                    // Refresh the data table or update as needed
                    console.log('Record created successfully');
                }
            });
        }




{% macro render_menu(menu_items, user_roles, level=1) %}
    {% for menu_item in menu_items %}
        {% if menu_item_allowed(menu_item, user_roles) %}
            <li class="nav-item{% if menu_item.submenus %} has-submenu{% endif %}">
                <a class="nav-link" href="{{ menu_item.url }}">
                    {{ menu_item.label }}
                    {% if menu_item.submenus %}
                        <span class="submenu-indicator"></span>
                    {% endif %}
                </a>
                {% if menu_item.submenus %}
                    <!-- Submenus -->
                    <ul class="submenu">
                        {{ render_menu(menu_item.submenus, user_roles, level+1) }}
                    </ul>
                {% endif %}
            </li>
        {% endif %}
    {% endfor %}
{% endmacro %}






{% macro render_menu(menu_items, user_roles, level=1) %}
    {% for menu_item in menu_items %}
        {% if menu_item_allowed(menu_item, user_roles) %}
            <li class="nav-item{% if menu_item.submenus %} has-submenu{% endif %}">
                <a class="nav-link" href="{{ menu_item.url }}">
                    {{ menu_item.label }}
                    {% if menu_item.submenus %}
                        <span class="submenu-indicator"></span>
                    {% endif %}
                </a>
                {% if menu_item.submenus %}
                    <!-- Submenus -->
                    <ul class="submenu">
                        {{ render_menu(menu_item.submenus, user_roles, level+1) }}
                    </ul>
                {% endif %}
            </li>
        {% endif %}
    {% endfor %}
{% endmacro %}




// LEFT MENU INLCUDED IN HOME HTML:

    <!-- Left-side menu (conditionally displayed based on user role) -->
    {% if "Employee" in user_roles or "Manager" in user_roles %}
        <!-- Include the left menu template and pass the 'left_menu_items' variable -->
        {% with left_menu_items=left_menu_items %}
            {% include 'home/left_menu.html' %}
        {% endwith %}

        <!-- Debug prints for testing -->
        <p>Left Menu Items: {{ left_menu_items|tojson }}</p>

    {% endif %}






    //Json for left menu comments:


// This menu structure has three levels:
// Category Level: The top-level is the "Company areas" category.
// Item Level: Each category contains "items," which represent different sections within that category.
// Sub-Item Level: Some "items" have "sub_items," forming a nested structure for sub-menus.
// This three-level structure allows you to organize your menu hierarchically, providing a clear and structured navigation
//   experience for users. Each level can have its own set of menu items, and you can customize how these levels
//   are displayed in your application's menu system.


    @blueprint.route('/<int:item_id>/delete', methods=['POST'])
    async def delete(item_id):
        item = model.query.get_or_404(item_id)
        print(item_id, 'to be deleted next')

        # Use url_for to generate the correct delete URL
        delete_url = url_for('{}.delete'.format(model_name), item_id=item_id, _external=True)
        print('delete_url IS', delete_url)

        async with aiohttp.ClientSession() as session:
            async with session.post(delete_url) as resp:
                if resp.status == 200:
                    # Delete the item if the user confirmed
                    db.session.delete(item)
                    db.session.commit()
                else:
                    # Handle any errors or user's decision not to delete
                    print('Record not deleted.')

    from flask import render_template

    # ... (other imports)






#app.py, blueprint declarations:

with app.app_context():
    # db.create_all()
    #user_blueprint = create_crud_blueprint(User, 'model_user')
    #app.register_blueprint(user_blueprint, url_prefix='/model_user')

    user_blueprint = create_crud_blueprint(User, 'user')
    app.register_blueprint(user_blueprint, url_prefix='/model_user')

    company_blueprint = create_crud_blueprint(Company, 'model_company')
    app.register_blueprint(company_blueprint, url_prefix='/model_company')

    question_blueprint = create_crud_blueprint(Question, 'model_question')
    app.register_blueprint(question_blueprint, url_prefix='/model_question')

    questionnaire_blueprint = create_crud_blueprint(Questionnaire, 'model_questionnaire')
    app.register_blueprint(questionnaire_blueprint, url_prefix='/model_questionnaire')

    role_blueprint = create_crud_blueprint(Role, 'model_role')
    app.register_blueprint(role_blueprint, url_prefix='/model_role')

    answer_blueprint = create_crud_blueprint(Answer, 'model_answer')
    app.register_blueprint(answer_blueprint, url_prefix='/model_answer')



# Define your CRUD views for the User model
class UserReadView(MethodView):
    def get(self):
        # Replace this with your logic to retrieve User data
        users = get_user_data()
        return render_template('crud_read_template.html', model_name='User', fields=User.__table__.columns, items=users)

class UserRetrieveView(MethodView):
    def get(self, item_id):
        # Replace this with your logic to retrieve a specific User by item_id
        user = get_user_by_id(item_id)
        print('GET USER RETRIEVE')
        return render_template('crud_retrieve_template.html', model_name='User', fields=User.__table__.columns, item=user)

class UserCreateView(MethodView):
    def get(self):
        return render_template('crud_create_template.html', model_name='User', fields=User.__table__.columns)

    def post(self):
        # Replace this with your logic to create a new User
        create_user(request.form)
        return redirect(url_for('model_user.read'))

class UserUpdateView(MethodView):
    def get(self, item_id):
        # Replace this with your logic to retrieve a specific User by item_id
        user = get_user_by_id(item_id)
        return render_template('crud_update_template.html', model_name='User', fields=User.__table__.columns, item=user)

    def post(self, item_id):
        # Replace this with your logic to update a specific User by item_id
        update_user(item_id, request.form)
        return redirect(url_for('model_user.read'))

class UserDeleteView(MethodView):
    def post(self, item_id):
        # Replace this with your logic to delete a specific User by item_id
        delete_user(item_id)
        return redirect(url_for('model_user.read'))

# Register the CRUD views with the URL rules
app.add_url_rule('/model_user/', view_func=UserReadView.as_view('model_user_read'))
app.add_url_rule('/model_user/<item_id>', view_func=UserRetrieveView.as_view('model_user_retrieve'))
app.add_url_rule('/model_user/add', view_func=UserCreateView.as_view('model_user_create'))
app.add_url_rule('/model_user/<item_id>/update', view_func=UserUpdateView.as_view('model_user_update'))
app.add_url_rule('/model_user/<item_id>/delete', view_func=UserDeleteView.as_view('model_user_delete'))

# crud_read_template:

{% extends "base.html" %}

{% block content %}
    <h1>{{ model_name }} Data</h1>

    <!-- Filters -->
    <p>Blueprint for debug: {{ blueprint }}</p>

    <form method="get" action="{{ url_for(blueprint + '.read') }}">

        <label for="filter_field">Filter by Field:</label>
        <select id="filter_field" name="filter_field">
            <option value="">-- Select Field --</option>
            {% for field in fields %}
                <option value="{{ field.name }}">{{ field.label }}</option>
            {% endfor %}
        </select>

        <label for="filter_value">Filter Value:</label>
        <input type="text" id="filter_value" name="filter_value">

        <button type="submit">Apply Filter</button>
    </form>

    <table class="table">
        <thead>
            <tr>
                {% for field in fields %}
                    <th>{{ field.label }}</th>
                {% endfor %}
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for item in items %}
                {# Check if the item passes the filter criteria before displaying #}
                {% if filter_criteria_match(item) %}
                    <tr>
                        {% for field in fields %}
                            <td>{{ getattr(item, field.name) }}</td>
                        {% endfor %}
                        <td>
                            <form>
                                <a href="{{ url_for(blueprint + '.retrieve', item_id=item.id) }}">Retrieve</a>
                                <a href="{{ url_for(blueprint + '.update', item_id=item.id) }}">Update</a>
                                <form method="post" action="{{ url_for(blueprint + '.delete', item_id=item.id) }}" style="display: inline;">
                                <button type="submit">Delete</button>
                            </form>
                        </td>
                    </tr>
                {% endif %}
            {% endfor %}
        </tbody>
    </table>
{% endblock %}


# crud_retrieve_template:

{% extends "base.html" %}

{% block content %}
    <h1>{{ model_name }} Details</h1>

    <p>Blueprint for debug: {{ blueprint }}</p>

    <table class="table">
        <tbody>
            {% for field in fields %}
                <tr>
                    <th>{{ field.label }}</th>
                    <td>{{ getattr(item, field.name) }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <p>Blueprint for debug: {{ blueprint }}</p>
    <a href="{{ url_for(blueprint + '.read') }}">Back to List</a>
{% endblock %}


# app.py, manage_users and user/retrieval routes:

@app.route('/manage_users', methods=['GET', 'POST'])
@login_required
def manage_users():
    # Your logic here
    print('USER MANAGEMENT')
    form = UserForm()
    message = None

    form.existing_user.choices = [(user.id, user.username) for user in User.query.all()]

    # Assuming 'model_name', 'fields', and 'items' are relevant to your application
    model_name = 'User'  # Replace with the actual model name
    fields = [{'name': 'username', 'label': 'Username'}, {'name': 'first_name', 'label': 'First name'}]  # Replace with actual fields

    items = User.query.all()  # Replace with actual query to fetch items

    # Function to filter items based on criteria
    def filter_criteria_match(item):
        # Replace with your filtering logic if needed
        return True

    print('USER MANAGEMENT 5')

    # Pass the getattr function and blueprint to the template context
    template_context = {
        'model_name': model_name,
        'fields': fields,
        'items': items,
        'filter_criteria_match': filter_criteria_match,
        'getattr': getattr,  # Pass the getattr function
        'blueprint': blueprint # Pass the blueprint name
    }

    print(f'Blueprint in users_read: user')
    # Render the template with the required data
    return render_template('crud_read_template.html', **template_context)


@app.route('/user/retrieve/<int:item_id>', methods=['GET'])
def users_retrieve(item_id):

    # Your logic here
    print('USER MANAGEMENT')
    form = UserForm()
    message = None

    form.existing_user.choices = [(user.id, user.username) for user in User.query.first()]

    # Assuming 'model_name', 'fields', and 'items' are relevant to your application
    model_name = 'User'  # Replace with the actual model name
    fields = [{'name': 'username', 'label': 'Username'}, {'name': 'first_name', 'label': 'First name'}]  # Replace with actual fields

    items = User.query.first()  # Replace with actual query to fetch items

    # Function to filter items based on criteria
    def filter_criteria_match(item):
        # Replace with your filtering logic if needed
        return True

    print('USER RETRIEVAL 1')

    # Pass the getattr function and blueprint to the template context
    template_context = {
        'model_name': model_name,
        'fields': fields,
        'items': items,
        'filter_criteria_match': filter_criteria_match,
        'getattr': getattr,  # Pass the getattr function
        'blueprint': 'user_blueprint'  # Pass the blueprint name
    }
    print(f'Blueprint in users_retrieve: {blueprint}')
    # Your retrieval logic here
    return render_template('crud_retrieve_template.html', blueprint='user', **template_context)

# update, delete and add routes are missing and I want them in

Error is:

  File "/Users/myname/PycharmProjects/ILMFlask101/flaskProject/templates/crud_retrieve_template.html", line 20, in block 'content'
    <a href="{{ url_for(blueprint + '.read') }}">Back to List</a>
    ^^^^^^^^^^^^^^^^^^^^^^^^^
jinja2.exceptions.UndefinedError: 'blueprint' is undefined


WHAT IS THE PROBLEM?




@app.route('/submit_answer', methods=['POST'])
def submit_answer2():

    print('debug retrieve 1')
    user_id = current_user.id  # Use the user ID from your authentication system

    print('debug retrieve 1.1', user_id)
    print('debug retrieve to get quest id', request.form.values())

    # "DEBUG PART"
    # Extract submitted form data
    print('<')
    submitted_data = request.form
    print('>')
    print('data', submitted_data)

    # Validate questionnaire id
    questionnaire_id = submitted_data['questionnaire_id']
    if not questionnaire_id:
        print("Error: questionnaire_id is not present")
        return jsonify({"error": "questionnaire_id is required"})
    else:
        print(questionnaire_id)

    # Validate answer data
    answer_data = submitted_data['answer_data']
    if not isinstance(answer_data, str):
        print("Error: answer_data should be a string")
        return jsonify({"error": "answer_data should be a string"})
    else:
        print(answer_data)

    # Validate answer length
    if len(answer_data) > 100:
        print("Error: answer length should be less than 100 characters")
        return jsonify({"error": "answer length should be less than 100 characters"})
    else:
        print('answer data ok')
    # Continue processing the submitted data
    # ... END



    questionnaire_id = request.form['questionnaire_id']

    print('debug retrieve 2')
    # Extract answer data from the submitted form
    answer_data = {}
    for field_name, field in dynamic_form._fields.items():
        answer_text = request.form.get(field_name, None)
        if answer_text:
            answer_data[field.name] = answer_text

    print('debug retrieve 3')
    # Create a JSON object for the answer
    answer_json = {
        'question_id': question_id,
        'answer_data': answer_data
    }


    print('debug retrieve 4')
    # Insert the JSON object into the central_data table
    central_data = CentralData(
        user_id=user_id,
        interval_id=3,
        status_id=10,
        area_id = request.form['id'],
        topic_id='quest',
        topic1_id=questionnaire_id,
        json=json.dumps(answer_json)
    )

    print('debug retrieve 5')
    db.session.add(central_data)


    print('debug retrieve 6')
    db.session.commit()


    print('debug retrieve 7')
    return redirect(url_for('thank_you'))






@app.route('/submit_answer1', methods=['POST'])
def submit_answer1():
    user_id = current_user.id  # Use the user ID from your authentication system
    questionnaire_id = request.form['questionnaire_id']
    answers = request.form.getlist('answers')  # Assuming 'answers' is the name of your form field

    for question_id, answer_text in enumerate(answers, start=1):
        answer = Answer(user_id=user_id, questionnaire_id=questionnaire_id, questionnaire_name=questionnaire_name,
                        question_id=question_id, answer_text=answer_text)
        db.session.add(answer)

    db.session.commit()

    return redirect(url_for('thank_you'))






some hints /admin <bound method User.is_active of <User Antonio Molteni>> Antonio ['Admin', 'Authority', 'Manager', 'Employee', 'Guest']
127.0.0.1 - - [07/Jan/2024 23:50:55] "POST /access/login HTTP/1.1" 302 -
127.0.0.1 - - [07/Jan/2024 23:50:55] "GET /admin HTTP/1.1" 200 -
(*) 127.0.0.1 - - [07/Jan/2024 23:50:55] "GET / HTTP/1.1" 200 -
load user - data is Antonio
some hints / <bound method User.is_active of <User Antonio Molteni>> Antonio ['Admin', 'Authority', 'Manager', 'Employee', 'Guest']



some hints /authority <bound method User.is_active of <User Giuseppe Vegas>> Giuseppe ['Authority']
127.0.0.1 - - [07/Jan/2024 23:52:26] "POST /access/login HTTP/1.1" 302 -
127.0.0.1 - - [07/Jan/2024 23:52:26] "GET /authority HTTP/1.1" 200 -
load user - data is Giuseppe
some hints / <bound method User.is_active of <User Giuseppe Vegas>> Giuseppe ['Authority']
127.0.0.1 - - [07/Jan/2024 23:52:27] "GET / HTTP/1.1" 403 -



# EXAMPLE OF central_data instance use

app = Flask(__name__)
db.init_app(app)

# Create a CentralData instance
central_data = CentralData(
    interval_id=1,
    date='2023-10-04',
    status_id=1,
    user_id=1,
    area_id='Area 1',
    topic_id=101,
    subtopic_id=102,
    dimension1_id=1,
    dimension2_id=2,
    dimension3_id=3,
    dimension4_id=4,
    dimension5_id=5,
    dimension6_id=6,
    dimension7_id=7,
    json={'feedback': 'Excellent product, quick delivery'},
    created_on=datetime.now(),
    created_by='johndoe'
)

# Save the CentralData instance to the database
db.session.add(central_data)
db.session.commit()










